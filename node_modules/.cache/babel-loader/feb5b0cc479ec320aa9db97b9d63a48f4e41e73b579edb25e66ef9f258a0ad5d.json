{"ast":null,"code":"import contract from \"./contract\";\nimport { getAccountAddr } from \"./getAccountAddr\";\nimport Web3 from \"web3\";\nasync function buyToken(tokenId, nftPrice) {\n  try {\n    if (!contract) {\n      console.error('合约实例未初始化');\n      return null;\n    }\n\n    // 确保传入的tokenId, nftPrice是有效的\n    if (!tokenId || !nftPrice) {\n      console.error('参数无效');\n      return null;\n    }\n    const nftPriceWei = Web3.utils.toWei(nftPrice.toString(), 'ether');\n    const address = await getAccountAddr();\n    const gasEstimate = await contract.methods.buyNFT(tokenId).estimateGas({\n      from: address,\n      value: nftPriceWei // 发送的以太坊金额（以 wei 为单位）\n    });\n    console.log(gasEstimate);\n    // 调用合约的buyNFT函数\n    const tx = await contract.methods.buyNFT(tokenId).send({\n      from: address,\n      // 交易发起者的地址\n      value: nftPriceWei.toString(),\n      // 发送wei的金额\n      gas: gasEstimate\n    });\n\n    // 交易成功后，打印交易哈希\n    console.log('购买成功，交易哈希:', tx.transactionHash);\n    return tx.transactionHash; // 返回交易哈希，以便于后续处理\n  } catch (error) {\n    console.error('购买NFT失败', error);\n    return null;\n  }\n}\nexport default buyToken;","map":{"version":3,"names":["contract","getAccountAddr","Web3","buyToken","tokenId","nftPrice","console","error","nftPriceWei","utils","toWei","toString","address","gasEstimate","methods","buyNFT","estimateGas","from","value","log","tx","send","gas","transactionHash"],"sources":["D:/my-repo/hellometa/src/commons/buyToken.js"],"sourcesContent":["import contract from \"./contract\";\r\nimport { getAccountAddr } from \"./getAccountAddr\";\r\nimport Web3 from \"web3\";\r\n\r\nasync function buyToken(tokenId, nftPrice) {\r\n    try {\r\n        if (!contract) {\r\n            console.error('合约实例未初始化');\r\n            return null;\r\n        }\r\n\r\n        // 确保传入的tokenId, nftPrice是有效的\r\n        if (!tokenId || !nftPrice) {\r\n            console.error('参数无效');\r\n            return null;\r\n        }\r\n        \r\n        const nftPriceWei = Web3.utils.toWei(nftPrice.toString(), 'ether');\r\n        const address = await getAccountAddr();\r\n        const gasEstimate = await contract.methods.buyNFT(tokenId).estimateGas({\r\n            from: address, \r\n            value: nftPriceWei, // 发送的以太坊金额（以 wei 为单位）\r\n        });\r\n        console.log(gasEstimate)\r\n        // 调用合约的buyNFT函数\r\n        const tx = await contract.methods.buyNFT(tokenId).send({\r\n            from: address, // 交易发起者的地址\r\n            value: nftPriceWei.toString(), // 发送wei的金额\r\n            gas: gasEstimate\r\n        });\r\n\r\n        // 交易成功后，打印交易哈希\r\n        console.log('购买成功，交易哈希:', tx.transactionHash);\r\n        return tx.transactionHash; // 返回交易哈希，以便于后续处理\r\n    } catch (error) {\r\n        console.error('购买NFT失败', error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default buyToken;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AACjC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,IAAI,MAAM,MAAM;AAEvB,eAAeC,QAAQA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EACvC,IAAI;IACA,IAAI,CAACL,QAAQ,EAAE;MACXM,OAAO,CAACC,KAAK,CAAC,UAAU,CAAC;MACzB,OAAO,IAAI;IACf;;IAEA;IACA,IAAI,CAACH,OAAO,IAAI,CAACC,QAAQ,EAAE;MACvBC,OAAO,CAACC,KAAK,CAAC,MAAM,CAAC;MACrB,OAAO,IAAI;IACf;IAEA,MAAMC,WAAW,GAAGN,IAAI,CAACO,KAAK,CAACC,KAAK,CAACL,QAAQ,CAACM,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC;IAClE,MAAMC,OAAO,GAAG,MAAMX,cAAc,CAAC,CAAC;IACtC,MAAMY,WAAW,GAAG,MAAMb,QAAQ,CAACc,OAAO,CAACC,MAAM,CAACX,OAAO,CAAC,CAACY,WAAW,CAAC;MACnEC,IAAI,EAAEL,OAAO;MACbM,KAAK,EAAEV,WAAW,CAAE;IACxB,CAAC,CAAC;IACFF,OAAO,CAACa,GAAG,CAACN,WAAW,CAAC;IACxB;IACA,MAAMO,EAAE,GAAG,MAAMpB,QAAQ,CAACc,OAAO,CAACC,MAAM,CAACX,OAAO,CAAC,CAACiB,IAAI,CAAC;MACnDJ,IAAI,EAAEL,OAAO;MAAE;MACfM,KAAK,EAAEV,WAAW,CAACG,QAAQ,CAAC,CAAC;MAAE;MAC/BW,GAAG,EAAET;IACT,CAAC,CAAC;;IAEF;IACAP,OAAO,CAACa,GAAG,CAAC,YAAY,EAAEC,EAAE,CAACG,eAAe,CAAC;IAC7C,OAAOH,EAAE,CAACG,eAAe,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,OAAO,IAAI;EACf;AACJ;AAEA,eAAeJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}