{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n *\n *  @module ABI\n */\nimport { sha3Raw } from 'web3-utils';\nimport { AbiError } from 'web3-errors';\nimport { jsonInterfaceMethodToString, isAbiEventFragment } from '../utils.js';\n/**\n * Encodes the event name to its ABI signature, which are the sha3 hash of the event name including input types.\n * @param functionName - The event name to encode, or the {@link AbiEventFragment} object of the event. If string, it has to be in the form of `eventName(param1Type,param2Type,...)`. eg: myEvent(uint256,bytes32).\n * @returns - The ABI signature of the event.\n *\n * @example\n * ```ts\n * const event = web3.eth.abi.encodeEventSignature({\n *   name: \"myEvent\",\n *   type: \"event\",\n *   inputs: [\n *     {\n *       type: \"uint256\",\n *       name: \"myNumber\",\n *     },\n *     {\n *       type: \"bytes32\",\n *       name: \"myBytes\",\n *     },\n *   ],\n * });\n * console.log(event);\n * > 0xf2eeb729e636a8cb783be044acf6b7b1e2c5863735b60d6daae84c366ee87d97\n *\n *  const event = web3.eth.abi.encodeEventSignature({\n *   inputs: [\n *     {\n *       indexed: true,\n *       name: \"from\",\n *       type: \"address\",\n *     },\n *     {\n *       indexed: true,\n *       name: \"to\",\n *       type: \"address\",\n *     },\n *     {\n *       indexed: false,\n *       name: \"value\",\n *       type: \"uint256\",\n *     },\n *   ],\n *   name: \"Transfer\",\n *   type: \"event\",\n * });\n * console.log(event);\n * > 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n * ```\n */\nexport const encodeEventSignature = functionName => {\n  if (typeof functionName !== 'string' && !isAbiEventFragment(functionName)) {\n    throw new AbiError('Invalid parameter value in encodeEventSignature');\n  }\n  let name;\n  if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {\n    name = jsonInterfaceMethodToString(functionName);\n  } else {\n    name = functionName;\n  }\n  return sha3Raw(name);\n};","map":{"version":3,"names":["sha3Raw","AbiError","jsonInterfaceMethodToString","isAbiEventFragment","encodeEventSignature","functionName","name"],"sources":["../../../src/api/events_api.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;;;;AAKA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,QAAQ,QAAQ,aAAa;AAEtC,SAASC,2BAA2B,EAAEC,kBAAkB,QAAQ,aAAa;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,OAAO,MAAMC,oBAAoB,GAAIC,YAAuC,IAAY;EACvF,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAI,CAACF,kBAAkB,CAACE,YAAY,CAAC,EAAE;IAC1E,MAAM,IAAIJ,QAAQ,CAAC,iDAAiD,CAAC;;EAGtE,IAAIK,IAAY;EAEhB,IAAID,YAAY,KAAK,OAAOA,YAAY,KAAK,UAAU,IAAI,OAAOA,YAAY,KAAK,QAAQ,CAAC,EAAE;IAC7FC,IAAI,GAAGJ,2BAA2B,CAACG,YAAY,CAAC;GAChD,MAAM;IACNC,IAAI,GAAGD,YAAY;;EAGpB,OAAOL,OAAO,CAACM,IAAI,CAAC;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}