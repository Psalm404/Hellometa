{"ast":null,"code":"import \"core-js/modules/web.immediate.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { format } from 'web3-utils';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { watchTransactionByPolling } from './watch_transaction_by_polling.js';\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\n */\nexport const watchTransactionBySubscription = ({\n  web3Context,\n  transactionReceipt,\n  transactionPromiEvent,\n  customTransactionReceiptSchema,\n  returnFormat\n}) => {\n  // The following variable will stay true except if the data arrived,\n  //\tor if watching started after an error had occurred.\n  let needToWatchLater = true;\n  let lastCaughtBlockHash;\n  setImmediate(() => {\n    var _a;\n    (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads').then(subscription => {\n      subscription.on('data', newBlockHeader => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        needToWatchLater = false;\n        if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) ||\n        // For some cases, the on-data event is fired couple times for the same block!\n        // This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\n        lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) {\n          return;\n        }\n        lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;\n        const confirmations = BigInt(newBlockHeader.number) - BigInt(transactionReceipt.blockNumber) + BigInt(1);\n        transactionPromiEvent.emit('confirmation', {\n          confirmations: format({\n            format: 'uint'\n          }, confirmations, returnFormat),\n          receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),\n          latestBlockHash: format({\n            format: 'bytes32'\n          }, newBlockHeader.parentHash, returnFormat)\n        });\n        if (confirmations >= web3Context.transactionConfirmationBlocks) {\n          yield (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription);\n        }\n      }));\n      subscription.on('error', () => __awaiter(void 0, void 0, void 0, function* () {\n        var _b;\n        yield (_b = web3Context.subscriptionManager) === null || _b === void 0 ? void 0 : _b.removeSubscription(subscription);\n        needToWatchLater = false;\n        watchTransactionByPolling({\n          web3Context,\n          transactionReceipt,\n          transactionPromiEvent,\n          customTransactionReceiptSchema,\n          returnFormat\n        });\n      }));\n    }).catch(() => {\n      needToWatchLater = false;\n      watchTransactionByPolling({\n        web3Context,\n        transactionReceipt,\n        customTransactionReceiptSchema,\n        transactionPromiEvent,\n        returnFormat\n      });\n    });\n  });\n  // Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n  setTimeout(() => {\n    if (needToWatchLater) {\n      watchTransactionByPolling({\n        web3Context,\n        transactionReceipt,\n        transactionPromiEvent,\n        returnFormat\n      });\n    }\n  }, web3Context.blockHeaderTimeout * 1000);\n};","map":{"version":3,"names":["format","transactionReceiptSchema","watchTransactionByPolling","watchTransactionBySubscription","web3Context","transactionReceipt","transactionPromiEvent","customTransactionReceiptSchema","returnFormat","needToWatchLater","lastCaughtBlockHash","setImmediate","_a","subscriptionManager","subscribe","then","subscription","on","newBlockHeader","__awaiter","number","parentHash","confirmations","BigInt","blockNumber","emit","receipt","latestBlockHash","transactionConfirmationBlocks","removeSubscription","_b","catch","setTimeout","blockHeaderTimeout"],"sources":["../../../src/utils/watch_transaction_by_subscription.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,MAAM,QAAQ,YAAY;AAInC,SAASC,wBAAwB,QAAQ,eAAe;AACxD,SAAoBC,yBAAyB,QAAQ,mCAAmC;AACxF;;;;AAIA,OAAO,MAAMC,8BAA8B,GAAGA,CAG5C;EACDC,WAAW;EACXC,kBAAkB;EAClBC,qBAAqB;EACrBC,8BAA8B;EAC9BC;AAAY,CAC0B,KAAI;EAC1C;EACA;EACA,IAAIC,gBAAgB,GAAG,IAAI;EAC3B,IAAIC,mBAA2B;EAC/BC,YAAY,CAAC,MAAK;;IACjB,CAAAC,EAAA,GAAAR,WAAW,CAACS,mBAAmB,cAAAD,EAAA,uBAAAA,EAAA,CAC5BE,SAAS,CAAC,UAAU,EACrBC,IAAI,CAAEC,YAAkC,IAAI;MAC5CA,YAAY,CAACC,EAAE,CAAC,MAAM,EAASC,cAAiC,IAAIC,SAAA;;QACnEV,gBAAgB,GAAG,KAAK;QACxB,IACC,EAACS,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEE,MAAM;QACvB;QACA;QACAV,mBAAmB,MAAKQ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEG,UAAU,GACjD;UACD;;QAEDX,mBAAmB,GAAGQ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEG,UAAoB;QAE1D,MAAMC,aAAa,GAClBC,MAAM,CAACL,cAAc,CAACE,MAAM,CAAC,GAC7BG,MAAM,CAAClB,kBAAkB,CAACmB,WAAW,CAAC,GACtCD,MAAM,CAAC,CAAC,CAAC;QAEVjB,qBAAqB,CAACmB,IAAI,CAAC,cAAc,EAAE;UAC1CH,aAAa,EAAEtB,MAAM,CACpB;YAAEA,MAAM,EAAE;UAAM,CAAE,EAClBsB,aAAwB,EACxBd,YAAY,CACZ;UACDkB,OAAO,EAAE1B,MAAM,CACdO,8BAA8B,aAA9BA,8BAA8B,cAA9BA,8BAA8B,GAAIN,wBAAwB,EAC1DI,kBAAkB,EAClBG,YAAY,CACZ;UACDmB,eAAe,EAAE3B,MAAM,CACtB;YAAEA,MAAM,EAAE;UAAS,CAAE,EACrBkB,cAAc,CAACG,UAAmB,EAClCb,YAAY;SAEb,CAAC;QACF,IAAIc,aAAa,IAAIlB,WAAW,CAACwB,6BAA6B,EAAE;UAC/D,MAAM,CAAAhB,EAAA,GAAAR,WAAW,CAACS,mBAAmB,cAAAD,EAAA,uBAAAA,EAAA,CAAEiB,kBAAkB,CAACb,YAAY,CAAC;;MAEzE,CAAC,EAAC;MACFA,YAAY,CAACC,EAAE,CAAC,OAAO,EAAE,MAAWE,SAAA;;QACnC,MAAM,CAAAW,EAAA,GAAA1B,WAAW,CAACS,mBAAmB,cAAAiB,EAAA,uBAAAA,EAAA,CAAED,kBAAkB,CAACb,YAAY,CAAC;QAEvEP,gBAAgB,GAAG,KAAK;QACxBP,yBAAyB,CAAC;UACzBE,WAAW;UACXC,kBAAkB;UAClBC,qBAAqB;UACrBC,8BAA8B;UAC9BC;SACA,CAAC;MACH,CAAC,EAAC;IACH,CAAC,EACAuB,KAAK,CAAC,MAAK;MACXtB,gBAAgB,GAAG,KAAK;MACxBP,yBAAyB,CAAC;QACzBE,WAAW;QACXC,kBAAkB;QAClBE,8BAA8B;QAC9BD,qBAAqB;QACrBE;OACA,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF;EACAwB,UAAU,CAAC,MAAK;IACf,IAAIvB,gBAAgB,EAAE;MACrBP,yBAAyB,CAAC;QACzBE,WAAW;QACXC,kBAAkB;QAClBC,qBAAqB;QACrBE;OACA,CAAC;;EAEJ,CAAC,EAAEJ,WAAW,CAAC6B,kBAAkB,GAAG,IAAI,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}