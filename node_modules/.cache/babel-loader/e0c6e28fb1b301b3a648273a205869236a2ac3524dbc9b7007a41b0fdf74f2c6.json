{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 这里先从 exhibitWorks 中拿到当前 nft 的 url\n// 然后导入 pinata 的解析url函数，拿到一个 json \n// 这个 json 文件包含了 picUrl、workCreateTime、workName、workType、workDesc\n// workCreator 可以通过调用 ownerOfURL 获取这个账户的地址\n\n// 引入 axios 用于 HTTP 请求\nimport axios from 'axios';\n// import getTransactionHash from '@/commons/getTransactionHash';\nimport getTokenIdbyURL from '@/commons/getTokenIdbyURL';\nimport getTokenPrice from '@/commons/getTokenPrice';\nimport buyToken from '@/commons/buyToken';\nimport updateTokenPrice from '@/commons/updateTokenPrice';\nexport default {\n  mounted() {\n    // 在组件创建时获取路由参数\n    this.fileURL = this.$route.query.jsonURL;\n    setTimeout(() => {\n      this.show = true;\n      this.fetchNFTData();\n    }, 100);\n  },\n  data() {\n    return {\n      show: false,\n      fileURL: \"\",\n      picUrl: \"\",\n      // 默认图片，加载完成后会被替换\n      workHashValue: '',\n      // 哈希值是从 exhibitWorks 中获取的\n      workCreateTime: '',\n      workCreator: '',\n      workName: '',\n      workType: '',\n      workDesc: '',\n      workTokenID: '',\n      workIsOnMarket: 0,\n      workPrice: null,\n      workPic: \"\"\n    };\n  },\n  methods: {\n    async buyNFT() {\n      try {\n        let txHash = await buyToken(this.workTokenID, this.workPrice);\n        let transaction = await updateTokenPrice(this.workTokenID, 0);\n        console.log(\"transaction\", transaction);\n        if (txHash) {\n          this.$message({\n            type: 'success',\n            message: '购买成功!'\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async fetchJson(jsonURL) {\n      try {\n        let response = await axios.get(jsonURL);\n        let jsonData = response.data;\n        this.workCreateTime = new Date(jsonData.timestamp);\n        console.log(\"workCreateTime\", this.workCreateTime);\n        this.workName = jsonData.name;\n        this.workType = jsonData.type;\n        this.workDesc = jsonData.desc;\n        this.workTokenId = await getTokenIdbyURL(jsonURL);\n        this.workPrice = await getTokenPrice(this.workTokenID);\n        console.log(this.workTokenId);\n        this.picUrl = jsonData.image;\n        if (jsonData.type == 'txt') {\n          this.workType = '文本';\n          this.workPic = require('@/assets/text.png');\n        } else {\n          this.workType = '图片';\n          this.workPic = this.picUrl;\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    backToRecord() {\n      this.$router.push('/exhibitWorks');\n    },\n    async fetchNFTData() {\n      try {\n        this.workTokenID = await getTokenIdbyURL(this.fileURL);\n        const nftData = await this.fetchFromPinata(this.fileURL);\n        this.picUrl = nftData.image;\n        console.log(nftData);\n        this.workCreateTime = new Date(nftData.timestamp);\n        this.workName = nftData.name;\n        this.workType = nftData.type === 'txt' ? '文本' : '图片';\n        this.workDesc = nftData.desc;\n        this.workCreator = nftData.creator;\n        if (this.workType == '文本') {\n          this.workPic = require('@/assets/text.png');\n        } else {\n          this.workPic = this.picUrl;\n        }\n        this.workPrice = await getTokenPrice(this.workTokenID);\n        console.log('this.fileURL:' + this.fileURL);\n        const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\n        const response = await axios.get(`${apiBaseUrl}/getTxHashByTokenURI`, {\n          params: {\n            tokenURI: this.fileURL\n          }\n        });\n        if (response.data.code === 200) {\n          this.workHashValue = response.data.txHash;\n        } else {\n          console.error('Error fetching txHash:', response.data);\n          this.workHashValue = '获取交易哈希失败';\n        }\n      } catch (error) {\n        console.error('Error fetching NFT data:', error);\n      }\n    },\n    async fetchFromPinata(url) {\n      // 使用 axios 获取 JSON 数据\n      const response = await axios.get(url);\n      return response.data;\n    }\n  }\n};","map":{"version":3,"names":["axios","getTokenIdbyURL","getTokenPrice","buyToken","updateTokenPrice","mounted","fileURL","$route","query","jsonURL","setTimeout","show","fetchNFTData","data","picUrl","workHashValue","workCreateTime","workCreator","workName","workType","workDesc","workTokenID","workIsOnMarket","workPrice","workPic","methods","buyNFT","txHash","transaction","console","log","$message","type","message","error","fetchJson","response","get","jsonData","Date","timestamp","name","desc","workTokenId","image","require","e","backToRecord","$router","push","nftData","fetchFromPinata","creator","apiBaseUrl","process","env","VUE_APP_BACKEND_BASE_URL","params","tokenURI","code","url"],"sources":["src/components/workInfo.vue"],"sourcesContent":["<template>\n<div class=\"container\">\n    <transition name=\"el-fade-in-linear\">\n        <div class=\"content\" v-show=\"show\">\n            <div class=\"detail-box\">\n                <div class=\"detail-box-top\">\n                    <div class=\"detail-box-top-left\">\n                        <div class=\"record-picture\">\n                            <el-avatar shape=\"square\" :size=\"220\" :src=\"workPic\"></el-avatar>\n                        </div>\n                        <div class=\"price-box\">\n                            售价：{{workPrice}} eth\n                        </div>\n                    </div>\n                    <div class=\"detail-box-top-right\">\n                        <div class=\"work-name\">\n                            <span style=\"font-weight: bolder;\">作品名称:</span>\n                            <span style=\" display: block; align-self: self-start\">{{workName}}</span>\n                        </div>\n                        <div class=\"work-type\">\n                            <span style=\"font-weight: bolder;\">作品类别:</span>\n                            <span>{{workType}}</span>\n                        </div>\n                        <div class=\"work-describe\">\n                            <span style=\"font-weight: bolder;\">\n                                作品介绍:\n                            </span>\n                            <span style=\"display: block\">{{ workDesc }}</span>\n                        </div>\n                        <div class=\"work-creator\">\n                            <span style=\"font-weight: bolder;\">\n                                作者名称:\n                            </span>\n                            <span style=\"display: block\">{{ workCreator }}</span>\n                        </div>\n                        <div class=\"work-createtime\">\n                            <span style=\"font-weight: bolder;\">\n                                创建时间:\n                            </span>\n                            <span style=\"display: block\">{{ workCreateTime }}</span>\n                        </div>\n                        <div class=\"work-tokenID\">\n                            <span style=\"font-weight: bolder;\">\n                                tokenId:\n                            </span>\n                            <span style=\"display: block\">{{ workTokenID }}</span>\n                        </div>\n                        <div class=\"work-hashvalue\">\n                            <span style=\"font-weight: bolder;\">\n                                Transaction Hash:\n                            </span>\n                            <span style=\"display: block\">{{ workHashValue }}</span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"detail-box-bottom\">\n                    <div>\n                        <button @click=\"buyNFT\"> 购买 </button>\n                    </div>\n                    <div class=\"back-button\">\n                        <button @click=\"backToRecord\"> 返回 </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"cool-text\">DETAILS</div>\n        </div>\n    </transition>\n</div>\n</template>\n\n<script>\n// 这里先从 exhibitWorks 中拿到当前 nft 的 url\n// 然后导入 pinata 的解析url函数，拿到一个 json \n// 这个 json 文件包含了 picUrl、workCreateTime、workName、workType、workDesc\n// workCreator 可以通过调用 ownerOfURL 获取这个账户的地址\n\n// 引入 axios 用于 HTTP 请求\nimport axios from 'axios';\n// import getTransactionHash from '@/commons/getTransactionHash';\nimport getTokenIdbyURL from '@/commons/getTokenIdbyURL';\nimport getTokenPrice from '@/commons/getTokenPrice';\nimport buyToken from '@/commons/buyToken';\nimport updateTokenPrice from '@/commons/updateTokenPrice';\nexport default {\n    mounted() {\n        // 在组件创建时获取路由参数\n        this.fileURL = this.$route.query.jsonURL;\n        setTimeout(() => {\n            this.show = true;\n            this.fetchNFTData();\n        }, 100)\n    },\n    data() {\n        return {\n            show: false,\n            fileURL: \"\",\n            picUrl: \"\", // 默认图片，加载完成后会被替换\n            workHashValue: '', // 哈希值是从 exhibitWorks 中获取的\n            workCreateTime: '',\n            workCreator: '',\n            workName: '',\n            workType: '',\n            workDesc: '',\n            workTokenID: '',\n            workIsOnMarket: 0,\n            workPrice: null,\n            workPic: \"\",\n        }\n    },\n    methods: {\n        async buyNFT() {\n            try {\n                let txHash = await buyToken(this.workTokenID, this.workPrice);\n                let transaction = await updateTokenPrice(this.workTokenID, 0);\n\n                console.log(\"transaction\", transaction);\n                if (txHash) {\n                    this.$message({\n                        type: 'success',\n                        message: '购买成功!'\n                    });\n                }\n\n            } catch (error) {\n                console.log(error)\n            }\n\n        },\n        async fetchJson(jsonURL) {\n            try {\n                let response = await axios.get(jsonURL)\n                let jsonData = response.data\n                this.workCreateTime = new Date(jsonData.timestamp)\n                console.log(\"workCreateTime\", this.workCreateTime)\n                this.workName = jsonData.name\n                this.workType = jsonData.type\n                this.workDesc = jsonData.desc\n                this.workTokenId = await getTokenIdbyURL(jsonURL)\n                this.workPrice = await getTokenPrice(this.workTokenID)\n                console.log(this.workTokenId)\n                this.picUrl = jsonData.image\n                if (jsonData.type == 'txt') {\n                    this.workType = '文本'\n                    this.workPic = require('@/assets/text.png')\n                } else {\n                    this.workType = '图片'\n                    this.workPic = this.picUrl\n                }\n            } catch (e) {\n                console.log(e)\n            }\n\n        },\n        backToRecord() {\n            this.$router.push('/exhibitWorks');\n        },\n        async fetchNFTData() {\n            try {\n                this.workTokenID = await getTokenIdbyURL(this.fileURL);\n\n                const nftData = await this.fetchFromPinata(this.fileURL);\n\n                this.picUrl = nftData.image;\n                console.log(nftData)\n                this.workCreateTime = new Date(nftData.timestamp);\n                this.workName = nftData.name;\n                this.workType = nftData.type === 'txt' ? '文本' : '图片';\n                this.workDesc = nftData.desc;\n                this.workCreator = nftData.creator;\n                if (this.workType == '文本') {\n                    this.workPic = require('@/assets/text.png');\n                } else {\n                    this.workPic = this.picUrl;\n                }\n\n                this.workPrice = await getTokenPrice(this.workTokenID);\n\n                console.log('this.fileURL:' + this.fileURL);\n                const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\n                const response = await axios.get(`${apiBaseUrl}/getTxHashByTokenURI`, {\n                    params: {\n                        tokenURI: this.fileURL\n                    }\n                });\n\n                if (response.data.code === 200) {\n                    this.workHashValue = response.data.txHash;\n                } else {\n                    console.error('Error fetching txHash:', response.data);\n                    this.workHashValue = '获取交易哈希失败';\n                }\n            } catch (error) {\n                console.error('Error fetching NFT data:', error);\n            }\n        },\n        async fetchFromPinata(url) {\n            // 使用 axios 获取 JSON 数据\n            const response = await axios.get(url);\n            return response.data;\n        }\n    }\n}\n</script>\n\n<style>\n.container {\n    max-height: 100vh;\n    overflow: hidden;\n    width: 100vw;\n}\n\n.content {\n    max-width: 90%;\n    height: 100%;\n    margin-left: 10%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n.detail-box {\n    margin: 60px 60px;\n    background-color: #303030;\n    box-shadow: 0px 4px 15px #000000;\n    height: 80vh;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    z-index: 1;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n}\n\n.work-name,\n.work-type,\n.work-describe,\n.work-createtime,\n.work-tokenID,\n.work-hashvalue,\n.work-creator {\n    text-align: left;\n}\n\n.detail-box-top {\n    flex: 9;\n    width: 100%;\n    display: flex;\n    margin-top: 50px;\n    /* border:1px solid red; */\n}\n\n.detail-box-top-left {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n\n.price-box {\n    text-align: center;\n    /* border:1px solid red; */\n    margin-top: 40px;\n    flex: 1;\n    color: #9c9c9c;\n}\n\n.work-download {\n    margin-top: 30px;\n}\n\n.work-download button {\n    margin: auto;\n    flex: 1;\n    border: 1px solid #9c9c9c;\n    cursor: pointer;\n    width: 180px;\n    color: #9c9c9c;\n    background-color: transparent;\n    border-radius: 5px;\n    height: 30px;\n    line-height: 30px;\n}\n\n.work-download button:hover {\n    border: 1px solid rgba(255, 87, 51, 1);\n    color: rgba(255, 87, 51, 1);\n}\n\n.detail-box-top-right {\n    flex: 2;\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    align-items: self-start;\n    margin-right: 30px;\n    font-size: 17px;\n}\n\n.detail-box-top-right .data-describe {\n    flex: 6;\n    margin-right: 30px;\n}\n\n.detail-box-top-right .data-select {\n    flex: 2;\n\n}\n\n.detail-box-bottom {\n    flex: 2;\n    /* border:1px solid green; */\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    /* border: 1px solid red; */\n    align-items: center;\n    justify-content: center;\n    gap: 200px;\n}\n\n.detail-box-bottom button {\n    margin: auto;\n    flex: 1;\n    border: 1px solid rgba(255, 87, 51, 1);\n    cursor: pointer;\n    width: 180px;\n    color: rgba(255, 87, 51, 0.8);\n    background-color: transparent;\n    border-radius: 5px;\n    height: 30px;\n    line-height: 30px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}