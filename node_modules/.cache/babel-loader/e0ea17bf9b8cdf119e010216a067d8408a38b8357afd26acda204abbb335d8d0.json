{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex } from 'web3-utils';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { bigIntToHex, bigIntToUnpaddedUint8Array, ecrecover, toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/utils.js';\nimport { MAX_INTEGER } from './constants.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport { Capability } from './types.js';\nconst TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n  const v = Number(_v);\n  const chainIdDoubled = Number(chainId) * 2;\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n// eslint-disable-next-line no-use-before-define\nexport class Transaction extends BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData, opts = {}) {\n    var _a;\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    this.common = this._validateTxV(this.v, opts.common);\n    this.gasPrice = uint8ArrayToBigInt(toUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n    if (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n    BaseTransaction._validateNotArray(txData);\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        // eslint-disable-next-line no-lonely-if\n        if (meetsEIP155(this.v, this.common.chainId())) {\n          this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  static fromTxData(txData, opts = {}) {\n    return new Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  static fromSerializedTx(serialized, opts = {}) {\n    const values = RLP.decode(serialized);\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n    return this.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  static fromValuesArray(values, opts = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n    validateNoLeadingZeroes({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new Transaction({\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Uint8Array values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  raw() {\n    return [bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data, this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]), this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]), this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Uint8Array values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  serialize() {\n    return RLP.encode(this.raw());\n  }\n  _getMessageToSign() {\n    const values = [bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data];\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      values.push(toUint8Array(this.common.chainId()));\n      values.push(unpadUint8Array(toUint8Array(0)));\n      values.push(unpadUint8Array(toUint8Array(0)));\n    }\n    return values;\n  }\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign();\n    if (hashMessage) {\n      return keccak256(RLP.encode(message));\n    }\n    return message;\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork()\n      };\n    }\n    return super.getDataFee();\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(RLP.encode(this.raw()));\n      }\n      return this.cache.hash;\n    }\n    return keccak256(RLP.encode(this.raw()));\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    const message = this._getMessageToSign();\n    return keccak256(RLP.encode(message));\n  }\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey() {\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return ecrecover(msgHash, v, bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s), this.supports(Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  _processSignature(_v, r, s) {\n    let v = _v;\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      v += this.common.chainId() * BigInt(2) + BigInt(8);\n    }\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v,\n      r: uint8ArrayToBigInt(r),\n      s: uint8ArrayToBigInt(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  toJSON() {\n    return {\n      nonce: bigIntToHex(this.nonce),\n      gasPrice: bigIntToHex(this.gasPrice),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: bytesToHex(this.data),\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined\n    };\n  }\n  /**\n   * Validates tx's `v` value\n   */\n  _validateTxV(_v, common) {\n    let chainIdBigInt;\n    const v = _v !== undefined ? Number(_v) : undefined;\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v < 37 && v !== 27 && v !== 28) {\n        throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n      }\n    }\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (v !== undefined && v !== 0 && (!common || common.gteHardfork('spuriousDragon')) && v !== 27 && v !== 28) {\n      if (common) {\n        if (!meetsEIP155(BigInt(v), common.chainId())) {\n          throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub;\n        if ((v - 35) % 2 === 0) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n      }\n    }\n    return this._getCommon(common, chainIdBigInt);\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n    errorStr += ` gasPrice=${this.gasPrice}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}","map":{"version":3,"names":["RLP","keccak256","bytesToHex","validateNoLeadingZeroes","bigIntToHex","bigIntToUnpaddedUint8Array","ecrecover","toUint8Array","uint8ArrayToBigInt","unpadUint8Array","MAX_INTEGER","BaseTransaction","Capability","TRANSACTION_TYPE","meetsEIP155","_v","chainId","v","Number","chainIdDoubled","Transaction","constructor","txData","opts","Object","assign","type","common","_validateTxV","gasPrice","gasLimit","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","_validateNotArray","gteHardfork","isSigned","activeCapabilities","push","EIP155ReplayProtection","freeze","_a","fromTxData","fromSerializedTx","serialized","values","decode","Array","isArray","fromValuesArray","length","nonce","to","value","data","r","s","raw","undefined","buf","Uint8Array","from","serialize","encode","_getMessageToSign","supports","getMessageToSign","hashMessage","message","getDataFee","cache","dataFee","hardfork","isFrozen","getUpfrontCost","hash","getMessageToVerifySignature","getSenderPublicKey","msgHash","_validateHighS","e","_processSignature","BigInt","txOptions","toJSON","toString","chainIdBigInt","numSub","_getCommon","errorStr","_getSharedErrorPostfix"],"sources":["../../../src/tx/legacyTransaction.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}