{"ast":null,"code":"const JWT = process.env.VUE_APP_PINATA_JWT;\nexport async function uploadFileToIPFS(file) {\n  try {\n    const formData = new FormData();\n    formData.append('file', file.raw);\n    console.log(file.raw); //debug\n    console.log('JWT:', JWT); //debug\n\n    const pinataMetadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        author: 'Clion Pendragon' //need to change\n      }\n    });\n    formData.append('pinataMetadata', pinataMetadata);\n    const pinataOptions = JSON.stringify({\n      cidVersion: 0\n    });\n    formData.append('pinataOptions', pinataOptions);\n    const res = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${JWT}`\n      },\n      body: formData\n    });\n    const resData = await res.json();\n    if (resData.error !== undefined) {\n      return {\n        success: false,\n        message: resData.error\n      };\n    } else {\n      const IpfsHash = resData.IpfsHash;\n      console.log('upload response 1=========='); //debug\n      console.log(resData); //debug        \n      return {\n        success: true,\n        pinataURL: \"https://brown-urban-hornet-311.mypinata.cloud/ipfs/\" + IpfsHash\n      };\n    }\n  } catch (error) {\n    console.log('upload response 2=========='); //debug\n    console.error(error); //debug\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n}\nexport async function uploadJSONToIPFS(JSONbody) {\n  try {\n    console.log(JSON.stringify(JSONbody, null, 2));\n    // Convert JSON to a string and then to a Blob\n    const jsonBlob = new Blob([JSON.stringify(JSONbody, null, 2)], {\n      type: 'application/json'\n    });\n    const formData = new FormData();\n    formData.append('file', jsonBlob);\n    const pinataMetadata = JSON.stringify({\n      name: JSONbody.name + 'nftJSON',\n      keyvalues: {\n        author: 'Clion Pendragon' //need to change\n      }\n    });\n    formData.append('pinataMetadata', pinataMetadata);\n    const pinataOptions = JSON.stringify({\n      cidVersion: 0\n    });\n    formData.append('pinataOptions', pinataOptions);\n    const res = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${JWT}`\n      },\n      body: formData\n    });\n    const resData = await res.json();\n    if (resData.error !== undefined) {\n      return {\n        success: false,\n        message: resData.error\n      };\n    } else {\n      const IpfsHash = resData.IpfsHash;\n      console.log('upload response 1=========='); //debug\n      console.log(resData); //debug        \n      return {\n        success: true,\n        pinataURL: \"https://brown-urban-hornet-311.mypinata.cloud/ipfs/\" + IpfsHash\n      };\n    }\n  } catch (error) {\n    console.log('upload response 2=========='); //debug\n    console.error(error); //debug\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n}\nexport async function deletePinFromPinata(metadataURL) {\n  const parts = metadataURL.split('/');\n  const hashCID = parts[parts.length - 1];\n  console.log(hashCID);\n  try {\n    const response = await fetch(`https://api.pinata.cloud/pinning/unpin/${hashCID}`, {\n      method: \"DELETE\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${JWT}`\n      }\n    });\n    if (response.ok) {\n      console.log(\"Pin deleted successfully\");\n    } else {\n      console.log(`Failed to delete pin: ${response.status}`);\n    }\n    return response.status;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error.response ? error.response.status : 500; // 返回错误的响应状态码，如果没有响应，则返回 500（服务器错误）\n  }\n}","map":{"version":3,"names":["JWT","process","env","VUE_APP_PINATA_JWT","uploadFileToIPFS","file","formData","FormData","append","raw","console","log","pinataMetadata","JSON","stringify","name","keyvalues","author","pinataOptions","cidVersion","res","fetch","method","headers","Authorization","body","resData","json","error","undefined","success","message","IpfsHash","pinataURL","uploadJSONToIPFS","JSONbody","jsonBlob","Blob","type","deletePinFromPinata","metadataURL","parts","split","hashCID","length","response","accept","ok","status"],"sources":["/Users/acciomac/Desktop/repo/Hellometa/src/commons/pinata.js"],"sourcesContent":["const JWT = process.env.VUE_APP_PINATA_JWT;\n\nexport async function uploadFileToIPFS(file) {\n    try{\n        const formData = new FormData();\n        formData.append('file',file.raw);\n        console.log(file.raw);  //debug\n        console.log('JWT:', JWT);  //debug\n\n        const pinataMetadata = JSON.stringify({\n            name: file.name,\n            keyvalues: {\n                author: 'Clion Pendragon',  //need to change\n            }\n        });\n        formData.append('pinataMetadata', pinataMetadata);\n\n        const pinataOptions = JSON.stringify({\n            cidVersion: 0,\n        });\n        formData.append('pinataOptions', pinataOptions);\n\n        const res = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n            method: 'POST',\n            headers: {\n                Authorization: `Bearer ${JWT}`,\n            },\n            body: formData,\n        });\n        const resData = await res.json();\n        if(resData.error !== undefined){\n            return{\n                success:false,\n                message: resData.error,\n            }\n        }else{\n            const IpfsHash = resData.IpfsHash;\n            console.log('upload response 1=========='); //debug\n            console.log(resData);  //debug        \n            return {\n                success: true,\n                pinataURL: \"https://brown-urban-hornet-311.mypinata.cloud/ipfs/\" + IpfsHash\n            }            \n        }\n\n    } catch (error) {\n        console.log('upload response 2==========');  //debug\n        console.error(error);  //debug\n        return {\n            success: false,\n            message: error.message,\n        }\n    }\n}\n\nexport async function uploadJSONToIPFS(JSONbody) {\n    try{\n        console.log(JSON.stringify(JSONbody, null, 2));\n        // Convert JSON to a string and then to a Blob\n        const jsonBlob = new Blob([JSON.stringify(JSONbody, null, 2)], { type: 'application/json' });\n        const formData = new FormData();\n        \n        formData.append('file',jsonBlob);\n\n        const pinataMetadata = JSON.stringify({\n            name: JSONbody.name + 'nftJSON',\n            keyvalues: {\n                author: 'Clion Pendragon',  //need to change\n            }\n        });\n        formData.append('pinataMetadata', pinataMetadata);\n\n        const pinataOptions = JSON.stringify({\n            cidVersion: 0,\n        });\n        formData.append('pinataOptions', pinataOptions);\n\n        const res = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n            method: 'POST',\n            headers: {\n                Authorization: `Bearer ${JWT}`,\n            },\n            body: formData,\n        });\n        const resData = await res.json();\n        if(resData.error !== undefined){\n            return{\n                success:false,\n                message: resData.error,\n            }\n        }else{\n            const IpfsHash = resData.IpfsHash;\n            console.log('upload response 1=========='); //debug\n            console.log(resData);  //debug        \n            return {\n                success: true,\n                pinataURL: \"https://brown-urban-hornet-311.mypinata.cloud/ipfs/\" + IpfsHash\n            }            \n        }\n\n    } catch (error) {\n        console.log('upload response 2==========');  //debug\n        console.error(error);  //debug\n        return {\n            success: false,\n            message: error.message,\n        }\n    }\n}\n\nexport async function deletePinFromPinata(metadataURL) {\n    const parts = metadataURL.split('/');\n    const hashCID = parts[parts.length - 1];\n  \n    console.log(hashCID);\n  \n    try {\n      const response = await fetch(\n        `https://api.pinata.cloud/pinning/unpin/${hashCID}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            accept: \"application/json\",\n            Authorization: `Bearer ${JWT}`,\n          },\n        }\n      );\n  \n      if (response.ok) {\n        console.log(\"Pin deleted successfully\");\n      } else {\n        console.log(`Failed to delete pin: ${response.status}`);\n      }\n      \n      return response.status;\n    } catch (error) {\n      console.log(\"Error:\", error);\n      return error.response ? error.response.status : 500; // 返回错误的响应状态码，如果没有响应，则返回 500（服务器错误）\n    }\n}\n  \n\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB;AAE1C,OAAO,eAAeC,gBAAgBA,CAACC,IAAI,EAAE;EACzC,IAAG;IACC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAACH,IAAI,CAACI,GAAG,CAAC;IAChCC,OAAO,CAACC,GAAG,CAACN,IAAI,CAACI,GAAG,CAAC,CAAC,CAAE;IACxBC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEX,GAAG,CAAC,CAAC,CAAE;;IAE3B,MAAMY,cAAc,GAAGC,IAAI,CAACC,SAAS,CAAC;MAClCC,IAAI,EAAEV,IAAI,CAACU,IAAI;MACfC,SAAS,EAAE;QACPC,MAAM,EAAE,iBAAiB,CAAG;MAChC;IACJ,CAAC,CAAC;IACFX,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEI,cAAc,CAAC;IAEjD,MAAMM,aAAa,GAAGL,IAAI,CAACC,SAAS,CAAC;MACjCK,UAAU,EAAE;IAChB,CAAC,CAAC;IACFb,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEU,aAAa,CAAC;IAE/C,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUxB,GAAG;MAChC,CAAC;MACDyB,IAAI,EAAEnB;IACV,CAAC,CAAC;IACF,MAAMoB,OAAO,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;IAChC,IAAGD,OAAO,CAACE,KAAK,KAAKC,SAAS,EAAC;MAC3B,OAAM;QACFC,OAAO,EAAC,KAAK;QACbC,OAAO,EAAEL,OAAO,CAACE;MACrB,CAAC;IACL,CAAC,MAAI;MACD,MAAMI,QAAQ,GAAGN,OAAO,CAACM,QAAQ;MACjCtB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;MAC5CD,OAAO,CAACC,GAAG,CAACe,OAAO,CAAC,CAAC,CAAE;MACvB,OAAO;QACHI,OAAO,EAAE,IAAI;QACbG,SAAS,EAAE,qDAAqD,GAAGD;MACvE,CAAC;IACL;EAEJ,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZlB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAE;IAC7CD,OAAO,CAACkB,KAAK,CAACA,KAAK,CAAC,CAAC,CAAE;IACvB,OAAO;MACHE,OAAO,EAAE,KAAK;MACdC,OAAO,EAAEH,KAAK,CAACG;IACnB,CAAC;EACL;AACJ;AAEA,OAAO,eAAeG,gBAAgBA,CAACC,QAAQ,EAAE;EAC7C,IAAG;IACCzB,OAAO,CAACC,GAAG,CAACE,IAAI,CAACC,SAAS,CAACqB,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC9C;IACA,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAACxB,IAAI,CAACC,SAAS,CAACqB,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;MAAEG,IAAI,EAAE;IAAmB,CAAC,CAAC;IAC5F,MAAMhC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAE/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAC4B,QAAQ,CAAC;IAEhC,MAAMxB,cAAc,GAAGC,IAAI,CAACC,SAAS,CAAC;MAClCC,IAAI,EAAEoB,QAAQ,CAACpB,IAAI,GAAG,SAAS;MAC/BC,SAAS,EAAE;QACPC,MAAM,EAAE,iBAAiB,CAAG;MAChC;IACJ,CAAC,CAAC;IACFX,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEI,cAAc,CAAC;IAEjD,MAAMM,aAAa,GAAGL,IAAI,CAACC,SAAS,CAAC;MACjCK,UAAU,EAAE;IAChB,CAAC,CAAC;IACFb,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEU,aAAa,CAAC;IAE/C,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUxB,GAAG;MAChC,CAAC;MACDyB,IAAI,EAAEnB;IACV,CAAC,CAAC;IACF,MAAMoB,OAAO,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;IAChC,IAAGD,OAAO,CAACE,KAAK,KAAKC,SAAS,EAAC;MAC3B,OAAM;QACFC,OAAO,EAAC,KAAK;QACbC,OAAO,EAAEL,OAAO,CAACE;MACrB,CAAC;IACL,CAAC,MAAI;MACD,MAAMI,QAAQ,GAAGN,OAAO,CAACM,QAAQ;MACjCtB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;MAC5CD,OAAO,CAACC,GAAG,CAACe,OAAO,CAAC,CAAC,CAAE;MACvB,OAAO;QACHI,OAAO,EAAE,IAAI;QACbG,SAAS,EAAE,qDAAqD,GAAGD;MACvE,CAAC;IACL;EAEJ,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZlB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAE;IAC7CD,OAAO,CAACkB,KAAK,CAACA,KAAK,CAAC,CAAC,CAAE;IACvB,OAAO;MACHE,OAAO,EAAE,KAAK;MACdC,OAAO,EAAEH,KAAK,CAACG;IACnB,CAAC;EACL;AACJ;AAEA,OAAO,eAAeQ,mBAAmBA,CAACC,WAAW,EAAE;EACnD,MAAMC,KAAK,GAAGD,WAAW,CAACE,KAAK,CAAC,GAAG,CAAC;EACpC,MAAMC,OAAO,GAAGF,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;EAEvClC,OAAO,CAACC,GAAG,CAACgC,OAAO,CAAC;EAEpB,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMxB,KAAK,CAC1B,0CAA0CsB,OAAO,EAAE,EACnD;MACErB,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACPuB,MAAM,EAAE,kBAAkB;QAC1BtB,aAAa,EAAE,UAAUxB,GAAG;MAC9B;IACF,CACF,CAAC;IAED,IAAI6C,QAAQ,CAACE,EAAE,EAAE;MACfrC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,yBAAyBkC,QAAQ,CAACG,MAAM,EAAE,CAAC;IACzD;IAEA,OAAOH,QAAQ,CAACG,MAAM;EACxB,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACdlB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEiB,KAAK,CAAC;IAC5B,OAAOA,KAAK,CAACiB,QAAQ,GAAGjB,KAAK,CAACiB,QAAQ,CAACG,MAAM,GAAG,GAAG,CAAC,CAAC;EACvD;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}