{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport { FMT_BYTES, FMT_NUMBER, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { isNullish, isObject, utils } from 'web3-validator';\nimport { bytesToUint8Array, bytesToHex, numberToHex, toBigInt } from './converters.js';\nimport { mergeDeep } from './objects.js';\nimport { padLeft } from './string_manipulation.js';\nimport { isUint8Array, uint8ArrayConcat } from './uint8array.js';\nconst {\n  parseBaseType\n} = utils;\nexport const isDataFormat = dataFormat => typeof dataFormat === 'object' && !isNullish(dataFormat) && 'number' in dataFormat && 'bytes' in dataFormat;\n/**\n * Finds the schema that corresponds to a specific data path within a larger JSON schema.\n * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.\n *\n * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data\n * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema\n * @param oneOfPath - represents an optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns the JSON schema that matches the data path\n *\n */\nconst findSchemaByDataPath = (schema, dataPath, oneOfPath = []) => {\n  let result = Object.assign({}, schema);\n  let previousDataPath;\n  for (const dataPart of dataPath) {\n    if (result.oneOf && previousDataPath) {\n      const currentDataPath = previousDataPath;\n      const path = oneOfPath.find(([key]) => key === currentDataPath);\n      if (path && path[0] === previousDataPath) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        result = result.oneOf[path[1]];\n      }\n    }\n    if (!result.properties && !result.items) {\n      return undefined;\n    }\n    if (result.properties) {\n      result = result.properties[dataPart];\n    } else if (result.items && result.items.properties) {\n      const node = result.items.properties;\n      result = node[dataPart];\n    } else if (result.items && isObject(result.items)) {\n      result = result.items;\n    } else if (result.items && Array.isArray(result.items)) {\n      result = result.items[parseInt(dataPart, 10)];\n    }\n    if (result && dataPart) previousDataPath = dataPart;\n  }\n  return result;\n};\n/**\n * Converts a value depending on the format\n * @param value - value to convert\n * @param ethType - The type of the value to be parsed\n * @param format - The format to be converted to\n * @returns - The value converted to the specified format\n */\nexport const convertScalarValue = (value, ethType, format) => {\n  try {\n    const {\n      baseType,\n      baseTypeSize\n    } = parseBaseType(ethType);\n    if (baseType === 'int' || baseType === 'uint') {\n      switch (format.number) {\n        case FMT_NUMBER.NUMBER:\n          return Number(toBigInt(value));\n        case FMT_NUMBER.HEX:\n          return numberToHex(toBigInt(value));\n        case FMT_NUMBER.STR:\n          return toBigInt(value).toString();\n        case FMT_NUMBER.BIGINT:\n          return toBigInt(value);\n        default:\n          throw new FormatterError(`Invalid format: ${String(format.number)}`);\n      }\n    }\n    if (baseType === 'bytes') {\n      let paddedValue;\n      if (baseTypeSize) {\n        if (typeof value === 'string') paddedValue = padLeft(value, baseTypeSize * 2);else if (isUint8Array(value)) {\n          paddedValue = uint8ArrayConcat(new Uint8Array(baseTypeSize - value.length), value);\n        }\n      } else {\n        paddedValue = value;\n      }\n      switch (format.bytes) {\n        case FMT_BYTES.HEX:\n          return bytesToHex(bytesToUint8Array(paddedValue));\n        case FMT_BYTES.UINT8ARRAY:\n          return bytesToUint8Array(paddedValue);\n        default:\n          throw new FormatterError(`Invalid format: ${String(format.bytes)}`);\n      }\n    }\n  } catch (error) {\n    // If someone didn't use `eth` keyword we can return original value\n    // as the scope of this code is formatting not validation\n    return value;\n  }\n  return value;\n};\nconst convertArray = ({\n  value,\n  schemaProp,\n  schema,\n  object,\n  key,\n  dataPath,\n  format,\n  oneOfPath = []\n}) => {\n  var _a, _b;\n  // If value is an array\n  if (Array.isArray(value)) {\n    let _schemaProp = schemaProp;\n    // TODO This is a naive approach to solving the issue of\n    // a schema using oneOf. This chunk of code was intended to handle\n    // BlockSchema.transactions\n    // TODO BlockSchema.transactions are not being formatted\n    if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== undefined) {\n      // The following code is basically saying:\n      // if the schema specifies oneOf, then we are to loop\n      // over each possible schema and check if they type of the schema\n      // matches the type of value[0], and if so we use the oneOfSchemaProp\n      // as the schema for formatting\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      schemaProp.oneOf.forEach((oneOfSchemaProp, index) => {\n        var _a, _b;\n        if (!Array.isArray(schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.items) && (typeof value[0] === 'object' && ((_a = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _a === void 0 ? void 0 : _a.type) === 'object' || typeof value[0] === 'string' && ((_b = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _b === void 0 ? void 0 : _b.type) !== 'object')) {\n          _schemaProp = oneOfSchemaProp;\n          oneOfPath.push([key, index]);\n        }\n      });\n    }\n    if (isNullish(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {\n      // Can not find schema for array item, delete that item\n      // eslint-disable-next-line no-param-reassign\n      delete object[key];\n      dataPath.pop();\n      return true;\n    }\n    // If schema for array items is a single type\n    if (isObject(_schemaProp.items) && !isNullish(_schemaProp.items.format)) {\n      for (let i = 0; i < value.length; i += 1) {\n        // eslint-disable-next-line no-param-reassign\n        object[key][i] = convertScalarValue(value[i],\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        (_a = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _a === void 0 ? void 0 : _a.format, format);\n      }\n      dataPath.pop();\n      return true;\n    }\n    // If schema for array items is an object\n    if (!Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) && ((_b = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _b === void 0 ? void 0 : _b.type) === 'object') {\n      for (const arrObject of value) {\n        // eslint-disable-next-line no-use-before-define\n        convert(arrObject, schema, dataPath, format, oneOfPath);\n      }\n      dataPath.pop();\n      return true;\n    }\n    // If schema for array is a tuple\n    if (Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {\n      for (let i = 0; i < value.length; i += 1) {\n        // eslint-disable-next-line no-param-reassign\n        object[key][i] = convertScalarValue(value[i], _schemaProp.items[i].format, format);\n      }\n      dataPath.pop();\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * Converts the data to the specified format\n * @param data - data to convert\n * @param schema - The JSON schema that describes the structure of the data\n * @param dataPath - A string array that specifies the path to the data within the JSON schema\n * @param format  - The format to be converted to\n * @param oneOfPath - An optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns - The data converted to the specified format\n */\nexport const convert = (data, schema, dataPath, format, oneOfPath = []) => {\n  var _a;\n  // If it's a scalar value\n  if (!isObject(data) && !Array.isArray(data)) {\n    return convertScalarValue(data, schema === null || schema === void 0 ? void 0 : schema.format, format);\n  }\n  const object = data;\n  // case when schema is array and `items` is object\n  if (Array.isArray(object) && (schema === null || schema === void 0 ? void 0 : schema.type) === 'array' && ((_a = schema === null || schema === void 0 ? void 0 : schema.items) === null || _a === void 0 ? void 0 : _a.type) === 'object') {\n    convertArray({\n      value: object,\n      schemaProp: schema,\n      schema,\n      object,\n      key: '',\n      dataPath,\n      format,\n      oneOfPath\n    });\n  } else {\n    for (const [key, value] of Object.entries(object)) {\n      dataPath.push(key);\n      const schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);\n      // If value is a scaler value\n      if (isNullish(schemaProp)) {\n        delete object[key];\n        dataPath.pop();\n        continue;\n      }\n      // If value is an object, recurse into it\n      if (isObject(value)) {\n        convert(value, schema, dataPath, format, oneOfPath);\n        dataPath.pop();\n        continue;\n      }\n      // If value is an array\n      if (convertArray({\n        value,\n        schemaProp,\n        schema,\n        object,\n        key,\n        dataPath,\n        format,\n        oneOfPath\n      })) {\n        continue;\n      }\n      object[key] = convertScalarValue(value, schemaProp.format, format);\n      dataPath.pop();\n    }\n  }\n  return object;\n};\nexport const format = (schema, data, returnFormat = DEFAULT_RETURN_FORMAT) => {\n  let dataToParse;\n  if (isObject(data)) {\n    dataToParse = mergeDeep({}, data);\n  } else if (Array.isArray(data)) {\n    dataToParse = [...data];\n  } else {\n    dataToParse = data;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const jsonSchema = isObject(schema) ? schema : utils.ethAbiToJsonSchema(schema);\n  if (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {\n    throw new FormatterError('Invalid json schema for formatting');\n  }\n  return convert(dataToParse, jsonSchema, [], returnFormat);\n};","map":{"version":3,"names":["FormatterError","FMT_BYTES","FMT_NUMBER","DEFAULT_RETURN_FORMAT","isNullish","isObject","utils","bytesToUint8Array","bytesToHex","numberToHex","toBigInt","mergeDeep","padLeft","isUint8Array","uint8ArrayConcat","parseBaseType","isDataFormat","dataFormat","findSchemaByDataPath","schema","dataPath","oneOfPath","result","Object","assign","previousDataPath","dataPart","oneOf","currentDataPath","path","find","key","properties","items","undefined","node","Array","isArray","parseInt","convertScalarValue","value","ethType","format","baseType","baseTypeSize","number","NUMBER","Number","HEX","STR","toString","BIGINT","String","paddedValue","Uint8Array","length","bytes","UINT8ARRAY","error","convertArray","schemaProp","object","_schemaProp","forEach","oneOfSchemaProp","index","_a","type","_b","push","pop","i","arrObject","convert","data","entries","returnFormat","dataToParse","jsonSchema","ethAbiToJsonSchema"],"sources":["../../src/formatter.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}