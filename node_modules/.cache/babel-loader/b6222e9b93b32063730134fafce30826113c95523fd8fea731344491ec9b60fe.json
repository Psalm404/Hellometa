{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * checks input if typeof data is valid string input\n */\nexport const isString = value => typeof value === 'string';\nexport const isHexStrict = hex => typeof hex === 'string' && /^((-)?0x[0-9a-f]+|(0x))$/i.test(hex);\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nexport function isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;\n  if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length) return false;\n  return true;\n}\nexport const isHex = hex => typeof hex === 'number' || typeof hex === 'bigint' || typeof hex === 'string' && /^((-0x|0x|-)?[0-9a-f]+|(0x))$/i.test(hex);\nexport const isHexString8Bytes = (value, prefixed = true) => prefixed ? isHexStrict(value) && value.length === 18 : isHex(value) && value.length === 16;\nexport const isHexString32Bytes = (value, prefixed = true) => prefixed ? isHexStrict(value) && value.length === 66 : isHex(value) && value.length === 64;\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nexport function isHexPrefixed(str) {\n  if (typeof str !== 'string') {\n    throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n  }\n  return str.startsWith('0x');\n}\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */\nexport const validateNoLeadingZeroes = function (values) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString()}`);\n    }\n  }\n};","map":{"version":3,"names":["isString","value","isHexStrict","hex","test","isHexString","length","match","isHex","isHexString8Bytes","prefixed","isHexString32Bytes","isHexPrefixed","str","Error","startsWith","validateNoLeadingZeroes","values","k","v","Object","entries","undefined","toString"],"sources":["../../../src/validation/string.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA;;;AAGA,OAAO,MAAMA,QAAQ,GAAIC,KAAsB,IAAK,OAAOA,KAAK,KAAK,QAAQ;AAE7E,OAAO,MAAMC,WAAW,GAAIC,GAAoB,IAC/C,OAAOA,GAAG,KAAK,QAAQ,IAAI,2BAA2B,CAACC,IAAI,CAACD,GAAG,CAAC;AAEjE;;;;;;;AAOA,OAAM,SAAUE,WAAWA,CAACJ,KAAa,EAAEK,MAAe;EACzD,IAAI,OAAOL,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACM,KAAK,CAAC,kBAAkB,CAAC,EAAE,OAAO,KAAK;EAE/E,IAAI,OAAOD,MAAM,KAAK,WAAW,IAAIA,MAAM,GAAG,CAAC,IAAIL,KAAK,CAACK,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGA,MAAM,EACjF,OAAO,KAAK;EAEb,OAAO,IAAI;AACZ;AAEA,OAAO,MAAME,KAAK,GAAIL,GAAoB,IACzC,OAAOA,GAAG,KAAK,QAAQ,IACvB,OAAOA,GAAG,KAAK,QAAQ,IACtB,OAAOA,GAAG,KAAK,QAAQ,IAAI,gCAAgC,CAACC,IAAI,CAACD,GAAG,CAAE;AAExE,OAAO,MAAMM,iBAAiB,GAAGA,CAACR,KAAa,EAAES,QAAQ,GAAG,IAAI,KAC/DA,QAAQ,GAAGR,WAAW,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACK,MAAM,KAAK,EAAE,GAAGE,KAAK,CAACP,KAAK,CAAC,IAAIA,KAAK,CAACK,MAAM,KAAK,EAAE;AAE3F,OAAO,MAAMK,kBAAkB,GAAGA,CAACV,KAAa,EAAES,QAAQ,GAAG,IAAI,KAChEA,QAAQ,GAAGR,WAAW,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACK,MAAM,KAAK,EAAE,GAAGE,KAAK,CAACP,KAAK,CAAC,IAAIA,KAAK,CAACK,MAAM,KAAK,EAAE;AAE3F;;;;;;AAMA,OAAM,SAAUM,aAAaA,CAACC,GAAW;EACxC,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAC,8DAA8D,OAAOD,GAAG,EAAE,CAAC;;EAG5F,OAAOA,GAAG,CAACE,UAAU,CAAC,IAAI,CAAC;AAC5B;AAEA;;;;;;;;;;;;;AAaA,OAAO,MAAMC,uBAAuB,GAAG,SAAAA,CAAUC,MAEhD;EACA,KAAK,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAE;IAC5C,IAAIE,CAAC,KAAKG,SAAS,IAAIH,CAAC,CAACb,MAAM,GAAG,CAAC,IAAIa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;MAClD,MAAM,IAAIL,KAAK,CAAC,GAAGI,CAAC,0CAA0CC,CAAC,CAACI,QAAQ,EAAE,EAAE,CAAC;;;AAGhF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}