{"ast":null,"code":"/*\r\ngetTokenIdbyURL.js提供根据URL查询对应的TokenId方法\r\n函数一个传参：tokenURI string 所需要查询的URL\r\n函数返回一个整数：uint256 tokenURI对应的TokenId\r\n*/\n\nimport contract from './contract';\nasync function getTokenIdbyURL(tokenURI) {\n  try {\n    if (!contract) {\n      console.error('合约实例尚未初始化');\n      return null;\n    }\n\n    // 调用合约的getTokenIdbyURL函数\n    const tokenId = await contract.methods.getTokenIdbyURL(tokenURI).call();\n    return tokenId;\n  } catch (error) {\n    console.error('根据URL查询代币ID失败', error);\n    return null;\n  }\n}\nexport default getTokenIdbyURL;","map":{"version":3,"names":["contract","getTokenIdbyURL","tokenURI","console","error","tokenId","methods","call"],"sources":["D:/my-repo/hellometa/src/commons/getTokenIdbyURL.js"],"sourcesContent":["/*\r\ngetTokenIdbyURL.js提供根据URL查询对应的TokenId方法\r\n函数一个传参：tokenURI string 所需要查询的URL\r\n函数返回一个整数：uint256 tokenURI对应的TokenId\r\n*/\r\n\r\nimport contract from './contract';\r\n\r\nasync function getTokenIdbyURL(tokenURI) {\r\n    try {\r\n        if (!contract) {\r\n            console.error('合约实例尚未初始化');\r\n            return null;\r\n        }\r\n\r\n        // 调用合约的getTokenIdbyURL函数\r\n        const tokenId = await contract.methods.getTokenIdbyURL(tokenURI).call();\r\n        return tokenId;\r\n    } catch (error) {\r\n        console.error('根据URL查询代币ID失败', error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default getTokenIdbyURL;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,QAAQ,MAAM,YAAY;AAEjC,eAAeC,eAAeA,CAACC,QAAQ,EAAE;EACrC,IAAI;IACA,IAAI,CAACF,QAAQ,EAAE;MACXG,OAAO,CAACC,KAAK,CAAC,WAAW,CAAC;MAC1B,OAAO,IAAI;IACf;;IAEA;IACA,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,OAAO,CAACL,eAAe,CAACC,QAAQ,CAAC,CAACK,IAAI,CAAC,CAAC;IACvE,OAAOF,OAAO;EAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,OAAO,IAAI;EACf;AACJ;AAEA,eAAeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}