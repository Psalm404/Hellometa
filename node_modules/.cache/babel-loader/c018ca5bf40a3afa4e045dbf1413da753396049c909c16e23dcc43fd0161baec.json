{"ast":null,"code":"import { isAddress } from './validation/address.js';\nimport { isBlockNumber, isBlockNumberOrTag, isBlockTag } from './validation/block.js';\nimport { isBloom } from './validation/bloom.js';\nimport { isBoolean } from './validation/boolean.js';\nimport { isBytes } from './validation/bytes.js';\nimport { isFilterObject } from './validation/filter.js';\nimport { isHexStrict, isString } from './validation/string.js';\nimport { isNumber, isInt, isUInt } from './validation/numbers.js';\nconst formats = {\n  address: data => isAddress(data),\n  bloom: data => isBloom(data),\n  blockNumber: data => isBlockNumber(data),\n  blockTag: data => isBlockTag(data),\n  blockNumberOrTag: data => isBlockNumberOrTag(data),\n  bool: data => isBoolean(data),\n  bytes: data => isBytes(data),\n  filter: data => isFilterObject(data),\n  hex: data => isHexStrict(data),\n  uint: data => isUInt(data),\n  int: data => isInt(data),\n  number: data => isNumber(data),\n  string: data => isString(data)\n};\n// generate formats for all numbers types\nfor (let bitSize = 8; bitSize <= 256; bitSize += 8) {\n  formats[`int${bitSize}`] = data => isInt(data, {\n    bitSize\n  });\n  formats[`uint${bitSize}`] = data => isUInt(data, {\n    bitSize\n  });\n}\n// generate bytes\nfor (let size = 1; size <= 32; size += 1) {\n  formats[`bytes${size}`] = data => isBytes(data, {\n    size\n  });\n}\nformats.bytes256 = formats.bytes;\nexport default formats;","map":{"version":3,"names":["isAddress","isBlockNumber","isBlockNumberOrTag","isBlockTag","isBloom","isBoolean","isBytes","isFilterObject","isHexStrict","isString","isNumber","isInt","isUInt","formats","address","data","bloom","blockNumber","blockTag","blockNumberOrTag","bool","bytes","filter","hex","uint","int","number","string","bitSize","size","bytes256"],"sources":["../../src/formats.ts"],"sourcesContent":[null],"mappings":"AAkBA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,aAAa,EAAEC,kBAAkB,EAAEC,UAAU,QAAQ,uBAAuB;AACrF,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,WAAW,EAAEC,QAAQ,QAAQ,wBAAwB;AAC9D,SAASC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,QAAQ,yBAAyB;AAEjE,MAAMC,OAAO,GAAkD;EAC9DC,OAAO,EAAGC,IAAa,IAAKf,SAAS,CAACe,IAAuB,CAAC;EAC9DC,KAAK,EAAGD,IAAa,IAAKX,OAAO,CAACW,IAAuB,CAAC;EAC1DE,WAAW,EAAGF,IAAa,IAAKd,aAAa,CAACc,IAAgC,CAAC;EAC/EG,QAAQ,EAAGH,IAAa,IAAKZ,UAAU,CAACY,IAAc,CAAC;EACvDI,gBAAgB,EAAGJ,IAAa,IAAKb,kBAAkB,CAACa,IAAgC,CAAC;EACzFK,IAAI,EAAGL,IAAa,IAAKV,SAAS,CAACU,IAAuB,CAAC;EAC3DM,KAAK,EAAGN,IAAa,IAAKT,OAAO,CAACS,IAA+C,CAAC;EAClFO,MAAM,EAAGP,IAAa,IAAKR,cAAc,CAACQ,IAAc,CAAC;EACzDQ,GAAG,EAAGR,IAAa,IAAKP,WAAW,CAACO,IAAuB,CAAC;EAC5DS,IAAI,EAAGT,IAAa,IAAKH,MAAM,CAACG,IAAuB,CAAC;EACxDU,GAAG,EAAGV,IAAa,IAAKJ,KAAK,CAACI,IAAuB,CAAC;EACtDW,MAAM,EAAGX,IAAa,IAAKL,QAAQ,CAACK,IAAuB,CAAC;EAC5DY,MAAM,EAAGZ,IAAa,IAAKN,QAAQ,CAACM,IAAuB;CAC3D;AACD;AACA,KAAK,IAAIa,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAI,GAAG,EAAEA,OAAO,IAAI,CAAC,EAAE;EACnDf,OAAO,CAAC,MAAMe,OAAO,EAAE,CAAC,GAAGb,IAAI,IAAIJ,KAAK,CAACI,IAAuB,EAAE;IAAEa;EAAO,CAAE,CAAC;EAC9Ef,OAAO,CAAC,OAAOe,OAAO,EAAE,CAAC,GAAGb,IAAI,IAAIH,MAAM,CAACG,IAAuB,EAAE;IAAEa;EAAO,CAAE,CAAC;;AAEjF;AACA,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,EAAE,EAAEA,IAAI,IAAI,CAAC,EAAE;EACzChB,OAAO,CAAC,QAAQgB,IAAI,EAAE,CAAC,GAAGd,IAAI,IAC7BT,OAAO,CAACS,IAA+C,EAAE;IAAEc;EAAI,CAAE,CAAC;;AAEpEhB,OAAO,CAACiB,QAAQ,GAAGjB,OAAO,CAACQ,KAAK;AAEhC,eAAeR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}