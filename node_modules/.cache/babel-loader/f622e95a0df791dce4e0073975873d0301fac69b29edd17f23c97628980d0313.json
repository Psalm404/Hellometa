{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport Web3 from 'web3';\nimport { mint } from './commons/mint.js';\nconst contractAddr = \"0xee3d4496aD0F702F822E234279777AdA03123313\";\nconst state = Vue.observable({\n  account: null,\n  balance: 0\n});\nexport default {\n  name: 'HellometaComponent',\n  created() {\n    this.$router.push('/connectWallet');\n    new Promise((resolve, reject) => {\n      if (window.ethereum) {\n        let web3 = new Web3(window.ethereum);\n        window.ethereum.request({\n          method: 'eth_requestAccounts'\n        }).then(account => {\n          resolve({\n            account,\n            web3\n          });\n        });\n      } else {\n        alert('MetaMask is not installed');\n        reject(\"MetaMask is not installed\");\n      }\n    }).then(result => {\n      this.main(result);\n    });\n  },\n  methods: {\n    async main({\n      account\n    }) {\n      state.account = Web3.utils.toChecksumAddress(account[0]);\n      if (window.ethereum.isConnected()) {\n        console.log('ethereum is connected');\n      }\n    },\n    Mint() {\n      mint(contractAddr, state.account);\n    }\n  }\n};","map":{"version":3,"names":["Vue","Web3","mint","contractAddr","state","observable","account","balance","name","created","$router","push","Promise","resolve","reject","window","ethereum","web3","request","method","then","alert","result","main","methods","utils","toChecksumAddress","isConnected","console","log","Mint"],"sources":["src/helloMeta.vue"],"sourcesContent":["<template>\n<div id=\"app\">\n    <button @click=\"Mint\">mint</button>\n    <router-view>\n     \n    </router-view>\n</div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport Web3 from 'web3'\nimport {\n    mint\n} from './commons/mint.js';\nconst contractAddr = \"0xee3d4496aD0F702F822E234279777AdA03123313\"\nconst state = Vue.observable({\n    account: null,\n    balance: 0\n})\n\nexport default {\n    name: 'HellometaComponent',\n    created() {\n        this.$router.push('/connectWallet')\n        new Promise((resolve, reject) => {\n            if (window.ethereum) {\n                let web3 = new Web3(window.ethereum);\n                window.ethereum.request({\n                    method: 'eth_requestAccounts'\n                }).then(account => {\n                    resolve({\n                        account,\n                        web3\n                    });\n                });\n            } else {\n                alert('MetaMask is not installed')\n                reject(\"MetaMask is not installed\");\n            }\n        }).then((result) => {\n            this.main(result);\n        });\n    },\n    methods: {\n        async main({\n            account\n        }) {\n            state.account = Web3.utils.toChecksumAddress(account[0])\n            if (window.ethereum.isConnected()) {\n                console.log('ethereum is connected');\n            }\n        },\n        Mint() {\n            mint(contractAddr, state.account);\n        },\n    },\n\n}\n</script>\n\n<style>\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n}\n</style>\n"],"mappings":";AAUA,OAAAA,GAAA;AACA,OAAAC,IAAA;AACA,SACAC,IAAA,QACA;AACA,MAAAC,YAAA;AACA,MAAAC,KAAA,GAAAJ,GAAA,CAAAK,UAAA;EACAC,OAAA;EACAC,OAAA;AACA;AAEA;EACAC,IAAA;EACAC,QAAA;IACA,KAAAC,OAAA,CAAAC,IAAA;IACA,IAAAC,OAAA,EAAAC,OAAA,EAAAC,MAAA;MACA,IAAAC,MAAA,CAAAC,QAAA;QACA,IAAAC,IAAA,OAAAhB,IAAA,CAAAc,MAAA,CAAAC,QAAA;QACAD,MAAA,CAAAC,QAAA,CAAAE,OAAA;UACAC,MAAA;QACA,GAAAC,IAAA,CAAAd,OAAA;UACAO,OAAA;YACAP,OAAA;YACAW;UACA;QACA;MACA;QACAI,KAAA;QACAP,MAAA;MACA;IACA,GAAAM,IAAA,CAAAE,MAAA;MACA,KAAAC,IAAA,CAAAD,MAAA;IACA;EACA;EACAE,OAAA;IACA,MAAAD,KAAA;MACAjB;IACA;MACAF,KAAA,CAAAE,OAAA,GAAAL,IAAA,CAAAwB,KAAA,CAAAC,iBAAA,CAAApB,OAAA;MACA,IAAAS,MAAA,CAAAC,QAAA,CAAAW,WAAA;QACAC,OAAA,CAAAC,GAAA;MACA;IACA;IACAC,KAAA;MACA5B,IAAA,CAAAC,YAAA,EAAAC,KAAA,CAAAE,OAAA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}