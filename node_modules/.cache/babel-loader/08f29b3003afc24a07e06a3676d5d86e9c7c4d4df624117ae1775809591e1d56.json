{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { InvalidBytesError, InvalidNumberError } from 'web3-errors';\nimport { VALID_ETH_BASE_TYPES } from './constants.js';\nimport { isAbiParameterSchema } from './validation/abi.js';\nimport { isHexStrict } from './validation/string.js';\nimport { Web3ValidatorError } from './errors.js';\nconst extraTypes = ['hex', 'number', 'blockNumber', 'blockNumberOrTag', 'filter', 'bloom'];\nexport const parseBaseType = type => {\n  // Remove all empty spaces to avoid any parsing issue.\n  let strippedType = type.replace(/ /, '');\n  let baseTypeSize;\n  let isArray = false;\n  let arraySizes = [];\n  if (type.includes('[')) {\n    // Extract the array type\n    strippedType = strippedType.slice(0, strippedType.indexOf('['));\n    // Extract array indexes\n    arraySizes = [...type.matchAll(/(?:\\[(\\d*)\\])/g)].map(match => parseInt(match[1], 10)).map(size => Number.isNaN(size) ? -1 : size);\n    isArray = arraySizes.length > 0;\n  }\n  if (VALID_ETH_BASE_TYPES.includes(strippedType)) {\n    return {\n      baseType: strippedType,\n      isArray,\n      baseTypeSize,\n      arraySizes\n    };\n  }\n  if (strippedType.startsWith('int')) {\n    baseTypeSize = parseInt(strippedType.substring(3), 10);\n    strippedType = 'int';\n  } else if (strippedType.startsWith('uint')) {\n    baseTypeSize = parseInt(type.substring(4), 10);\n    strippedType = 'uint';\n  } else if (strippedType.startsWith('bytes')) {\n    baseTypeSize = parseInt(strippedType.substring(5), 10);\n    strippedType = 'bytes';\n  } else {\n    return {\n      baseType: undefined,\n      isArray: false,\n      baseTypeSize: undefined,\n      arraySizes\n    };\n  }\n  return {\n    baseType: strippedType,\n    isArray,\n    baseTypeSize,\n    arraySizes\n  };\n};\nconst convertEthType = (type, parentSchema = {}) => {\n  const typePropertyPresent = Object.keys(parentSchema).includes('type');\n  if (typePropertyPresent) {\n    throw new Web3ValidatorError([{\n      keyword: 'eth',\n      message: 'Either \"eth\" or \"type\" can be presented in schema',\n      params: {\n        eth: type\n      },\n      instancePath: '',\n      schemaPath: ''\n    }]);\n  }\n  const {\n    baseType,\n    baseTypeSize\n  } = parseBaseType(type);\n  if (!baseType && !extraTypes.includes(type)) {\n    throw new Web3ValidatorError([{\n      keyword: 'eth',\n      message: `Eth data type \"${type}\" is not valid`,\n      params: {\n        eth: type\n      },\n      instancePath: '',\n      schemaPath: ''\n    }]);\n  }\n  if (baseType) {\n    if (baseType === 'tuple') {\n      throw new Error('\"tuple\" type is not implemented directly.');\n    }\n    return {\n      format: `${baseType}${baseTypeSize !== null && baseTypeSize !== void 0 ? baseTypeSize : ''}`,\n      required: true\n    };\n  }\n  if (type) {\n    return {\n      format: type,\n      required: true\n    };\n  }\n  return {};\n};\nexport const abiSchemaToJsonSchema = (abis, level = '/0') => {\n  const schema = {\n    type: 'array',\n    items: [],\n    maxItems: abis.length,\n    minItems: abis.length\n  };\n  for (const [index, abi] of abis.entries()) {\n    // eslint-disable-next-line no-nested-ternary\n    let abiType;\n    let abiName;\n    let abiComponents = [];\n    // If it's a complete Abi Parameter\n    // e.g. {name: 'a', type: 'uint'}\n    if (isAbiParameterSchema(abi)) {\n      abiType = abi.type;\n      abiName = abi.name;\n      abiComponents = abi.components;\n      // If its short form string value e.g. ['uint']\n    } else if (typeof abi === 'string') {\n      abiType = abi;\n      abiName = `${level}/${index}`;\n      // If it's provided in short form of tuple e.g. [['uint', 'string']]\n    } else if (Array.isArray(abi)) {\n      // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]\n      if (abi[0] && typeof abi[0] === 'string' && abi[0].startsWith('tuple') && !Array.isArray(abi[0]) && abi[1] && Array.isArray(abi[1])) {\n        // eslint-disable-next-line prefer-destructuring\n        abiType = abi[0];\n        abiName = `${level}/${index}`;\n        abiComponents = abi[1];\n      } else {\n        abiType = 'tuple';\n        abiName = `${level}/${index}`;\n        abiComponents = abi;\n      }\n    }\n    const {\n      baseType,\n      isArray,\n      arraySizes\n    } = parseBaseType(abiType);\n    let childSchema;\n    let lastSchema = schema;\n    for (let i = arraySizes.length - 1; i > 0; i -= 1) {\n      childSchema = {\n        type: 'array',\n        $id: abiName,\n        items: [],\n        maxItems: arraySizes[i],\n        minItems: arraySizes[i]\n      };\n      if (arraySizes[i] < 0) {\n        delete childSchema.maxItems;\n        delete childSchema.minItems;\n      }\n      // lastSchema.items is a Schema, concat with 'childSchema'\n      if (!Array.isArray(lastSchema.items)) {\n        lastSchema.items = [lastSchema.items, childSchema];\n      } // lastSchema.items is an empty Scheme array, set it to 'childSchema'\n      else if (lastSchema.items.length === 0) {\n        lastSchema.items = [childSchema];\n      } // lastSchema.items is a non-empty Scheme array, append 'childSchema'\n      else {\n        lastSchema.items.push(childSchema);\n      }\n      lastSchema = childSchema;\n    }\n    if (baseType === 'tuple' && !isArray) {\n      const nestedTuple = abiSchemaToJsonSchema(abiComponents, abiName);\n      nestedTuple.$id = abiName;\n      lastSchema.items.push(nestedTuple);\n    } else if (baseType === 'tuple' && isArray) {\n      const arraySize = arraySizes[0];\n      const item = Object.assign({\n        type: 'array',\n        $id: abiName,\n        items: abiSchemaToJsonSchema(abiComponents, abiName)\n      }, arraySize >= 0 && {\n        minItems: arraySize,\n        maxItems: arraySize\n      });\n      lastSchema.items.push(item);\n    } else if (isArray) {\n      const arraySize = arraySizes[0];\n      const item = Object.assign({\n        type: 'array',\n        $id: abiName,\n        items: convertEthType(abiType)\n      }, arraySize >= 0 && {\n        minItems: arraySize,\n        maxItems: arraySize\n      });\n      lastSchema.items.push(item);\n    } else if (Array.isArray(lastSchema.items)) {\n      // Array of non-tuple items\n      lastSchema.items.push(Object.assign({\n        $id: abiName\n      }, convertEthType(abiType)));\n    } else {\n      // Nested object\n      lastSchema.items.push(Object.assign({\n        $id: abiName\n      }, convertEthType(abiType)));\n    }\n    lastSchema = schema;\n  }\n  return schema;\n};\nexport const ethAbiToJsonSchema = abis => abiSchemaToJsonSchema(abis);\nexport const fetchArrayElement = (data, level) => {\n  if (level === 1) {\n    return data;\n  }\n  return fetchArrayElement(data[0], level - 1);\n};\nexport const transformJsonDataToAbiFormat = (abis, data, transformedData) => {\n  const newData = [];\n  for (const [index, abi] of abis.entries()) {\n    // eslint-disable-next-line no-nested-ternary\n    let abiType;\n    let abiName;\n    let abiComponents = [];\n    // If it's a complete Abi Parameter\n    // e.g. {name: 'a', type: 'uint'}\n    if (isAbiParameterSchema(abi)) {\n      abiType = abi.type;\n      abiName = abi.name;\n      abiComponents = abi.components;\n      // If its short form string value e.g. ['uint']\n    } else if (typeof abi === 'string') {\n      abiType = abi;\n      // If it's provided in short form of tuple e.g. [['uint', 'string']]\n    } else if (Array.isArray(abi)) {\n      // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]\n      if (abi[1] && Array.isArray(abi[1])) {\n        abiType = abi[0];\n        abiComponents = abi[1];\n      } else {\n        abiType = 'tuple';\n        abiComponents = abi;\n      }\n    }\n    const {\n      baseType,\n      isArray,\n      arraySizes\n    } = parseBaseType(abiType);\n    const dataItem = Array.isArray(data) ? data[index] : data[abiName];\n    if (baseType === 'tuple' && !isArray) {\n      newData.push(transformJsonDataToAbiFormat(abiComponents, dataItem, transformedData));\n    } else if (baseType === 'tuple' && isArray) {\n      const tupleData = [];\n      for (const tupleItem of dataItem) {\n        // Nested array\n        if (arraySizes.length > 1) {\n          const nestedItems = fetchArrayElement(tupleItem, arraySizes.length - 1);\n          const nestedData = [];\n          for (const nestedItem of nestedItems) {\n            nestedData.push(transformJsonDataToAbiFormat(abiComponents, nestedItem, transformedData));\n          }\n          tupleData.push(nestedData);\n        } else {\n          tupleData.push(transformJsonDataToAbiFormat(abiComponents, tupleItem, transformedData));\n        }\n      }\n      newData.push(tupleData);\n    } else {\n      newData.push(dataItem);\n    }\n  }\n  // Have to reassign before pushing to transformedData\n  // eslint-disable-next-line no-param-reassign\n  transformedData = transformedData !== null && transformedData !== void 0 ? transformedData : [];\n  transformedData.push(...newData);\n  return transformedData;\n};\n/**\n * Code points to int\n */\nexport const codePointToInt = codePoint => {\n  if (codePoint >= 48 && codePoint <= 57) {\n    /* ['0'..'9'] -> [0..9] */\n    return codePoint - 48;\n  }\n  if (codePoint >= 65 && codePoint <= 70) {\n    /* ['A'..'F'] -> [10..15] */\n    return codePoint - 55;\n  }\n  if (codePoint >= 97 && codePoint <= 102) {\n    /* ['a'..'f'] -> [10..15] */\n    return codePoint - 87;\n  }\n  throw new Error(`Invalid code point: ${codePoint}`);\n};\n/**\n * Converts value to it's number representation\n */\nexport const hexToNumber = value => {\n  if (!isHexStrict(value)) {\n    throw new Error('Invalid hex string');\n  }\n  const [negative, hexValue] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];\n  const num = BigInt(hexValue);\n  if (num > Number.MAX_SAFE_INTEGER) {\n    return negative ? -num : num;\n  }\n  if (num < Number.MIN_SAFE_INTEGER) {\n    return num;\n  }\n  return negative ? -1 * Number(num) : Number(num);\n};\n/**\n * Converts value to it's hex representation\n */\nexport const numberToHex = value => {\n  if ((typeof value === 'number' || typeof value === 'bigint') && value < 0) {\n    return `-0x${value.toString(16).slice(1)}`;\n  }\n  if ((typeof value === 'number' || typeof value === 'bigint') && value >= 0) {\n    return `0x${value.toString(16)}`;\n  }\n  if (typeof value === 'string' && isHexStrict(value)) {\n    const [negative, hex] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];\n    const hexValue = hex.split(/^(-)?0(x|X)/).slice(-1)[0];\n    return `${negative ? '-' : ''}0x${hexValue.replace(/^0+/, '').toLowerCase()}`;\n  }\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return numberToHex(BigInt(value));\n  }\n  throw new InvalidNumberError(value);\n};\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n */\nexport const padLeft = (value, characterAmount, sign = '0') => {\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return value.padStart(characterAmount, sign);\n  }\n  const hex = typeof value === 'string' && isHexStrict(value) ? value : numberToHex(value);\n  const [prefix, hexValue] = hex.startsWith('-') ? ['-0x', hex.slice(3)] : ['0x', hex.slice(2)];\n  return `${prefix}${hexValue.padStart(characterAmount, sign)}`;\n};\nexport function uint8ArrayToHexString(uint8Array) {\n  let hexString = '0x';\n  for (const e of uint8Array) {\n    const hex = e.toString(16);\n    hexString += hex.length === 1 ? `0${hex}` : hex;\n  }\n  return hexString;\n}\n// for optimized technique for hex to bytes conversion\nconst charCodeMap = {\n  zero: 48,\n  nine: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102\n};\nfunction charCodeToBase16(char) {\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine) return char - charCodeMap.zero;\n  if (char >= charCodeMap.A && char <= charCodeMap.F) return char - (charCodeMap.A - 10);\n  if (char >= charCodeMap.a && char <= charCodeMap.f) return char - (charCodeMap.a - 10);\n  return undefined;\n}\nexport function hexToUint8Array(hex) {\n  let offset = 0;\n  if (hex.startsWith('0') && (hex[1] === 'x' || hex[1] === 'X')) {\n    offset = 2;\n  }\n  if (hex.length % 2 !== 0) {\n    throw new InvalidBytesError(`hex string has odd length: ${hex}`);\n  }\n  const length = (hex.length - offset) / 2;\n  const bytes = new Uint8Array(length);\n  for (let index = 0, j = offset; index < length; index += 1) {\n    // eslint-disable-next-line no-plusplus\n    const nibbleLeft = charCodeToBase16(hex.charCodeAt(j++));\n    // eslint-disable-next-line no-plusplus\n    const nibbleRight = charCodeToBase16(hex.charCodeAt(j++));\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\n      throw new InvalidBytesError(`Invalid byte sequence (\"${hex[j - 2]}${hex[j - 1]}\" in \"${hex}\").`);\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight;\n  }\n  return bytes;\n}\n// @TODO: Remove this function and its usages once all sub dependencies uses version 1.3.3 or above of @noble/hashes\nexport function ensureIfUint8Array(data) {\n  var _a;\n  if (!(data instanceof Uint8Array) && ((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array') {\n    return Uint8Array.from(data);\n  }\n  return data;\n}","map":{"version":3,"names":["InvalidBytesError","InvalidNumberError","VALID_ETH_BASE_TYPES","isAbiParameterSchema","isHexStrict","Web3ValidatorError","extraTypes","parseBaseType","type","strippedType","replace","baseTypeSize","isArray","arraySizes","includes","slice","indexOf","matchAll","map","match","parseInt","size","Number","isNaN","length","baseType","startsWith","substring","undefined","convertEthType","parentSchema","typePropertyPresent","Object","keys","keyword","message","params","eth","instancePath","schemaPath","Error","format","required","abiSchemaToJsonSchema","abis","level","schema","items","maxItems","minItems","index","abi","entries","abiType","abiName","abiComponents","name","components","Array","childSchema","lastSchema","i","$id","push","nestedTuple","arraySize","item","assign","ethAbiToJsonSchema","fetchArrayElement","data","transformJsonDataToAbiFormat","transformedData","newData","dataItem","tupleData","tupleItem","nestedItems","nestedData","nestedItem","codePointToInt","codePoint","hexToNumber","value","negative","hexValue","num","BigInt","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","numberToHex","toString","hex","split","toLowerCase","padLeft","characterAmount","sign","padStart","prefix","uint8ArrayToHexString","uint8Array","hexString","e","charCodeMap","zero","nine","A","F","a","f","charCodeToBase16","char","hexToUint8Array","offset","bytes","Uint8Array","j","nibbleLeft","charCodeAt","nibbleRight","ensureIfUint8Array","_a","constructor","from"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}