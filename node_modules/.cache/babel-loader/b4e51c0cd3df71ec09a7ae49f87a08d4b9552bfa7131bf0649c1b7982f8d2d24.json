{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport { getAccessListData, getAccessListJSON, getDataFeeEIP2930, verifyAccessList } from './utils.js';\nimport { bigIntToHex, toUint8Array, ecrecover, uint8ArrayToBigInt, bigIntToUnpaddedUint8Array } from '../common/utils.js';\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n// eslint-disable-next-line no-use-before-define\nexport class FeeMarketEIP1559Transaction extends BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData, opts = {}) {\n    var _a;\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    this.DEFAULT_HARDFORK = 'london';\n    const {\n      chainId,\n      accessList,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = txData;\n    this.common = this._getCommon(opts.common, chainId);\n    this.chainId = this.common.chainId();\n    if (!this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common');\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n    // Populate the access list fields\n    const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    this.accessList = accessListData.accessList;\n    this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    verifyAccessList(this.accessList);\n    this.maxFeePerGas = uint8ArrayToBigInt(toUint8Array(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n    this.maxPriorityFeePerGas = uint8ArrayToBigInt(toUint8Array(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n    this._validateCannotExceedMaxInteger({\n      maxFeePerGas: this.maxFeePerGas,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas\n    });\n    BaseTransaction._validateNotArray(txData);\n    if (this.gasLimit * this.maxFeePerGas > MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n      const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n      throw new Error(msg);\n    }\n    this._validateYParity();\n    this._validateHighS();\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  static fromTxData(txData, opts = {}) {\n    return new FeeMarketEIP1559Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n  static fromSerializedTx(serialized, opts = {}) {\n    if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n      throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(serialized.subarray(0, 1))}`);\n    }\n    const values = RLP.decode(serialized.subarray(1));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n  static fromValuesArray(values, opts = {}) {\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n    }\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s] = values;\n    this._validateNotArray({\n      chainId,\n      v\n    });\n    validateNoLeadingZeroes({\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new FeeMarketEIP1559Transaction({\n      chainId: uint8ArrayToBigInt(chainId),\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n      v: v !== undefined ? uint8ArrayToBigInt(v) : undefined,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    let cost = super.getDataFee();\n    cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n    return cost;\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n  getUpfrontCost(baseFee = BigInt(0)) {\n    const prio = this.maxPriorityFeePerGas;\n    const maxBase = this.maxFeePerGas - baseFee;\n    const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n    const gasPrice = inclusionFeePerGas + baseFee;\n    return this.gasLimit * gasPrice + this.value;\n  }\n  /**\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Uint8Array values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n  raw() {\n    return [bigIntToUnpaddedUint8Array(this.chainId), bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.maxPriorityFeePerGas), bigIntToUnpaddedUint8Array(this.maxFeePerGas), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data, this.accessList, this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]), this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]), this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize() {\n    const base = this.raw();\n    return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n  }\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true) {\n    const base = this.raw().slice(0, 9);\n    const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n    if (hashMessage) {\n      return keccak256(message);\n    }\n    return message;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize());\n      }\n      return this.cache.hash;\n    }\n    return keccak256(this.serialize());\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    return this.getMessageToSign();\n  }\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n      throw new Error(msg);\n    }\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return ecrecover(msgHash, v + BigInt(27),\n      // Recover the 27 which was stripped from ecsign\n      bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  _processSignature(v, r, s) {\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return FeeMarketEIP1559Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n      maxFeePerGas: this.maxFeePerGas,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: v - BigInt(27),\n      r: uint8ArrayToBigInt(r),\n      s: uint8ArrayToBigInt(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON() {\n    const accessListJSON = getAccessListJSON(this.accessList);\n    return {\n      chainId: bigIntToHex(this.chainId),\n      nonce: bigIntToHex(this.nonce),\n      maxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),\n      maxFeePerGas: bigIntToHex(this.maxFeePerGas),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: bytesToHex(this.data),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined\n    };\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n    errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}","map":{"version":3,"names":["keccak256","validateNoLeadingZeroes","RLP","bytesToHex","hexToBytes","uint8ArrayConcat","uint8ArrayEquals","MAX_INTEGER","BaseTransaction","getAccessListData","getAccessListJSON","getDataFeeEIP2930","verifyAccessList","bigIntToHex","toUint8Array","ecrecover","uint8ArrayToBigInt","bigIntToUnpaddedUint8Array","TRANSACTION_TYPE","TRANSACTION_TYPE_UINT8ARRAY","toString","padStart","FeeMarketEIP1559Transaction","constructor","txData","opts","Object","assign","type","DEFAULT_HARDFORK","chainId","accessList","maxFeePerGas","maxPriorityFeePerGas","common","_getCommon","isActivatedEIP","Error","activeCapabilities","concat","accessListData","AccessListJSON","_validateCannotExceedMaxInteger","_validateNotArray","gasLimit","msg","_errorMsg","_validateYParity","_validateHighS","freeze","_a","fromTxData","fromSerializedTx","serialized","subarray","values","decode","Array","isArray","fromValuesArray","length","nonce","to","value","data","v","r","s","undefined","getDataFee","cache","dataFee","hardfork","cost","BigInt","isFrozen","getUpfrontCost","baseFee","prio","maxBase","inclusionFeePerGas","gasPrice","raw","buf","Uint8Array","from","serialize","base","encode","getMessageToSign","hashMessage","slice","message","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","e","_processSignature","txOptions","toJSON","accessListJSON","errorStr","_getSharedErrorPostfix"],"sources":["../../../src/tx/eip1559Transaction.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}