{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_RETURN_FORMAT, ETH_DATA_FORMAT } from 'web3-types';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport { InvalidTransactionWithSender, InvalidTransactionWithReceiver, LocalWalletNotAvailableError, TransactionDataAndInputError, UnableToPopulateNonceError } from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getChainId, getTransactionCount, estimateGas } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\nexport const getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {\n  if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n    if (typeof transaction[attr] === 'string' && isAddress(transaction[attr])) {\n      return transaction[attr];\n    }\n    if (!isHexStrict(transaction[attr]) && isNumber(transaction[attr])) {\n      if (web3Context.wallet) {\n        const account = web3Context.wallet.get(format({\n          format: 'uint'\n        }, transaction[attr], NUMBER_DATA_FORMAT));\n        if (!isNullish(account)) {\n          return account.address;\n        }\n        throw new LocalWalletNotAvailableError();\n      }\n      throw new LocalWalletNotAvailableError();\n    } else {\n      throw attr === 'from' ? new InvalidTransactionWithSender(transaction.from) :\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      new InvalidTransactionWithReceiver(transaction.to);\n    }\n  }\n  if (attr === 'from') {\n    if (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n    if (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n  }\n  return undefined;\n};\nexport const getTransactionNonce = (web3Context, address, returnFormat = DEFAULT_RETURN_FORMAT) => __awaiter(void 0, void 0, void 0, function* () {\n  if (isNullish(address)) {\n    // TODO if (web3.eth.accounts.wallet) use address from local wallet\n    throw new UnableToPopulateNonceError();\n  }\n  return getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\n});\nexport const getTransactionType = (transaction, web3Context) => {\n  const inferredType = detectTransactionType(transaction, web3Context);\n  if (!isNullish(inferredType)) return inferredType;\n  if (!isNullish(web3Context.defaultTransactionType)) return format({\n    format: 'uint'\n  }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n  return undefined;\n};\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nexport function defaultTransactionBuilder(options) {\n  var _a, _b;\n  return __awaiter(this, void 0, void 0, function* () {\n    let populatedTransaction = format(transactionSchema, options.transaction, DEFAULT_RETURN_FORMAT);\n    if (isNullish(populatedTransaction.from)) {\n      populatedTransaction.from = getTransactionFromOrToAttr('from', options.web3Context, undefined, options.privateKey);\n    }\n    // TODO: Debug why need to typecase getTransactionNonce\n    if (isNullish(populatedTransaction.nonce)) {\n      populatedTransaction.nonce = yield getTransactionNonce(options.web3Context, populatedTransaction.from, ETH_DATA_FORMAT);\n    }\n    if (isNullish(populatedTransaction.value)) {\n      populatedTransaction.value = '0x0';\n    }\n    if (!isNullish(populatedTransaction.data)) {\n      if (!isNullish(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input) throw new TransactionDataAndInputError({\n        data: bytesToHex(populatedTransaction.data),\n        input: bytesToHex(populatedTransaction.input)\n      });\n      if (!populatedTransaction.data.startsWith('0x')) populatedTransaction.data = `0x${populatedTransaction.data}`;\n    } else if (!isNullish(populatedTransaction.input)) {\n      if (!populatedTransaction.input.startsWith('0x')) populatedTransaction.input = `0x${populatedTransaction.input}`;\n    } else {\n      populatedTransaction.input = '0x';\n    }\n    if (isNullish(populatedTransaction.common)) {\n      if (options.web3Context.defaultCommon) {\n        const common = options.web3Context.defaultCommon;\n        const chainId = common.customChain.chainId;\n        const networkId = common.customChain.networkId;\n        const name = common.customChain.name;\n        populatedTransaction.common = Object.assign(Object.assign({}, common), {\n          customChain: {\n            chainId,\n            networkId,\n            name\n          }\n        });\n      }\n      if (isNullish(populatedTransaction.chain)) {\n        populatedTransaction.chain = options.web3Context.defaultChain;\n      }\n      if (isNullish(populatedTransaction.hardfork)) {\n        populatedTransaction.hardfork = options.web3Context.defaultHardfork;\n      }\n    }\n    if (isNullish(populatedTransaction.chainId) && isNullish((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId)) {\n      populatedTransaction.chainId = yield getChainId(options.web3Context, ETH_DATA_FORMAT);\n    }\n    if (isNullish(populatedTransaction.networkId)) {\n      populatedTransaction.networkId = (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : yield getId(options.web3Context, ETH_DATA_FORMAT);\n    }\n    if (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n      populatedTransaction.gasLimit = populatedTransaction.gas;\n    }\n    populatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n    if (isNullish(populatedTransaction.accessList) && (populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')) {\n      populatedTransaction.accessList = [];\n    }\n    if (options.fillGasPrice) populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), yield getTransactionGasPricing(populatedTransaction, options.web3Context, ETH_DATA_FORMAT));\n    if (isNullish(populatedTransaction.gas) && isNullish(populatedTransaction.gasLimit) && options.fillGasLimit) {\n      const fillGasLimit = yield estimateGas(options.web3Context, populatedTransaction, 'latest', ETH_DATA_FORMAT);\n      populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), {\n        gas: format({\n          format: 'uint'\n        }, fillGasLimit, ETH_DATA_FORMAT)\n      });\n    }\n    return populatedTransaction;\n  });\n}\nexport const transactionBuilder = options => __awaiter(void 0, void 0, void 0, function* () {\n  var _a;\n  return ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), {\n    transaction: options.transaction\n  }));\n});","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","ETH_DATA_FORMAT","privateKeyToAddress","getId","isNullish","isNumber","isHexStrict","isAddress","InvalidTransactionWithSender","InvalidTransactionWithReceiver","LocalWalletNotAvailableError","TransactionDataAndInputError","UnableToPopulateNonceError","bytesToHex","format","NUMBER_DATA_FORMAT","getChainId","getTransactionCount","estimateGas","detectTransactionType","transactionSchema","getTransactionGasPricing","getTransactionFromOrToAttr","attr","web3Context","transaction","privateKey","undefined","wallet","account","get","address","from","to","defaultAccount","getTransactionNonce","returnFormat","__awaiter","defaultBlock","getTransactionType","inferredType","defaultTransactionType","defaultTransactionBuilder","options","populatedTransaction","nonce","value","data","input","startsWith","common","defaultCommon","chainId","customChain","networkId","name","Object","assign","chain","defaultChain","hardfork","defaultHardfork","_a","_b","defaultNetworkId","gasLimit","gas","type","accessList","fillGasPrice","fillGasLimit","transactionBuilder"],"sources":["../../../src/utils/transaction_builder.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}