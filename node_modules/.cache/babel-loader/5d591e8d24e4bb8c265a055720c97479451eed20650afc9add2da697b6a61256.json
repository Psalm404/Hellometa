{"ast":null,"code":"/*\nmint.js 提供创建代币的方法\n需要两个传参：to 创建NFT的账户地址；tokenURI 图片等数据的URL\n无返回值  ->成功返回true，失败返回false\n*/\n\nimport contract from './contract';\nimport { getAccountAddr } from './getAccountAddr';\nimport saveTransactionHash from '@/commons/saveTransactionHash';\nimport Web3 from 'web3';\nasync function mint(to, tokenURI, price) {\n  try {\n    if (!contract) {\n      console.error('合约实例尚未初始化');\n      return;\n    }\n\n    // 合约调用者的地址\n    const addr = await getAccountAddr();\n    const priceWei = Web3.utils.toWei(price, 'ether');\n    // const priceEth = Web3.utils.toEth(priceWei,'ether')\n    // 调用合约的mint函数\n    await contract.methods.mint(to, tokenURI, priceWei).send({\n      from: addr\n    }).on('receipt', function (receipt) {\n      saveTransactionHash(receipt.transactionHash, tokenURI);\n      alert('Transaction sent! Hash: ' + receipt.transactionHash);\n    }).on('error', function (error) {\n      console.log(error);\n    });\n    console.log('代币铸造成功');\n    return true;\n  } catch (error) {\n    console.error('代币铸造失败', error);\n    return false;\n  }\n}\nexport default mint;","map":{"version":3,"names":["contract","getAccountAddr","saveTransactionHash","Web3","mint","to","tokenURI","price","console","error","addr","priceWei","utils","toWei","methods","send","from","on","receipt","transactionHash","alert","log"],"sources":["/Users/acciomac/Desktop/repo/Hellometa/src/commons/mint.js"],"sourcesContent":["/*\nmint.js 提供创建代币的方法\n需要两个传参：to 创建NFT的账户地址；tokenURI 图片等数据的URL\n无返回值  ->成功返回true，失败返回false\n*/\n\nimport contract from './contract';\nimport { getAccountAddr } from './getAccountAddr';\nimport saveTransactionHash from '@/commons/saveTransactionHash'\nimport Web3 from 'web3';\n\nasync function mint(to, tokenURI, price) {\n    try {\n        if (!contract) {\n            console.error('合约实例尚未初始化');\n            return;\n        }\n        \n        // 合约调用者的地址\n        const addr = await getAccountAddr();\n\n        const priceWei = Web3.utils.toWei(price, 'ether')\n        // const priceEth = Web3.utils.toEth(priceWei,'ether')\n        // 调用合约的mint函数\n        await contract.methods.mint(to, tokenURI, priceWei).send({ from: addr })\n        .on('receipt', function(receipt){\n            saveTransactionHash(receipt.transactionHash, tokenURI);\n            alert('Transaction sent! Hash: ' + receipt.transactionHash);\n        })\n        .on('error', function(error) { \n            console.log(error);\n        });\n        console.log('代币铸造成功');\n        return true\n\n    } catch (error) {\n        console.error('代币铸造失败', error);\n        return false\n    }\n}\n\nexport default mint;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,QAAQ,MAAM,YAAY;AACjC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,mBAAmB,MAAM,+BAA+B;AAC/D,OAAOC,IAAI,MAAM,MAAM;AAEvB,eAAeC,IAAIA,CAACC,EAAE,EAAEC,QAAQ,EAAEC,KAAK,EAAE;EACrC,IAAI;IACA,IAAI,CAACP,QAAQ,EAAE;MACXQ,OAAO,CAACC,KAAK,CAAC,WAAW,CAAC;MAC1B;IACJ;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMT,cAAc,CAAC,CAAC;IAEnC,MAAMU,QAAQ,GAAGR,IAAI,CAACS,KAAK,CAACC,KAAK,CAACN,KAAK,EAAE,OAAO,CAAC;IACjD;IACA;IACA,MAAMP,QAAQ,CAACc,OAAO,CAACV,IAAI,CAACC,EAAE,EAAEC,QAAQ,EAAEK,QAAQ,CAAC,CAACI,IAAI,CAAC;MAAEC,IAAI,EAAEN;IAAK,CAAC,CAAC,CACvEO,EAAE,CAAC,SAAS,EAAE,UAASC,OAAO,EAAC;MAC5BhB,mBAAmB,CAACgB,OAAO,CAACC,eAAe,EAAEb,QAAQ,CAAC;MACtDc,KAAK,CAAC,0BAA0B,GAAGF,OAAO,CAACC,eAAe,CAAC;IAC/D,CAAC,CAAC,CACDF,EAAE,CAAC,OAAO,EAAE,UAASR,KAAK,EAAE;MACzBD,OAAO,CAACa,GAAG,CAACZ,KAAK,CAAC;IACtB,CAAC,CAAC;IACFD,OAAO,CAACa,GAAG,CAAC,QAAQ,CAAC;IACrB,OAAO,IAAI;EAEf,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,KAAK;EAChB;AACJ;AAEA,eAAeL,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}