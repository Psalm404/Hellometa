{"ast":null,"code":"import Vue from 'vue';\nimport contractABI from './abi/contract.json';\nimport Web3 from 'web3';\nimport { mint } from './commons/mint.js';\nconst contractAddr = \"0xee3d4496aD0F702F822E234279777AdA03123313\";\nconst state = Vue.observable({\n  account: null,\n  balance: 0\n});\nexport default {\n  name: 'Hellometa',\n  created() {\n    new Promise((resolve, reject) => {\n      if (window.ethereum) {\n        let web3 = new Web3(window.ethereum);\n        window.ethereum.request({\n          method: 'eth_requestAccounts'\n        }).then(account => {\n          resolve({\n            account,\n            web3\n          });\n        });\n      } else {\n        alert('MetaMask is not installed');\n        reject(\"MetaMask is not installed\");\n      }\n    }).then(result => {\n      this.main(result);\n    });\n  },\n  methods: {\n    async main({\n      account\n    }) {\n      state.account = Web3.utils.toChecksumAddress(account[0]);\n      console.log('Account:', this.$store.state.account);\n      if (window.ethereum.isConnected()) {\n        console.log('ethereum is connected');\n      }\n    },\n    Mint() {\n      mint(contractAddr, state.account);\n    },\n    getAllTokenIds() {\n      state.contract = new web3.eth.Contract(contractABI, contractAddr, {\n        from: state.account\n      });\n    }\n  }\n};","map":{"version":3,"names":["Vue","contractABI","Web3","mint","contractAddr","state","observable","account","balance","name","created","Promise","resolve","reject","window","ethereum","web3","request","method","then","alert","result","main","methods","utils","toChecksumAddress","console","log","$store","isConnected","Mint","getAllTokenIds","contract","eth","Contract","from"],"sources":["src/App.vue"],"sourcesContent":["<template>\n<div id=\"app\">\n    <button @click=\"Mint\">mint</button>\n    <router-view></router-view>\n</div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport contractABI from './abi/contract.json'\nimport Web3 from 'web3'\nimport {\n    mint\n} from './commons/mint.js';\nconst contractAddr = \"0xee3d4496aD0F702F822E234279777AdA03123313\"\nconst state = Vue.observable({\n    account: null,\n    balance: 0\n})\n\nexport default {\n    name: 'Hellometa',\n    created() {\n        new Promise((resolve, reject) => {\n            if (window.ethereum) {\n                let web3 = new Web3(window.ethereum);\n                window.ethereum.request({\n                    method: 'eth_requestAccounts'\n                }).then(account => {\n                    resolve({\n                        account,\n                        web3\n                    });\n                });\n            } else {\n                alert('MetaMask is not installed')\n                reject(\"MetaMask is not installed\");\n            }\n        }).then((result) => {\n            this.main(result);\n        });\n    },\n    methods: {\n        async main({\n            account\n        }) {\n            state.account = Web3.utils.toChecksumAddress(account[0])\n            console.log('Account:', this.$store.state.account)\n            if (window.ethereum.isConnected()) {\n                console.log('ethereum is connected');\n\n            }\n        },\n        Mint() {\n            mint(contractAddr, state.account);\n        },\n        getAllTokenIds() {\n            state.contract = new web3.eth.Contract(contractABI, contractAddr, {\n                from: state.account\n            })\n        }\n    },\n\n}\n</script>\n\n<style>\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    /* 设置背景图片的URL */\n    /* background-image: url('assets/background.png'); */\n\n    /* 设置背景图片的大小 */\n    background-size: cover;\n\n    /* 设置背景图片的位置 */\n    background-position: center;\n}\n</style>\n"],"mappings":"AAQA,OAAAA,GAAA;AACA,OAAAC,WAAA;AACA,OAAAC,IAAA;AACA,SACAC,IAAA,QACA;AACA,MAAAC,YAAA;AACA,MAAAC,KAAA,GAAAL,GAAA,CAAAM,UAAA;EACAC,OAAA;EACAC,OAAA;AACA;AAEA;EACAC,IAAA;EACAC,QAAA;IACA,IAAAC,OAAA,EAAAC,OAAA,EAAAC,MAAA;MACA,IAAAC,MAAA,CAAAC,QAAA;QACA,IAAAC,IAAA,OAAAd,IAAA,CAAAY,MAAA,CAAAC,QAAA;QACAD,MAAA,CAAAC,QAAA,CAAAE,OAAA;UACAC,MAAA;QACA,GAAAC,IAAA,CAAAZ,OAAA;UACAK,OAAA;YACAL,OAAA;YACAS;UACA;QACA;MACA;QACAI,KAAA;QACAP,MAAA;MACA;IACA,GAAAM,IAAA,CAAAE,MAAA;MACA,KAAAC,IAAA,CAAAD,MAAA;IACA;EACA;EACAE,OAAA;IACA,MAAAD,KAAA;MACAf;IACA;MACAF,KAAA,CAAAE,OAAA,GAAAL,IAAA,CAAAsB,KAAA,CAAAC,iBAAA,CAAAlB,OAAA;MACAmB,OAAA,CAAAC,GAAA,kBAAAC,MAAA,CAAAvB,KAAA,CAAAE,OAAA;MACA,IAAAO,MAAA,CAAAC,QAAA,CAAAc,WAAA;QACAH,OAAA,CAAAC,GAAA;MAEA;IACA;IACAG,KAAA;MACA3B,IAAA,CAAAC,YAAA,EAAAC,KAAA,CAAAE,OAAA;IACA;IACAwB,eAAA;MACA1B,KAAA,CAAA2B,QAAA,OAAAhB,IAAA,CAAAiB,GAAA,CAAAC,QAAA,CAAAjC,WAAA,EAAAG,YAAA;QACA+B,IAAA,EAAA9B,KAAA,CAAAE;MACA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}