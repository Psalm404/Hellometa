{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { NibbleWidthError } from 'web3-errors';\nimport { isHexStrict, validator, utils as validatorUtils, bigintPower } from 'web3-validator';\nimport { numberToHex, toHex, toNumber } from './converters.js';\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n *\n * console.log(web3.utils.padLeft('0x123', 10));\n * >0x0000000123\n * ```\n */\nexport const padLeft = (value, characterAmount, sign = '0') => {\n  // To avoid duplicate code and circular dependency we will\n  // use `padLeft` implementation from `web3-validator`\n  if (typeof value === 'string') {\n    if (!isHexStrict(value)) {\n      return value.padStart(characterAmount, sign);\n    }\n    return validatorUtils.padLeft(value, characterAmount, sign);\n  }\n  validator.validate(['int'], [value]);\n  return validatorUtils.padLeft(value, characterAmount, sign);\n};\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n * console.log(web3.utils.padRight('0x123', 10));\n * > 0x1230000000\n *\n * console.log(web3.utils.padRight('0x123', 10, '1'));\n * > 0x1231111111\n * ```\n */\nexport const padRight = (value, characterAmount, sign = '0') => {\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return value.padEnd(characterAmount, sign);\n  }\n  validator.validate(['int'], [value]);\n  const hexString = typeof value === 'string' && isHexStrict(value) ? value : numberToHex(value);\n  const prefixLength = hexString.startsWith('-') ? 3 : 2;\n  return hexString.padEnd(characterAmount + prefixLength, sign);\n};\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padRight`\n */\nexport const rightPad = padRight;\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padLeft`\n */\nexport const leftPad = padLeft;\n/**\n * Converts a negative number into the two’s complement and return a hexstring of 64 nibbles.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n *\n * @returns The hex string of the two’s complement.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toTwosComplement(13, 32));\n * > 0x0000000000000000000000000000000d\n *\n * console.log(web3.utils.toTwosComplement('-0x1', 32));\n * > 0xffffffffffffffffffffffffffffffff\n *\n * console.log(web3.utils.toTwosComplement(BigInt('9007199254740992'), 32));\n * > 0x00000000000000000020000000000000\n * ```\n */\nexport const toTwosComplement = (value, nibbleWidth = 64) => {\n  validator.validate(['int'], [value]);\n  const val = toNumber(value);\n  if (val >= 0) return padLeft(toHex(val), nibbleWidth);\n  const largestBit = bigintPower(BigInt(2), BigInt(nibbleWidth * 4));\n  if (-val >= largestBit) {\n    throw new NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);\n  }\n  const updatedVal = BigInt(val);\n  const complement = updatedVal + largestBit;\n  return padLeft(numberToHex(complement), nibbleWidth);\n};\n/**\n * Converts the twos complement into a decimal number or big int.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n * @returns The decimal number or big int.\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromTwosComplement('0x0000000000000000000000000000000d', 32'));\n * > 13\n *\n * console.log(web3.utils.fromTwosComplement('0x00000000000000000020000000000000', 32));\n * > 9007199254740992n\n * ```\n */\nexport const fromTwosComplement = (value, nibbleWidth = 64) => {\n  validator.validate(['int'], [value]);\n  const val = toNumber(value);\n  if (val < 0) return val;\n  const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));\n  if (largestBit > nibbleWidth * 4) throw new NibbleWidthError(`value: \"${value}\", nibbleWidth: \"${nibbleWidth}\"`);\n  // check the largest bit to see if negative\n  if (nibbleWidth * 4 !== largestBit) return val;\n  const complement = bigintPower(BigInt(2), BigInt(nibbleWidth) * BigInt(4));\n  return toNumber(BigInt(val) - complement);\n};","map":{"version":3,"names":["NibbleWidthError","isHexStrict","validator","utils","validatorUtils","bigintPower","numberToHex","toHex","toNumber","padLeft","value","characterAmount","sign","padStart","validate","padRight","padEnd","hexString","prefixLength","startsWith","rightPad","leftPad","toTwosComplement","nibbleWidth","val","largestBit","BigInt","updatedVal","complement","fromTwosComplement","Math","ceil","log","Number"],"sources":["../../src/string_manipulation.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}