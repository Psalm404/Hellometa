{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import getRecentBlocks from '@/commons/getRecentBlocks';\n// import getTransaction from '@/commons/getTransaction';\nimport getTransactionHash from '@/commons/getTransactionHash';\nimport getURLbyTokenId from '@/commons/getURLbyTokenId';\nimport debounce from 'lodash/debounce';\nimport axios from 'axios';\nexport default {\n  created() {\n    this.blockSearch = debounce(this.blockSearch, 300);\n  },\n  mounted() {\n    setTimeout(() => {\n      this.show = true;\n    }, 150);\n    this.searchData = this.$route.query.bkSearchQuery ? this.$route.query.bkSearchQuery.toString() : '';\n    this.activeNames = Array.from({\n      length: 100\n    }, (_, index) => index);\n    this.blockSearch();\n  },\n  data() {\n    return {\n      // 区块浏览器数据\n      show: false,\n      searchData: '',\n      activeNames: [],\n      searchResult: [],\n      showDetail: false,\n      blockTitle: ['BlockNumber', 'Difficulty',\n      // 'ExtraData', \n      'GasLimit', 'GasUsed', 'Hash', 'LogsBloom', 'Miner', 'Nonce', 'ParentHash', 'ReceiptsRoot', 'Sha3Uncles', 'Size', 'StateRoot', 'Timestamp', 'TotalDifficulty',\n      // 'Transactions', \n      'TransactionsRoot'\n      // 'Uncles' \n      ],\n      transactionResult: [],\n      transactions_detail_title: ['BlockNumber', 'Difficulty', 'GasLimit', 'GasUsed', 'Hash', 'LogsBloom', 'Miner', 'Nonce', 'ParentHash', 'ReceiptsRoot', 'Sha3Uncles', 'Size', 'StateRoot', 'Timestamp', 'TotalDifficulty', 'TransactionsRoot'],\n      // 走马灯图片\n      picture: [require(\"@/assets/6.png\"),\n      // require(\"@/assets/PixPin_2024-05-25_17-46-05.jpg\"),\n      require(\"@/assets/7.png\"), require(\"@/assets/1.jpg\"), require(\"@/assets/2.jpg\"), require(\"@/assets/3.jpg\"), require(\"@/assets/4.jpg\"), require(\"@/assets/5.jpg\")],\n      // 介绍文字\n      textBlocks: [{\n        title: '工业互联网 ',\n        description: '\"工业互联网\"（Industrial Internet）是指在工业领域应用物联网技术，' + '通过设备、传感器和软件系统的互联互通，实现数据的收集、交换和分析，以优化制造流程、提高生产效率和减少维护' + '成本的概念。它通常涉及到智能制造、自动化技术、大数据分析和云计算等领域。'\n      }, {\n        title: '无币公链',\n        description: '\"无币公链\"是指一种公共区块链技术的实现，其中不发行任何原生加密货币或代币。' + '这与众多知名的区块链平台不同，后者通常都有自己的内置代币，如比特币、以太坊等。'\n      }, {\n        title: '数据资产化',\n        description: '\"数据资产化\"是一个涉及将数据转换成可量化的、有价值的资产的概念。' + '这一过程不仅包括数据的收集和存储，还包括对数据的管理、分析和利用，目的是从数据中提取价值，支持决策制定，' + '创造商业机会，甚至直接作为产品或服务出售。'\n      }]\n    };\n  },\n  methods: {\n    logOut() {\n      console.log('logOut');\n      this.$store.dispatch('logout');\n      if (this.$route.path !== '/intro') {\n        setTimeout(() => {\n          this.$router.push('/intro');\n        }, 100);\n      }\n    },\n    blockSearch() {\n      if (this.searchData === '') {\n        this.show = true;\n        console.log('search for all');\n\n        // 使用API请求前100个区块\n        const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\n        axios.get(`${apiBaseUrl}/getBlocksAndTransactions`, {\n          params: {\n            n: 100\n          } // 获取前100个区块\n        }).then(response => {\n          if (response.data.code === 200) {\n            const blocks = response.data.blocksWithTransactions;\n            this.searchResult = [];\n            for (let i = 0; i < blocks.length; i++) {\n              let tmp = {};\n              // 将区块信息从响应数据中提取并匹配你已有的字段\n              for (let j = 0; j < this.blockTitle.length; j++) {\n                tmp[this.blockTitle[j]] = blocks[i][this.blockTitle[j]] || ''; // 使用区块数据中的相应字段\n                // console.log(blocks);\n                if (tmp[this.blockTitle[j]] != null) {\n                  tmp[this.blockTitle[j]] = tmp[this.blockTitle[j]].toString();\n                }\n              }\n              this.searchResult.push(tmp);\n            }\n          } else {\n            console.error(\"Error fetching blocks:\", response.data);\n          }\n        }).catch(error => {\n          console.error(\"Error fetching blocks:\", error);\n        });\n      } else {\n        this.show = false;\n        if (this.searchData.startsWith('0x')) {\n          console.log('search by hashText');\n          this.searchByTH(this.searchData);\n        } else if (this.searchData.startsWith('http')) {\n          console.log('search by url');\n          this.searchByUrl(this.searchData);\n        } else {\n          console.log('search by token id');\n          this.searchByTokenId(this.searchData);\n        }\n      }\n      this.$nextTick(() => {\n        console.log('DOM已更新');\n      });\n      this.searchData = '';\n    },\n    async searchByUrl(url) {\n      let hashTx = await getTransactionHash(url);\n      if (hashTx === null) return false;\n      return this.searchByTH(hashTx);\n    },\n    async searchByTokenId(tokenId) {\n      let url = await getURLbyTokenId(tokenId);\n      return this.searchByUrl(url);\n    },\n    async searchByTH(hash) {\n      this.show = false;\n      const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\n      try {\n        const res = await axios.get(`${apiBaseUrl}/blockSearch`, {\n          params: {\n            query: hash\n          }\n        });\n        if (res && res.data && res.data.Block) {\n          console.log(\"Transaction data:\", res.data);\n\n          // 清空transactionResult避免数据重复\n          this.transactionResult = {};\n\n          // 查询结果推入transactionResult数组，展示区块的基本信息\n          for (let i = 0; i < this.transactions_detail_title.length; i++) {\n            let title = this.transactions_detail_title[i];\n            this.$set(this.transactionResult, title, res.data.Block[title] ? res.data.Block[title].toString() : '');\n          }\n\n          // 展示ExtraData字段，确保它是JSON格式\n          this.$set(this.transactionResult, 'ExtraData', res.data.Block['ExtraData'] ? res.data.Block['ExtraData'] : {});\n\n          // 将Transactions字段数据加入到transactionResult中，如果存在交易\n          if (res.data.Transactions && res.data.Transactions.length) {\n            this.$set(this.transactionResult, 'Transactions', res.data.Transactions);\n          } else {\n            this.$set(this.transactionResult, 'Transactions', []);\n          }\n        } else {\n          console.error('Unexpected response structure:', res);\n        }\n      } catch (error) {\n        console.error('Error fetching transaction data:', error);\n      }\n      return true;\n    },\n    handleChange(val) {\n      console.log(val);\n    }\n  }\n};","map":{"version":3,"names":["getTransactionHash","getURLbyTokenId","debounce","axios","created","blockSearch","mounted","setTimeout","show","searchData","$route","query","bkSearchQuery","toString","activeNames","Array","from","length","_","index","data","searchResult","showDetail","blockTitle","transactionResult","transactions_detail_title","picture","require","textBlocks","title","description","methods","logOut","console","log","$store","dispatch","path","$router","push","apiBaseUrl","process","env","VUE_APP_BACKEND_BASE_URL","get","params","n","then","response","code","blocks","blocksWithTransactions","i","tmp","j","error","catch","startsWith","searchByTH","searchByUrl","searchByTokenId","$nextTick","url","hashTx","tokenId","hash","res","Block","$set","Transactions","handleChange","val"],"sources":["src/components/userIntroPage.vue"],"sourcesContent":["<template>\r\n<div class=\"container\">\r\n    <div class=\"content\">\r\n        <nav class=\"home-navbar\">\r\n            <div class=\"home-navbar-container\">\r\n                <div class=\"want-to-be-left\">\r\n                    <a class=\"home-navbar-logo\">\r\n                        <img src=\"../assets/logo.png\" alt=\"Logo\" class=\"home-logo-image\">\r\n                    </a>\r\n                    <div class=\"page-titile\">\r\n                        <h3></h3>\r\n                    </div>\r\n                </div>\r\n                <div class=\"want-to-be-right\">\r\n                    <ul class=\"home-navbar-menu\">\r\n                        <li class=\"guide-item\"><a href=\"#/guidePage\">用户指南</a></li>\r\n                        <li class=\"recharge-item\"><a href=\"#/myGas\">燃料管理</a></li>\r\n                        <li class=\"intro-item  active\"><a>区块浏览器</a></li>\r\n                        <li class=\"explore-item\">\r\n                            <a href=\"#/exhibitWorks\" :class=\"{ disabled: !$store.state.isAccountMatched }\">交易市场</a>\r\n                        </li>\r\n                        <li class=\"upload-item\">\r\n                            <a href=\"#/uploadWorks\" :class=\"{ disabled: !$store.state.isAccountMatched }\">凭证上传</a>\r\n                        </li>\r\n                        <li class=\"records-item\">\r\n                            <a href=\"#/recordWorks\" :class=\"{ disabled: !$store.state.isAccountMatched }\">我的凭证</a>\r\n                        </li>\r\n                        <li class=\"home-item\"><a href=\"#/home\">个人中心</a></li>\r\n                    </ul>\r\n                    <div>\r\n                        <button class=\"home-navbar-button\" @click=\"logOut\">退出登录</button>\r\n                    </div>\r\n                    <div class=\"home-navbar-profile\">\r\n                        <a href=\"https://github.com/Psalm404/Hellometa\" target=\"_blank\">\r\n                            <img src=\"../assets/github.jpg\" alt=\"Join us\">\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n        <div class=\"home-card-container\">\r\n            <el-carousel :interval=\"4000\" type=\"card\">\r\n                <el-carousel-item v-for=\"(item, index) in picture\" :key=\"index\">\r\n                    <img :src=\"item\" class=\"home-card-img\" alt=\"\">\r\n                </el-carousel-item>\r\n            </el-carousel>\r\n        </div>\r\n        <el-divider><i class=\"el-icon-s-promotion\"></i></el-divider>\r\n        <div class=\"home-introduction\">\r\n            <h1>什么是工业互联网数据资产化？</h1>\r\n            <div class=\"home-text-blocks-container\">\r\n                <div class=\"home-text-block\" v-for=\"(block, index) in textBlocks\" :key=\"index\">\r\n                    <h3>{{ block.title }}</h3>\r\n                    <p>{{ block.description }}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <el-divider><i class=\"el-icon-menu\"></i></el-divider>\r\n        <!-- 区块浏览器部分开始 -->\r\n        <div class=\"block-browser\">\r\n            <img src=\"../assets/logo.png\" class=\"block-browser-logo\">\r\n            <p class=\"browser-passage1\">为工业互联网数据资产存证、确权、溯源需求</p>\r\n            <p class=\"browser-passage2\">提供安全、高效、可信的区块链服务</p>\r\n            <h1 style=\"color: rgb(196,196,196);\">区块浏览器</h1>\r\n        </div>\r\n        <div class=\"block-browser-search-box\">\r\n            <input type=\"text\" class=\"block-browser-search-input\" placeholder=\"可输入交易哈希/区块哈希/发送方地址/tokenID搜索区块\" v-model=\"searchData\" @keyup.enter=\"blockSearch\">\r\n            <button class=\"block-browser-search-button\" @click=\"blockSearch\">搜索</button>\r\n        </div>\r\n        <div v-if=\"show\" class=\"block-result-card-box\">\r\n            <div v-for=\"(item, index) in searchResult\" :key=\"index\" class=\"block-result-card\">\r\n                <h2>区块{{ index }}</h2>\r\n                <div class=\"block-result-card-content\">\r\n                    <!-- <el-divider><i class=\"el-icon-bottom\"></i></el-divider> -->\r\n                    <div>\r\n                        <div v-for=\"(title, n) in blockTitle\" :key=\"n\" class=\"result-card-context\">\r\n                            <p v-if=\"(n === 18 || n === 19)\"></p>\r\n                            <p v-else>{{ title }}: {{ item[title] }}</p>\r\n                        </div>\r\n                    </div>\r\n                    <button class=\"details-button\" @click=\"searchByTH(item['Hash'])\">详情</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div v-else class=\"block-result-card-box\">\r\n            \r\n            <div class=\"block-result-card\">\r\n                <!-- 左上角返回箭头 -->\r\n                <div class=\"back-arrow\" @click=\"blockSearch\">\r\n                    &larr; 返回\r\n                </div>\r\n                <h2>区块详情</h2>\r\n                <div class=\"block-result-card-content\">\r\n                    <div>\r\n                        <!-- 循环显示每个区块的基本信息 -->\r\n                        <p v-for=\"(item, index) in transactions_detail_title\" :key=\"index\" class=\"result-card-context\">{{ item }}: {{ transactionResult[item] }}</p>\r\n                        \r\n                        <p class=\"result-card-context\">ExtraData⬇️---------------------------------------------------------------</p>\r\n                        <div v-for=\"(value, key) in transactionResult['ExtraData']\" :key=\"key\" class=\"result-card-context\">\r\n                            <p>{{ key }}: {{ value }}</p>\r\n                        </div>\r\n\r\n                        <!-- 展示 Transactions 列表 -->\r\n                        <p class=\"result-card-context\">Transactions⬇️---------------------------------------------------------------</p>\r\n                        <div v-if=\"transactionResult['Transactions'] && transactionResult['Transactions'].length\" class=\"result-card-context\">\r\n                            <div v-for=\"(tx, txIndex) in transactionResult['Transactions']\" :key=\"txIndex\">\r\n                                <p>TxHash: {{ tx.TxHash }}</p>\r\n                                <p>From: {{ tx.FromAddress }}</p>\r\n                                <p>To: {{ tx.ToAddress }}</p>\r\n                                <p>Value: {{ tx.Value }}</p>\r\n                                <p>Gas: {{ tx.Gas }}</p>\r\n                                <p>Nonce: {{ tx.Nonce }}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- 区块浏览器部分结束 -->\r\n    </div>\r\n\r\n</div>\r\n</template>\r\n\r\n<script>\r\n// import getRecentBlocks from '@/commons/getRecentBlocks';\r\n// import getTransaction from '@/commons/getTransaction';\r\nimport getTransactionHash from '@/commons/getTransactionHash';\r\nimport getURLbyTokenId from '@/commons/getURLbyTokenId';\r\nimport debounce from 'lodash/debounce';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    created() {\r\n        this.blockSearch = debounce(this.blockSearch, 300);\r\n    },\r\n    mounted() {\r\n        setTimeout(() => {\r\n            this.show = true;\r\n        }, 150)\r\n        this.searchData = this.$route.query.bkSearchQuery ? this.$route.query.bkSearchQuery.toString() : '';\r\n        this.activeNames = Array.from({\r\n            length: 100\r\n        }, (_, index) => index);\r\n        this.blockSearch();\r\n    },\r\n    data() {\r\n        return {\r\n            // 区块浏览器数据\r\n            show: false,\r\n            searchData: '',\r\n            activeNames: [],\r\n            searchResult: [],\r\n            showDetail: false,\r\n            blockTitle: [\r\n                'BlockNumber', \r\n                'Difficulty', \r\n                // 'ExtraData', \r\n                'GasLimit', \r\n                'GasUsed', \r\n                'Hash', \r\n                'LogsBloom', \r\n                'Miner', \r\n                'Nonce', \r\n                'ParentHash', \r\n                'ReceiptsRoot', \r\n                'Sha3Uncles', \r\n                'Size', \r\n                'StateRoot', \r\n                'Timestamp', \r\n                'TotalDifficulty', \r\n                // 'Transactions', \r\n                'TransactionsRoot', \r\n                // 'Uncles' \r\n            ],\r\n            transactionResult: [],\r\n            transactions_detail_title: [\r\n                'BlockNumber', \r\n                'Difficulty', \r\n                'GasLimit', \r\n                'GasUsed', \r\n                'Hash', \r\n                'LogsBloom', \r\n                'Miner', \r\n                'Nonce', \r\n                'ParentHash', \r\n                'ReceiptsRoot', \r\n                'Sha3Uncles',\r\n                'Size', \r\n                'StateRoot', \r\n                'Timestamp', \r\n                'TotalDifficulty', \r\n                'TransactionsRoot', \r\n            ],\r\n            // 走马灯图片\r\n            picture: [\r\n                require(\"@/assets/6.png\"),\r\n                // require(\"@/assets/PixPin_2024-05-25_17-46-05.jpg\"),\r\n                require(\"@/assets/7.png\"),\r\n                require(\"@/assets/1.jpg\"),\r\n                require(\"@/assets/2.jpg\"),\r\n                require(\"@/assets/3.jpg\"),\r\n                require(\"@/assets/4.jpg\"),\r\n                require(\"@/assets/5.jpg\"),\r\n            ],\r\n            // 介绍文字\r\n            textBlocks: [{\r\n                    title: '工业互联网 ',\r\n                    description: '\"工业互联网\"（Industrial Internet）是指在工业领域应用物联网技术，' +\r\n                        '通过设备、传感器和软件系统的互联互通，实现数据的收集、交换和分析，以优化制造流程、提高生产效率和减少维护' +\r\n                        '成本的概念。它通常涉及到智能制造、自动化技术、大数据分析和云计算等领域。'\r\n                },\r\n                {\r\n                    title: '无币公链',\r\n                    description: '\"无币公链\"是指一种公共区块链技术的实现，其中不发行任何原生加密货币或代币。' +\r\n                        '这与众多知名的区块链平台不同，后者通常都有自己的内置代币，如比特币、以太坊等。'\r\n                },\r\n                {\r\n                    title: '数据资产化',\r\n                    description: '\"数据资产化\"是一个涉及将数据转换成可量化的、有价值的资产的概念。' +\r\n                        '这一过程不仅包括数据的收集和存储，还包括对数据的管理、分析和利用，目的是从数据中提取价值，支持决策制定，' +\r\n                        '创造商业机会，甚至直接作为产品或服务出售。'\r\n                },\r\n            ],\r\n        };\r\n    },\r\n    methods: {\r\n        logOut() {\r\n        console.log('logOut');\r\n            this.$store.dispatch('logout');\r\n            if (this.$route.path !== '/intro') {\r\n                setTimeout(() => {\r\n                    this.$router.push('/intro');\r\n                }, 100);\r\n            }\r\n        },\r\n        blockSearch() {\r\n            if (this.searchData === '') {\r\n                this.show = true;\r\n                console.log('search for all');\r\n\r\n                // 使用API请求前100个区块\r\n                const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\r\n                axios.get(`${apiBaseUrl}/getBlocksAndTransactions`, {\r\n                    params: {\r\n                        n: 100\r\n                    } // 获取前100个区块\r\n                }).then(response => {\r\n                    if (response.data.code === 200) {\r\n                        const blocks = response.data.blocksWithTransactions;\r\n                        this.searchResult = [];\r\n                        for (let i = 0; i < blocks.length; i++) {\r\n                            let tmp = {};\r\n                            // 将区块信息从响应数据中提取并匹配你已有的字段\r\n                            for (let j = 0; j < this.blockTitle.length; j++) {\r\n                                tmp[this.blockTitle[j]] = blocks[i][this.blockTitle[j]] || ''; // 使用区块数据中的相应字段\r\n                                // console.log(blocks);\r\n                                if (tmp[this.blockTitle[j]] != null) {\r\n                                    tmp[this.blockTitle[j]] = tmp[this.blockTitle[j]].toString();\r\n                                }\r\n                            }\r\n                            this.searchResult.push(tmp);\r\n                        }\r\n                    } else {\r\n                        console.error(\"Error fetching blocks:\", response.data);\r\n                    }\r\n                }).catch(error => {\r\n                    console.error(\"Error fetching blocks:\", error);\r\n                });\r\n            } else {\r\n                this.show = false;\r\n                if (this.searchData.startsWith('0x')) {\r\n                    console.log('search by hashText');\r\n                    this.searchByTH(this.searchData);\r\n                } else if (this.searchData.startsWith('http')) {\r\n                    console.log('search by url');\r\n                    this.searchByUrl(this.searchData);\r\n                } else {\r\n                    console.log('search by token id');\r\n                    this.searchByTokenId(this.searchData);\r\n                }\r\n            }\r\n            this.$nextTick(() => {\r\n                console.log('DOM已更新');\r\n            });\r\n            this.searchData = '';\r\n        },\r\n        async searchByUrl(url) {\r\n            let hashTx = await getTransactionHash(url);\r\n            if (hashTx === null) return false;\r\n            return this.searchByTH(hashTx);\r\n        },\r\n        async searchByTokenId(tokenId) {\r\n            let url = await getURLbyTokenId(tokenId);\r\n            return this.searchByUrl(url);\r\n        },\r\n        async searchByTH(hash) {\r\n            this.show = false;\r\n            const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\r\n\r\n            try {\r\n                const res = await axios.get(`${apiBaseUrl}/blockSearch`, {\r\n                    params: {\r\n                        query: hash\r\n                    }\r\n                });\r\n\r\n                if (res && res.data && res.data.Block) {\r\n                    console.log(\"Transaction data:\", res.data);\r\n\r\n                    // 清空transactionResult避免数据重复\r\n                    this.transactionResult = {};\r\n\r\n                    // 查询结果推入transactionResult数组，展示区块的基本信息\r\n                    for (let i = 0; i < this.transactions_detail_title.length; i++) {\r\n                        let title = this.transactions_detail_title[i];\r\n                        this.$set(this.transactionResult, title, res.data.Block[title] ? res.data.Block[title].toString() : ''); \r\n                    }\r\n\r\n                    // 展示ExtraData字段，确保它是JSON格式\r\n                    this.$set(this.transactionResult, 'ExtraData', res.data.Block['ExtraData'] ? res.data.Block['ExtraData'] : {});\r\n\r\n                    // 将Transactions字段数据加入到transactionResult中，如果存在交易\r\n                    if (res.data.Transactions && res.data.Transactions.length) {\r\n                        this.$set(this.transactionResult, 'Transactions', res.data.Transactions);\r\n                    } else {\r\n                        this.$set(this.transactionResult, 'Transactions', []);\r\n                    }\r\n\r\n                } else {\r\n                    console.error('Unexpected response structure:', res);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching transaction data:', error);\r\n            }\r\n\r\n            return true;\r\n        },\r\n        handleChange(val) {\r\n            console.log(val);\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 容器样式 */\r\n.container {\r\n    max-width: 100%;\r\n    height: auto;\r\n    max-height: 100%;\r\n}\r\n\r\n/* 内容样式 */\r\n.content {\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n    margin: 0;\r\n}\r\n\r\nh3 {\r\n    font-size: 1.3em;\r\n    color: #c64500;\r\n    text-align: justify;\r\n}\r\n\r\n.page-titile {\r\n    position: relative;\r\n    left: 14%;\r\n    top: -20%;\r\n}\r\n\r\n.home-navbar {\r\n    margin-top: 20px;\r\n    margin-left: calc(50% - 48vw);\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    /* 设置为半透明 */\r\n    border-bottom: 1px solid rgba(230, 232, 236, 0);\r\n    /* 去掉底部边框 */\r\n    padding: 10px 20px;\r\n    position: fixed;\r\n    top: 0;\r\n    width: 90%;\r\n    height: auto;\r\n    z-index: 1000;\r\n    border-radius: 25px;\r\n    /* 设置圆角 */\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n    /* 添加阴影效果 */\r\n    backdrop-filter: blur(30px);\r\n    /* 添加背景模糊效果 */\r\n}\r\n\r\n/* Recharge */\r\n.guide-item {\r\n    position: relative;\r\n    top: 10px;\r\n    /* 根据需要调整位置 */\r\n    left: -110px;\r\n    /* 根据需要调整位置 */\r\n}\r\n\r\n/* Recharge */\r\n.recharge-item {\r\n    position: relative;\r\n    top: 10px;\r\n    /* 根据需要调整位置 */\r\n    left: -100px;\r\n    /* 根据需要调整位置 */\r\n}\r\n\r\n/* Browser */\r\n.intro-item {\r\n    position: relative;\r\n    top: 10px;\r\n    /* 根据需要调整位置 */\r\n    left: -90px;\r\n    /* 根据需要调整位置 */\r\n}\r\n\r\n/* Explore */\r\n.explore-item {\r\n    position: relative;\r\n    top: 10px;\r\n    /* 根据需要调整位置 */\r\n    left: -80px;\r\n    /* 根据需要调整位置 */\r\n}\r\n\r\n/* Upload */\r\n.upload-item {\r\n    position: relative;\r\n    top: 10px;\r\n    /* 根据需要调整位置 */\r\n    left: -70px;\r\n    /* 根据需要调整位置 */\r\n}\r\n\r\n/* Records */\r\n.records-item {\r\n    position: relative;\r\n    top: 10px;\r\n    /* 根据需要调整位置 */\r\n    left: -60px;\r\n    /* 根据需要调整位置 */\r\n}\r\n\r\n/* Home */\r\n.home-item {\r\n    position: relative;\r\n    top: 10px;\r\n    /* 根据需要调整位置 */\r\n    left: -50px;\r\n    /* 根据需要调整位置 */\r\n}\r\n\r\n.home-navbar-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin: 0 auto;\r\n}\r\n\r\n.want-to-be-left {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    /* 左对齐 */\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    /* 使其占据剩余空间 */\r\n}\r\n\r\n.want-to-be-right {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.home-navbar-logo-container {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.home-navbar-logo {\r\n    font-size: 2px;\r\n    font-weight: bold;\r\n    color: #333;\r\n    text-decoration: none;\r\n}\r\n\r\n.home-logo-image {\r\n    height: 40px;\r\n    margin-right: 10px;\r\n}\r\n\r\n.home-navbar-title {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.home-navbar-menu li {\r\n    margin: 0 15px;\r\n}\r\n\r\n.home-navbar-menu {\r\n    list-style: none;\r\n    display: flex;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.home-navbar-menu li a {\r\n    color: #4d3535;\r\n    text-decoration: none;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    transition: color 0.3s;\r\n}\r\n\r\n.home-navbar-menu li.active a {\r\n    font-size: 18px;\r\n    color: #ff5900;\r\n}\r\n\r\n.home-navbar-menu li a:hover {\r\n    color: #ff5900;\r\n}\r\n\r\n.home-navbar-actions {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.home-navbar-button {\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    /* 设置为半透明 */\r\n    color: #4d3535;\r\n    border: 1px solid #4d3535;\r\n    /* 添加2px的边框，颜色与原背景色一致 */\r\n    padding: 10px 10px;\r\n    border-radius: 20px;\r\n    /* 设置圆角 */\r\n    cursor: pointer;\r\n    transition: background-color 0.3s, border-color 0.3s;\r\n    /* 添加边框颜色过渡 */\r\n    margin-right: 10px;\r\n    /* 增加一个右边距 */\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n    /* 添加阴影效果 */\r\n    backdrop-filter: blur(30px);\r\n    /* 添加背景模糊效果 */\r\n}\r\n\r\n.home-navbar-button:hover {\r\n    background-color: #ff5900;\r\n    border-color: #ff5900;\r\n    /* 修改hover状态下的边框颜色 */\r\n}\r\n\r\n.details-button{\r\n    position: relative;\r\n    margin-top: 10px;\r\n    margin-bottom: -5px;\r\n    left: 48%;\r\n    background-color: rgba(255, 255, 255, 0.216);\r\n    /* 设置为半透明 */\r\n    color: #4d3535;\r\n    border: 1px solid #4d3535;\r\n    /* 添加2px的边框，颜色与原背景色一致 */\r\n    padding: 12px 18px;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s, border-color 0.3s;\r\n}\r\n\r\n.details-button:hover {\r\n    background-color: #ff5900;\r\n    border-color: #ff5900;\r\n    /* 修改hover状态下的边框颜色 */\r\n}\r\n\r\n.home-navbar-profile img {\r\n    width: 35px;\r\n    height: 35px;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n}\r\n\r\n/* .home-card-container {\r\n    margin-top: 80px;\r\n    height: auto;\r\n} */\r\n\r\n.home-card-container {\r\n    position: relative;\r\n    left: 5%;\r\n    margin-top: 100px;\r\n    height: auto;\r\n    padding: 0;\r\n    /* 移除任何内边距 */\r\n    width: 90%;\r\n    /* 确保容器宽度为100% */\r\n    box-sizing: border-box;\r\n    /* 确保padding和border包含在宽度内 */\r\n}\r\n\r\n.home-card-img {\r\n    width: 100%;\r\n    /* 图片宽度填充整个容器 */\r\n    height: 100%;\r\n    /* 图片高度填充整个容器 */\r\n    object-fit: cover;\r\n    /* 保持图片比例，同时填充整个容器 */\r\n}\r\n\r\n.home-introduction {\r\n    margin-left: calc(50% - 50vw);\r\n    font: \"Microsoft YaHei\";\r\n    color: #edebeb;\r\n}\r\n\r\n.home-text-blocks-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.home-text-block {\r\n    flex: 1;\r\n    margin: 0 10px;\r\n    background-color: rgb(41, 41, 41);\r\n    border-radius: 4px;\r\n    padding: 20px;\r\n    text-align: center;\r\n}\r\n\r\n.home-text-block h3 {\r\n    margin-bottom: 10px;\r\n    font-size: 1.5em;\r\n}\r\n\r\n.home-text-block p {\r\n    font-size: 1em;\r\n    line-height: 1.6;\r\n}\r\n\r\n.home-block-browser {\r\n    margin-left: calc(50% - 50vw);\r\n    display: inline-block;\r\n    /* 使标题与搜索框在同一行 */\r\n    vertical-align: left;\r\n    /* 垂直对齐 */\r\n    color: aliceblue;\r\n}\r\n\r\n.chain-search-container {\r\n    width: 100%;\r\n    max-width: 600px;\r\n    margin: 0px auto;\r\n    position: relative;\r\n    right: 5%;\r\n}\r\n\r\n.chain-search-box {\r\n    display: flex;\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n}\r\n\r\n.chain-search-box input[type=\"text\"] {\r\n    flex: 1;\r\n    padding: 10px 15px;\r\n    border: none;\r\n    outline: none;\r\n    font-size: 16px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.chain-search-box button {\r\n    padding: 10px 15px;\r\n    border: none;\r\n    background: transparent;\r\n    cursor: pointer;\r\n    outline: none;\r\n}\r\n\r\n.chain-search-box button:hover {\r\n    background-color: #f1f1f1;\r\n}\r\n\r\n.chain-search-box svg {\r\n    width: 20px;\r\n    height: 20px;\r\n    fill: #666;\r\n}\r\n\r\n/* block browser */\r\n.block-browser {\r\n    position: relative;\r\n    left: 0%;\r\n    margin-top: 5px;\r\n}\r\n\r\n.block-browser-logo {\r\n    width: 360px;\r\n    height: auto;\r\n}\r\n\r\n.browser-passage1 {\r\n    font-family: Poppins, sans-serif;\r\n    color: #ffffff;\r\n    font-size: 30px;\r\n    padding: 25px 0px 30px;\r\n}\r\n\r\n.browser-passage2 {\r\n    font-family: Poppins, sans-serif;\r\n    color: #ffffff;\r\n    font-size: 28px;\r\n    padding: 0px 0px 60px;\r\n}\r\n\r\n.block-browser-search-box {\r\n    position: relative;\r\n    left: 0%;\r\n    font-family: Arial, sans-serif;\r\n    width: 700px;\r\n    margin: 20px auto;\r\n    padding: 10px;\r\n    background-color: #ffffffab;\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n    display: flex;\r\n}\r\n\r\n.block-browser-search-input {\r\n    flex: 1;\r\n    padding: 5px;\r\n    border: 1px solid #ccc;\r\n    background-color: #ffffffd5;\r\n    border-radius: 10px;\r\n    font-size: 16px;\r\n    outline: none;\r\n}\r\n\r\n.block-browser-search-button {\r\n    padding: 10px 20px;\r\n    background-color: #ff5100;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 10px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease;\r\n}\r\n\r\n.block-browser-search-button:hover {\r\n    background-color: #f4bc80;\r\n    color: #ffffff94;\r\n}\r\n\r\n.block-result-card {\r\n    color: #333;\r\n    font-size: 1em;\r\n    max-width: 80%;\r\n    margin-bottom: 50px;\r\n    background-color: #ffffffdc;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    transition: transform 0.3s;\r\n    width: 80%;\r\n    align-self: center;\r\n    height:fit-content; /* 添加这行，确保卡片高度自适应内容 */\r\n}\r\n\r\n.block-result-card-box {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\nh2 {\r\n    color: #333;\r\n    margin-top: 1%;\r\n    margin-bottom: 0%;\r\n}\r\n\r\n.block-result-card {\r\n    color: #333;\r\n    font-size: 1em;\r\n    max-width: 80%;\r\n    margin-bottom: 50px;\r\n    background-color: #ffffffdc;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    transition: transform 0.3s;\r\n    width: 80%;\r\n    align-self: center;\r\n}\r\n\r\n.block-result-card:hover {\r\n    transform: translateY(-10px);\r\n}\r\n\r\n.block-result-card-content {\r\n    padding: 50px;\r\n}\r\n\r\n.result-card-context {\r\n    text-align: left;\r\n    padding-left: 30px;\r\n    padding-right: 30px;\r\n    overflow-wrap: break-word; /* 处理长词换行 */\r\n    word-wrap: break-word; /* 处理长词换行 */\r\n    white-space: normal; /* 正常换行 */\r\n    overflow: visible; /* 允许超出内容正常显示 */\r\n}\r\n\r\n.transaction-Tx-link {\r\n    color: rgb(209, 100, 37);\r\n}\r\n\r\n.transaction-Tx-link:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.disabled {\r\n    pointer-events: none;\r\n    opacity: 0.5;\r\n}\r\n\r\n.back-arrow {\r\n    position: absolute;\r\n    top: 25px; /* 调整箭头的顶部间距 */\r\n    left: 20px; /* 调整箭头的左侧间距，靠近区块详情 */\r\n    cursor: pointer;\r\n    color: rgb(118, 93, 93);\r\n    font-size: 16px;\r\n    z-index: 10000;\r\n    transition: color 0.3s ease;\r\n}\r\n\r\n.back-arrow:hover {\r\n    color: rgb(209, 100, 37);\r\n}\r\n</style>\r\n"],"mappings":";AA+HA;AACA;AACA,OAAAA,kBAAA;AACA,OAAAC,eAAA;AACA,OAAAC,QAAA;AACA,OAAAC,KAAA;AAEA;EACAC,QAAA;IACA,KAAAC,WAAA,GAAAH,QAAA,MAAAG,WAAA;EACA;EACAC,QAAA;IACAC,UAAA;MACA,KAAAC,IAAA;IACA;IACA,KAAAC,UAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAC,aAAA,QAAAF,MAAA,CAAAC,KAAA,CAAAC,aAAA,CAAAC,QAAA;IACA,KAAAC,WAAA,GAAAC,KAAA,CAAAC,IAAA;MACAC,MAAA;IACA,IAAAC,CAAA,EAAAC,KAAA,KAAAA,KAAA;IACA,KAAAd,WAAA;EACA;EACAe,KAAA;IACA;MACA;MACAZ,IAAA;MACAC,UAAA;MACAK,WAAA;MACAO,YAAA;MACAC,UAAA;MACAC,UAAA,GACA,eACA;MACA;MACA,YACA,WACA,QACA,aACA,SACA,SACA,cACA,gBACA,cACA,QACA,aACA,aACA;MACA;MACA;MACA;MAAA,CACA;MACAC,iBAAA;MACAC,yBAAA,GACA,eACA,cACA,YACA,WACA,QACA,aACA,SACA,SACA,cACA,gBACA,cACA,QACA,aACA,aACA,mBACA,mBACA;MACA;MACAC,OAAA,GACAC,OAAA;MACA;MACAA,OAAA,oBACAA,OAAA,oBACAA,OAAA,oBACAA,OAAA,oBACAA,OAAA,oBACAA,OAAA,mBACA;MACA;MACAC,UAAA;QACAC,KAAA;QACAC,WAAA,kDACA,yDACA;MACA,GACA;QACAD,KAAA;QACAC,WAAA,6CACA;MACA,GACA;QACAD,KAAA;QACAC,WAAA,wCACA,yDACA;MACA;IAEA;EACA;EACAC,OAAA;IACAC,OAAA;MACAC,OAAA,CAAAC,GAAA;MACA,KAAAC,MAAA,CAAAC,QAAA;MACA,SAAA1B,MAAA,CAAA2B,IAAA;QACA9B,UAAA;UACA,KAAA+B,OAAA,CAAAC,IAAA;QACA;MACA;IACA;IACAlC,YAAA;MACA,SAAAI,UAAA;QACA,KAAAD,IAAA;QACAyB,OAAA,CAAAC,GAAA;;QAEA;QACA,MAAAM,UAAA,GAAAC,OAAA,CAAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}