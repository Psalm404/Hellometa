{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BaseWeb3Error } from '../web3_error_base.js';\nimport { ERR_RPC_INTERNAL_ERROR, ERR_RPC_INVALID_INPUT, ERR_RPC_INVALID_JSON, ERR_RPC_INVALID_METHOD, ERR_RPC_INVALID_PARAMS, ERR_RPC_INVALID_REQUEST, ERR_RPC_LIMIT_EXCEEDED, ERR_RPC_MISSING_RESOURCE, ERR_RPC_NOT_SUPPORTED, ERR_RPC_TRANSACTION_REJECTED, ERR_RPC_UNAVAILABLE_RESOURCE, ERR_RPC_UNSUPPORTED_METHOD } from '../error_codes.js';\nimport { RpcErrorMessages, genericRpcErrorMessageTemplate } from './rpc_error_messages.js';\nexport class RpcError extends BaseWeb3Error {\n  constructor(rpcError, message) {\n    super(message !== null && message !== void 0 ? message : genericRpcErrorMessageTemplate.replace('*code*', rpcError.error.code.toString()));\n    this.code = rpcError.error.code;\n    this.id = rpcError.id;\n    this.jsonrpc = rpcError.jsonrpc;\n    this.jsonRpcError = rpcError.error;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      error: this.jsonRpcError,\n      id: this.id,\n      jsonRpc: this.jsonrpc\n    });\n  }\n}\nexport class EIP1193ProviderRpcError extends BaseWeb3Error {\n  constructor(code, data) {\n    var _a, _b, _c, _d;\n    if (!code) {\n      // this case should ideally not happen\n      super();\n    } else if ((_a = RpcErrorMessages[code]) === null || _a === void 0 ? void 0 : _a.message) {\n      super(RpcErrorMessages[code].message);\n    } else {\n      // Retrieve the status code object for the given code from the table, by searching through the appropriate range\n      const statusCodeRange = Object.keys(RpcErrorMessages).find(statusCode => typeof statusCode === 'string' && code >= parseInt(statusCode.split('-')[0], 10) && code <= parseInt(statusCode.split('-')[1], 10));\n      super((_c = (_b = RpcErrorMessages[statusCodeRange !== null && statusCodeRange !== void 0 ? statusCodeRange : '']) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : genericRpcErrorMessageTemplate.replace('*code*', (_d = code === null || code === void 0 ? void 0 : code.toString()) !== null && _d !== void 0 ? _d : '\"\"'));\n    }\n    this.code = code;\n    this.data = data;\n  }\n}\nexport class ParseError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);\n    this.code = ERR_RPC_INVALID_JSON;\n  }\n}\nexport class InvalidRequestError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);\n    this.code = ERR_RPC_INVALID_REQUEST;\n  }\n}\nexport class MethodNotFoundError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);\n    this.code = ERR_RPC_INVALID_METHOD;\n  }\n}\nexport class InvalidParamsError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);\n    this.code = ERR_RPC_INVALID_PARAMS;\n  }\n}\nexport class InternalError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);\n    this.code = ERR_RPC_INTERNAL_ERROR;\n  }\n}\nexport class InvalidInputError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);\n    this.code = ERR_RPC_INVALID_INPUT;\n  }\n}\nexport class MethodNotSupported extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);\n    this.code = ERR_RPC_UNSUPPORTED_METHOD;\n  }\n}\nexport class ResourceUnavailableError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);\n    this.code = ERR_RPC_UNAVAILABLE_RESOURCE;\n  }\n}\nexport class ResourcesNotFoundError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);\n    this.code = ERR_RPC_MISSING_RESOURCE;\n  }\n}\nexport class VersionNotSupportedError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);\n    this.code = ERR_RPC_NOT_SUPPORTED;\n  }\n}\nexport class TransactionRejectedError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);\n    this.code = ERR_RPC_TRANSACTION_REJECTED;\n  }\n}\nexport class LimitExceededError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);\n    this.code = ERR_RPC_LIMIT_EXCEEDED;\n  }\n}\nexport const rpcErrorsMap = new Map();\nrpcErrorsMap.set(ERR_RPC_INVALID_JSON, {\n  error: ParseError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {\n  error: InvalidRequestError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {\n  error: MethodNotFoundError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, {\n  error: InvalidParamsError\n});\nrpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, {\n  error: InternalError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_INPUT, {\n  error: InvalidInputError\n});\nrpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {\n  error: MethodNotSupported\n});\nrpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {\n  error: ResourceUnavailableError\n});\nrpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {\n  error: TransactionRejectedError\n});\nrpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {\n  error: ResourcesNotFoundError\n});\nrpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {\n  error: VersionNotSupportedError\n});\nrpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, {\n  error: LimitExceededError\n});","map":{"version":3,"names":["BaseWeb3Error","ERR_RPC_INTERNAL_ERROR","ERR_RPC_INVALID_INPUT","ERR_RPC_INVALID_JSON","ERR_RPC_INVALID_METHOD","ERR_RPC_INVALID_PARAMS","ERR_RPC_INVALID_REQUEST","ERR_RPC_LIMIT_EXCEEDED","ERR_RPC_MISSING_RESOURCE","ERR_RPC_NOT_SUPPORTED","ERR_RPC_TRANSACTION_REJECTED","ERR_RPC_UNAVAILABLE_RESOURCE","ERR_RPC_UNSUPPORTED_METHOD","RpcErrorMessages","genericRpcErrorMessageTemplate","RpcError","constructor","rpcError","message","replace","error","code","toString","id","jsonrpc","jsonRpcError","toJSON","Object","assign","jsonRpc","EIP1193ProviderRpcError","data","_a","statusCodeRange","keys","find","statusCode","parseInt","split","_c","_b","_d","ParseError","InvalidRequestError","MethodNotFoundError","InvalidParamsError","InternalError","InvalidInputError","MethodNotSupported","ResourceUnavailableError","ResourcesNotFoundError","VersionNotSupportedError","TransactionRejectedError","LimitExceededError","rpcErrorsMap","Map","set"],"sources":["../../../src/errors/rpc_errors.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}