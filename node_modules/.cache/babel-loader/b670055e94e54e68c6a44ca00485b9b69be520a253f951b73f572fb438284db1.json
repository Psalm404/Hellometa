{"ast":null,"code":"import Vue from 'vue';\nimport contractABI from './abi/contract.json';\nimport Web3 from 'web3';\nimport { mint } from './commons/mint.js';\nimport { mintNFT, getTokenURL } from './commons/minNFT.js';\nconst contractAddr = \"0xee3d4496aD0F702F822E234279777AdA03123313\";\nconst state = Vue.observable({\n  account: null,\n  balance: 0\n});\nexport default {\n  name: 'Hellometa',\n  created() {\n    console.log('Created');\n    new Promise((resolve, reject) => {\n      if (window.ethereum) {\n        let web3 = new Web3(window.ethereum);\n        window.ethereum.request({\n          method: 'eth_requestAccounts'\n        }).then(account => {\n          resolve({\n            account,\n            web3\n          });\n        });\n      } else {\n        alert('MetaMask is not installed');\n        reject(\"MetaMask is not installed\");\n      }\n    }).then(result => {\n      //mintNFT(); \n      this.main(result); // 在组件的上下文中调用 main 方法\n    });\n  },\n  methods: {\n    async main({\n      account\n    }) {\n      state.account = Web3.utils.toChecksumAddress(account[0]);\n      this.$store.commit('setAccount', account);\n      console.log('Account:', this.$store.state.account);\n      if (window.ethereum.isConnected()) {\n        console.log('ethereum is connected');\n      }\n    },\n    Mint() {\n      mintNFT();\n      mint(contractAddr, state.account);\n    },\n    getAllTokenIds() {\n      state.contract = new web3.eth.Contract(contractABI, contractAddr, {\n        from: state.account\n      });\n    }\n  }\n};","map":{"version":3,"names":["Vue","contractABI","Web3","mint","mintNFT","getTokenURL","contractAddr","state","observable","account","balance","name","created","console","log","Promise","resolve","reject","window","ethereum","web3","request","method","then","alert","result","main","methods","utils","toChecksumAddress","$store","commit","isConnected","Mint","getAllTokenIds","contract","eth","Contract","from"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n      <button @click = \"Mint\">mint</button>\n      <router-view></router-view>\n  </div>\n  </template>\n  \n  <script>\n  import Vue from 'vue'\n  import contractABI from './abi/contract.json'\n  import Web3 from 'web3'\n  import {\n      mint\n  } from './commons/mint.js';\n  import { mintNFT, getTokenURL } from './commons/minNFT.js';\n  const contractAddr = \"0xee3d4496aD0F702F822E234279777AdA03123313\"\n  const state = Vue.observable({\n      account: null,\n      balance: 0\n  })\n  \n  export default {\n      name: 'Hellometa',\n      created() {\n  \n          console.log('Created')\n          new Promise((resolve, reject) => {\n              if (window.ethereum) {\n                  let web3 = new Web3(window.ethereum);\n                  window.ethereum.request({\n                      method: 'eth_requestAccounts'\n                  }).then(account => {\n                      resolve({\n                          account,\n                          web3\n                      });\n                  });\n              } else {\n                  alert('MetaMask is not installed')\n                  reject(\"MetaMask is not installed\");\n              }\n          }).then((result) => {\n  \n              //mintNFT(); \n              this.main(result); // 在组件的上下文中调用 main 方法\n          });\n      },\n      methods: {\n          async main({\n              account\n          }) {\n  \n              state.account = Web3.utils.toChecksumAddress(account[0])\n              this.$store.commit('setAccount', account);\n              console.log('Account:', this.$store.state.account)\n              if (window.ethereum.isConnected()) {\n                  console.log('ethereum is connected');\n  \n              }\n          },\n          Mint() {\n              mintNFT();\n              mint(contractAddr, state.account);\n          },\n          getAllTokenIds() {\n              state.contract = new web3.eth.Contract(contractABI, contractAddr, {\n                  from: state.account\n              })\n          }\n      },\n  \n  }\n  </script>\n  \n  <style>\n  #app {\n      font-family: Avenir, Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      /* 设置背景图片的URL */\n      /* background-image: url('assets/background.png'); */\n  \n      /* 设置背景图片的大小 */\n      background-size: cover;\n  \n      /* 设置背景图片的位置 */\n      background-position: center;\n  }\n  </style>\n  "],"mappings":"AAQA,OAAAA,GAAA;AACA,OAAAC,WAAA;AACA,OAAAC,IAAA;AACA,SACAC,IAAA,QACA;AACA,SAAAC,OAAA,EAAAC,WAAA;AACA,MAAAC,YAAA;AACA,MAAAC,KAAA,GAAAP,GAAA,CAAAQ,UAAA;EACAC,OAAA;EACAC,OAAA;AACA;AAEA;EACAC,IAAA;EACAC,QAAA;IAEAC,OAAA,CAAAC,GAAA;IACA,IAAAC,OAAA,EAAAC,OAAA,EAAAC,MAAA;MACA,IAAAC,MAAA,CAAAC,QAAA;QACA,IAAAC,IAAA,OAAAlB,IAAA,CAAAgB,MAAA,CAAAC,QAAA;QACAD,MAAA,CAAAC,QAAA,CAAAE,OAAA;UACAC,MAAA;QACA,GAAAC,IAAA,CAAAd,OAAA;UACAO,OAAA;YACAP,OAAA;YACAW;UACA;QACA;MACA;QACAI,KAAA;QACAP,MAAA;MACA;IACA,GAAAM,IAAA,CAAAE,MAAA;MAEA;MACA,KAAAC,IAAA,CAAAD,MAAA;IACA;EACA;EACAE,OAAA;IACA,MAAAD,KAAA;MACAjB;IACA;MAEAF,KAAA,CAAAE,OAAA,GAAAP,IAAA,CAAA0B,KAAA,CAAAC,iBAAA,CAAApB,OAAA;MACA,KAAAqB,MAAA,CAAAC,MAAA,eAAAtB,OAAA;MACAI,OAAA,CAAAC,GAAA,kBAAAgB,MAAA,CAAAvB,KAAA,CAAAE,OAAA;MACA,IAAAS,MAAA,CAAAC,QAAA,CAAAa,WAAA;QACAnB,OAAA,CAAAC,GAAA;MAEA;IACA;IACAmB,KAAA;MACA7B,OAAA;MACAD,IAAA,CAAAG,YAAA,EAAAC,KAAA,CAAAE,OAAA;IACA;IACAyB,eAAA;MACA3B,KAAA,CAAA4B,QAAA,OAAAf,IAAA,CAAAgB,GAAA,CAAAC,QAAA,CAAApC,WAAA,EAAAK,YAAA;QACAgC,IAAA,EAAA/B,KAAA,CAAAE;MACA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}