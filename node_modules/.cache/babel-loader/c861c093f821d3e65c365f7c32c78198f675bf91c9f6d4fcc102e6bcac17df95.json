{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { prepareTransactionForSigning } from 'web3-eth';\nimport { create, decrypt, encrypt, hashMessage, privateKeyToAccount, recover, recoverTransaction, signTransaction, sign, Wallet, privateKeyToAddress, parseAndValidatePrivateKey, privateKeyToPublicKey } from 'web3-eth-accounts';\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\nexport const initAccountsForContext = context => {\n  const signTransactionWithContext = (transaction, privateKey) => __awaiter(void 0, void 0, void 0, function* () {\n    const tx = yield prepareTransactionForSigning(transaction, context);\n    const privateKeyBytes = format({\n      format: 'bytes'\n    }, privateKey, ETH_DATA_FORMAT);\n    return signTransaction(tx, privateKeyBytes);\n  });\n  const privateKeyToAccountWithContext = privateKey => {\n    const account = privateKeyToAccount(privateKey);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n  const decryptWithContext = (keystore, password, options) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const account = yield decrypt(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  });\n  const createWithContext = () => {\n    const account = create();\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n  const wallet = new Wallet({\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext\n  });\n  return {\n    signTransaction: signTransactionWithContext,\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext,\n    recoverTransaction,\n    hashMessage,\n    sign,\n    recover,\n    encrypt,\n    wallet,\n    privateKeyToAddress,\n    parseAndValidatePrivateKey,\n    privateKeyToPublicKey\n  };\n};","map":{"version":3,"names":["ETH_DATA_FORMAT","format","prepareTransactionForSigning","create","decrypt","encrypt","hashMessage","privateKeyToAccount","recover","recoverTransaction","signTransaction","sign","Wallet","privateKeyToAddress","parseAndValidatePrivateKey","privateKeyToPublicKey","initAccountsForContext","context","signTransactionWithContext","transaction","privateKey","__awaiter","tx","privateKeyBytes","privateKeyToAccountWithContext","account","Object","assign","decryptWithContext","keystore","password","options","_a","nonStrict","createWithContext","wallet"],"sources":["../../src/accounts.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAAwDA,eAAe,QAAQ,YAAY;AAC3F,SAASC,MAAM,QAAQ,YAAY;AAEnC,SAASC,4BAA4B,QAAQ,UAAU;AACvD,SACCC,MAAM,EACNC,OAAO,EACPC,OAAO,EACPC,WAAW,EACXC,mBAAmB,EACnBC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,IAAI,EACJC,MAAM,EACNC,mBAAmB,EACnBC,0BAA0B,EAC1BC,qBAAqB,QACf,mBAAmB;AAE1B;;;;;;;AAOA,OAAO,MAAMC,sBAAsB,GAAIC,OAAqC,IAAI;EAC/E,MAAMC,0BAA0B,GAAGA,CAAOC,WAAwB,EAAEC,UAAiB,KAAIC,SAAA;IACxF,MAAMC,EAAE,GAAG,MAAMpB,4BAA4B,CAACiB,WAAW,EAAEF,OAAO,CAAC;IAEnE,MAAMM,eAAe,GAAGtB,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAO,CAAE,EAAEmB,UAAU,EAAEpB,eAAe,CAAC;IAEhF,OAAOU,eAAe,CAACY,EAAE,EAAEC,eAAe,CAAC;EAC5C,CAAC;EAED,MAAMC,8BAA8B,GAAIJ,UAA+B,IAAI;IAC1E,MAAMK,OAAO,GAAGlB,mBAAmB,CAACa,UAAU,CAAC;IAE/C,OAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACIF,OAAO;MACVf,eAAe,EAASS,WAAwB,IAAIE,SAAA;QACnD,OAAAH,0BAA0B,CAACC,WAAW,EAAEM,OAAO,CAACL,UAAU,CAAC;MAAA;IAAA;EAE9D,CAAC;EAED,MAAMQ,kBAAkB,GAAGA,CAC1BC,QAA2B,EAC3BC,QAAgB,EAChBC,OAAiC,KAC9BV,SAAA;;IACH,MAAMI,OAAO,GAAG,MAAMrB,OAAO,CAACyB,QAAQ,EAAEC,QAAQ,EAAE,CAAAE,EAAA,GAACD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,SAAqB,cAAAD,EAAA,cAAAA,EAAA,GAAI,IAAI,CAAC;IAE1F,OAAAN,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACIF,OAAO;MACVf,eAAe,EAASS,WAAwB,IAAIE,SAAA;QACnD,OAAAH,0BAA0B,CAACC,WAAW,EAAEM,OAAO,CAACL,UAAU,CAAC;MAAA;IAAA;EAE9D,CAAC;EAED,MAAMc,iBAAiB,GAAGA,CAAA,KAAK;IAC9B,MAAMT,OAAO,GAAGtB,MAAM,EAAE;IAExB,OAAAuB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACIF,OAAO;MACVf,eAAe,EAASS,WAAwB,IAAIE,SAAA;QACnD,OAAAH,0BAA0B,CAACC,WAAW,EAAEM,OAAO,CAACL,UAAU,CAAC;MAAA;IAAA;EAE9D,CAAC;EAED,MAAMe,MAAM,GAAG,IAAIvB,MAAM,CAAC;IACzBT,MAAM,EAAE+B,iBAAiB;IACzB3B,mBAAmB,EAAEiB,8BAA8B;IACnDpB,OAAO,EAAEwB;GACT,CAAC;EAEF,OAAO;IACNlB,eAAe,EAAEQ,0BAA0B;IAC3Cf,MAAM,EAAE+B,iBAAiB;IACzB3B,mBAAmB,EAAEiB,8BAA8B;IACnDpB,OAAO,EAAEwB,kBAAkB;IAC3BnB,kBAAkB;IAClBH,WAAW;IACXK,IAAI;IACJH,OAAO;IACPH,OAAO;IACP8B,MAAM;IACNtB,mBAAmB;IACnBC,0BAA0B;IAC1BC;GACA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}