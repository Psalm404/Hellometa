{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport { getAccessListData, verifyAccessList, getAccessListJSON, getDataFeeEIP2930 } from './utils.js';\nimport { bigIntToHex, toUint8Array, ecrecover, uint8ArrayToBigInt, bigIntToUnpaddedUint8Array } from '../common/utils.js';\nimport { BaseTransaction } from './baseTransaction.js';\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n// eslint-disable-next-line no-use-before-define\nexport class AccessListEIP2930Transaction extends BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData, opts = {}) {\n    var _a;\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    this.DEFAULT_HARDFORK = 'berlin';\n    const {\n      chainId,\n      accessList,\n      gasPrice\n    } = txData;\n    this.common = this._getCommon(opts.common, chainId);\n    this.chainId = this.common.chainId();\n    // EIP-2718 check is done in Common\n    if (!this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n    // Populate the access list fields\n    const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    this.accessList = accessListData.accessList;\n    this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    verifyAccessList(this.accessList);\n    this.gasPrice = uint8ArrayToBigInt(toUint8Array(gasPrice === '' ? '0x' : gasPrice));\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n    BaseTransaction._validateNotArray(txData);\n    if (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n      throw new Error(msg);\n    }\n    this._validateYParity();\n    this._validateHighS();\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  static fromTxData(txData, opts = {}) {\n    return new AccessListEIP2930Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n  static fromSerializedTx(serialized, opts = {}) {\n    if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n      throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(serialized.subarray(0, 1))}`);\n    }\n    const values = RLP.decode(Uint8Array.from(serialized.subarray(1)));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n  static fromValuesArray(values, opts = {}) {\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n    const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n    this._validateNotArray({\n      chainId,\n      v\n    });\n    validateNoLeadingZeroes({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    const emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: uint8ArrayToBigInt(chainId),\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n      v: v !== undefined ? uint8ArrayToBigInt(v) : undefined,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    let cost = super.getDataFee();\n    cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n    return cost;\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty UINT8ARRAY values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n  raw() {\n    return [bigIntToUnpaddedUint8Array(this.chainId), bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data, this.accessList, this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]), this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]), this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize() {\n    const base = this.raw();\n    return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n  }\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true) {\n    const base = this.raw().slice(0, 8);\n    const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n    if (hashMessage) {\n      return keccak256(message);\n    }\n    return message;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize());\n      }\n      return this.cache.hash;\n    }\n    return keccak256(this.serialize());\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    return this.getMessageToSign();\n  }\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n      throw new Error(msg);\n    }\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return ecrecover(msgHash, v + BigInt(27),\n      // Recover the 27 which was stripped from ecsign\n      bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  _processSignature(v, r, s) {\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: v - BigInt(27),\n      r: uint8ArrayToBigInt(r),\n      s: uint8ArrayToBigInt(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON() {\n    const accessListJSON = getAccessListJSON(this.accessList);\n    return {\n      chainId: bigIntToHex(this.chainId),\n      nonce: bigIntToHex(this.nonce),\n      gasPrice: bigIntToHex(this.gasPrice),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: bytesToHex(this.data),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined\n    };\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n  errorStr() {\n    var _a, _b;\n    let errorStr = this._getSharedErrorPostfix();\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += ` gasPrice=${this.gasPrice} accessListCount=${(_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}","map":{"version":3,"names":["keccak256","validateNoLeadingZeroes","RLP","bytesToHex","hexToBytes","uint8ArrayConcat","uint8ArrayEquals","MAX_INTEGER","getAccessListData","verifyAccessList","getAccessListJSON","getDataFeeEIP2930","bigIntToHex","toUint8Array","ecrecover","uint8ArrayToBigInt","bigIntToUnpaddedUint8Array","BaseTransaction","TRANSACTION_TYPE","TRANSACTION_TYPE_UINT8ARRAY","toString","padStart","AccessListEIP2930Transaction","constructor","txData","opts","Object","assign","type","DEFAULT_HARDFORK","chainId","accessList","gasPrice","common","_getCommon","isActivatedEIP","Error","activeCapabilities","concat","accessListData","AccessListJSON","_validateCannotExceedMaxInteger","_validateNotArray","gasLimit","msg","_errorMsg","_validateYParity","_validateHighS","freeze","_a","fromTxData","fromSerializedTx","serialized","subarray","values","decode","Uint8Array","from","Array","isArray","fromValuesArray","length","nonce","to","value","data","v","r","s","emptyAccessList","undefined","getDataFee","cache","dataFee","hardfork","cost","BigInt","isFrozen","getUpfrontCost","raw","buf","serialize","base","encode","getMessageToSign","hashMessage","slice","message","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","e","_processSignature","txOptions","toJSON","accessListJSON","errorStr","_getSharedErrorPostfix","_b"],"sources":["../../../src/tx/eip2930Transaction.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}