{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n *\n *  @module ABI\n */\nimport { AbiError } from 'web3-errors';\nimport { sha3Raw } from 'web3-utils';\nimport { isAbiFunctionFragment, jsonInterfaceMethodToString } from '../utils.js';\nimport { encodeParameters } from './parameters_api.js';\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json\n * @param functionName - The function name to encode or the `JSON interface` object of the function.\n * If the passed parameter is a string, it has to be in the form of `functionName(param1Type,param2Type,...)`. eg: myFunction(uint256,uint32[],bytes10,bytes)\n * @returns - The ABI signature of the function.\n * @example\n * ```ts\n * const signature = web3.eth.abi.encodeFunctionSignature({\n *   name: \"myMethod\",\n *   type: \"function\",\n *   inputs: [\n *     {\n *       type: \"uint256\",\n *       name: \"myNumber\",\n *     },\n *     {\n *       type: \"string\",\n *       name: \"myString\",\n *     },\n *   ],\n * });\n * console.log(signature);\n * > 0x24ee0097\n *\n * const signature = web3.eth.abi.encodeFunctionSignature('myMethod(uint256,string)')\n * console.log(signature);\n * > 0x24ee0097\n *\n * const signature = web3.eth.abi.encodeFunctionSignature('safeTransferFrom(address,address,uint256,bytes)');\n * console.log(signature);\n * > 0xb88d4fde\n * ```\n */\nexport const encodeFunctionSignature = functionName => {\n  if (typeof functionName !== 'string' && !isAbiFunctionFragment(functionName)) {\n    throw new AbiError('Invalid parameter value in encodeFunctionSignature');\n  }\n  let name;\n  if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {\n    name = jsonInterfaceMethodToString(functionName);\n  } else {\n    name = functionName;\n  }\n  return sha3Raw(name).slice(0, 10);\n};\n/**\n * Encodes a function call using its `JSON interface` object and given parameters.\n * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json\n * @param jsonInterface - The `JSON interface` object of the function.\n * @param params - The parameters to encode\n * @returns - The ABI encoded function call, which, means the function signature and the parameters passed.\n * @example\n * ```ts\n * const sig = web3.eth.abi.encodeFunctionCall(\n *   {\n *     name: \"myMethod\",\n *     type: \"function\",\n *     inputs: [\n *       {\n *         type: \"uint256\",\n *         name: \"myNumber\",\n *       },\n *       {\n *         type: \"string\",\n *         name: \"myString\",\n *       },\n *     ],\n *   },\n *   [\"2345675643\", \"Hello!%\"]\n * );\n * console.log(sig);\n * > 0x24ee0097000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n *\n *\n *\n * const sig = web3.eth.abi.encodeFunctionCall(\n *   {\n *     inputs: [\n *       {\n *         name: \"account\",\n *         type: \"address\",\n *       },\n *     ],\n *     name: \"balanceOf\",\n *     outputs: [\n *       {\n *         name: \"\",\n *         type: \"uint256\",\n *       },\n *     ],\n *     stateMutability: \"view\",\n *     type: \"function\",\n *   },\n *   [\"0x1234567890123456789012345678901234567890\"]\n * );\n *\n * console.log(sig);\n * > 0x70a082310000000000000000000000001234567890123456789012345678901234567890\n * ```\n */\nexport const encodeFunctionCall = (jsonInterface, params) => {\n  var _a;\n  if (!isAbiFunctionFragment(jsonInterface)) {\n    throw new AbiError('Invalid parameter value in encodeFunctionCall');\n  }\n  return `${encodeFunctionSignature(jsonInterface)}${encodeParameters((_a = jsonInterface.inputs) !== null && _a !== void 0 ? _a : [], params !== null && params !== void 0 ? params : []).replace('0x', '')}`;\n};","map":{"version":3,"names":["AbiError","sha3Raw","isAbiFunctionFragment","jsonInterfaceMethodToString","encodeParameters","encodeFunctionSignature","functionName","name","slice","encodeFunctionCall","jsonInterface","params","_a","inputs","replace"],"sources":["../../../src/api/functions_api.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;;;;AAIA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,OAAO,QAAQ,YAAY;AAEpC,SAASC,qBAAqB,EAAEC,2BAA2B,QAAQ,aAAa;AAChF,SAASC,gBAAgB,QAAQ,qBAAqB;AAEtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,MAAMC,uBAAuB,GAAIC,YAA0C,IAAY;EAC7F,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAI,CAACJ,qBAAqB,CAACI,YAAY,CAAC,EAAE;IAC7E,MAAM,IAAIN,QAAQ,CAAC,oDAAoD,CAAC;;EAGzE,IAAIO,IAAY;EAEhB,IAAID,YAAY,KAAK,OAAOA,YAAY,KAAK,UAAU,IAAI,OAAOA,YAAY,KAAK,QAAQ,CAAC,EAAE;IAC7FC,IAAI,GAAGJ,2BAA2B,CAACG,YAAY,CAAC;GAChD,MAAM;IACNC,IAAI,GAAGD,YAAY;;EAGpB,OAAOL,OAAO,CAACM,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AAClC,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,OAAO,MAAMC,kBAAkB,GAAGA,CACjCC,aAAkC,EAClCC,MAAiB,KACN;;EACX,IAAI,CAACT,qBAAqB,CAACQ,aAAa,CAAC,EAAE;IAC1C,MAAM,IAAIV,QAAQ,CAAC,+CAA+C,CAAC;;EAGpE,OAAO,GAAGK,uBAAuB,CAACK,aAAa,CAAC,GAAGN,gBAAgB,CAClE,CAAAQ,EAAA,GAAAF,aAAa,CAACG,MAAM,cAAAD,EAAA,cAAAA,EAAA,GAAI,EAAE,EAC1BD,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,EAAE,CACZ,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}