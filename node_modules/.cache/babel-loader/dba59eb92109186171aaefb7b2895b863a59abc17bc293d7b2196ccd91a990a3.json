{"ast":null,"code":"/*\r\ncontract.js根据智能合约地址和ABI创建一个contract实例，用于智能合约功能调用\r\n\r\n在web3.js的基础上得出实例，创建contract实例之前，我们需要确认已经成功初始化了web3实例：\r\n        检查是否存在以太坊浏览器扩展（如MetaMask）。\r\n        请求用户授权连接他们的以太坊账户。\r\n但是以上确认成功初始化了web3实例在contract.js中并没实现，需要根据实际情况补充代码！！！\r\n*/\nimport Web3 from \"web3\";\nimport contractABI from '@/abi/contract';\nconst contractAddr = '0xeb7f6C4b667501fEd16797381D4BB5bc5bE821Cf'; // 合约地址\nconst web3 = new Web3(window.ethereum);\nconst contract = new web3.eth.Contract(contractABI, contractAddr); // 智能合约实例\n\nexport default contract;","map":{"version":3,"names":["Web3","contractABI","contractAddr","web3","window","ethereum","contract","eth","Contract"],"sources":["D:/my-repo/hellometa/src/commons/contract.js"],"sourcesContent":["/*\r\ncontract.js根据智能合约地址和ABI创建一个contract实例，用于智能合约功能调用\r\n\r\n在web3.js的基础上得出实例，创建contract实例之前，我们需要确认已经成功初始化了web3实例：\r\n        检查是否存在以太坊浏览器扩展（如MetaMask）。\r\n        请求用户授权连接他们的以太坊账户。\r\n但是以上确认成功初始化了web3实例在contract.js中并没实现，需要根据实际情况补充代码！！！\r\n*/\r\nimport Web3 from \"web3\";    \r\nimport contractABI from '@/abi/contract';\r\n\r\nconst contractAddr = '0xeb7f6C4b667501fEd16797381D4BB5bc5bE821Cf'; // 合约地址\r\nconst web3 = new Web3(window.ethereum);\r\nconst contract = new web3.eth.Contract(contractABI, contractAddr); // 智能合约实例\r\n\r\nexport default contract;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,WAAW,MAAM,gBAAgB;AAExC,MAAMC,YAAY,GAAG,4CAA4C,CAAC,CAAC;AACnE,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACI,MAAM,CAACC,QAAQ,CAAC;AACtC,MAAMC,QAAQ,GAAG,IAAIH,IAAI,CAACI,GAAG,CAACC,QAAQ,CAACP,WAAW,EAAEC,YAAY,CAAC,CAAC,CAAC;;AAEnE,eAAeI,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}