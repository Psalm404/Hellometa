{"ast":null,"code":"import Vue from 'vue';\nimport helloMeta from './helloMeta.vue';\nimport VueRouter from 'vue-router';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport ViewUI from 'view-design';\nimport 'view-design/dist/styles/iview.css';\nimport router from '@/index';\nimport store from '@/store';\nimport axios from 'axios';\nVue.config.productionTip = false;\nVue.use(VueRouter);\nVue.use(ElementUI);\nVue.use(ViewUI);\nVue.config.productionTip = false;\n\n// 设置 Axios 请求拦截器\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token && !config.url.includes('/login') && !config.url.includes('/register')) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nconst originalPush = router.prototype.push; // 保存原始的 push 方法\nrouter.prototype.push = function push(location) {\n  // 重写 push 方法\n  return originalPush.call(this, location).catch(err => err); // 调用原始的 push，并捕获错误\n};\nnew Vue({\n  el: '#app',\n  render: h => h(helloMeta),\n  router: router,\n  store: store\n}).$mount('#app');","map":{"version":3,"names":["Vue","helloMeta","VueRouter","ElementUI","ViewUI","router","store","axios","config","productionTip","use","interceptors","request","token","localStorage","getItem","url","includes","headers","Authorization","error","Promise","reject","originalPush","prototype","push","location","call","catch","err","el","render","h","$mount"],"sources":["D:/my-repo/hellometa/src/main.js"],"sourcesContent":["import Vue from 'vue'\r\nimport helloMeta from './helloMeta.vue'\r\nimport VueRouter from 'vue-router'\r\nimport ElementUI from 'element-ui';\r\nimport 'element-ui/lib/theme-chalk/index.css';\r\nimport ViewUI from 'view-design';\r\nimport 'view-design/dist/styles/iview.css';\r\nimport router from '@/index'\r\nimport store from '@/store'\r\nimport axios from 'axios';\r\n\r\nVue.config.productionTip = false\r\n\r\nVue.use(VueRouter);\r\nVue.use(ElementUI);\r\nVue.use(ViewUI);\r\n\r\nVue.config.productionTip = false\r\n\r\n// 设置 Axios 请求拦截器\r\naxios.interceptors.request.use(\r\n  config => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token && !config.url.includes('/login') && !config.url.includes('/register')) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\nconst originalPush = router.prototype.push;  // 保存原始的 push 方法\r\nrouter.prototype.push = function push(location) {  // 重写 push 方法\r\n    return originalPush.call(this, location).catch(err => err);  // 调用原始的 push，并捕获错误\r\n};\r\nnew Vue({\r\n  el: '#app',\r\n  render: h => h(helloMeta),\r\n  router:router,\r\n  store:store\r\n}).$mount('#app')\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,sCAAsC;AAC7C,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAO,mCAAmC;AAC1C,OAAOC,MAAM,MAAM,SAAS;AAC5B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,KAAK,MAAM,OAAO;AAEzBP,GAAG,CAACQ,MAAM,CAACC,aAAa,GAAG,KAAK;AAEhCT,GAAG,CAACU,GAAG,CAACR,SAAS,CAAC;AAClBF,GAAG,CAACU,GAAG,CAACP,SAAS,CAAC;AAClBH,GAAG,CAACU,GAAG,CAACN,MAAM,CAAC;AAEfJ,GAAG,CAACQ,MAAM,CAACC,aAAa,GAAG,KAAK;;AAEhC;AACAF,KAAK,CAACI,YAAY,CAACC,OAAO,CAACF,GAAG,CAC5BF,MAAM,IAAI;EACR,MAAMK,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,IAAI,CAACL,MAAM,CAACQ,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAACT,MAAM,CAACQ,GAAG,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;IAChFT,MAAM,CAACU,OAAO,CAACC,aAAa,GAAG,UAAUN,KAAK,EAAE;EAClD;EACA,OAAOL,MAAM;AACf,CAAC,EACDY,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AACD,MAAMG,YAAY,GAAGlB,MAAM,CAACmB,SAAS,CAACC,IAAI,CAAC,CAAE;AAC7CpB,MAAM,CAACmB,SAAS,CAACC,IAAI,GAAG,SAASA,IAAIA,CAACC,QAAQ,EAAE;EAAG;EAC/C,OAAOH,YAAY,CAACI,IAAI,CAAC,IAAI,EAAED,QAAQ,CAAC,CAACE,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAE;AACjE,CAAC;AACD,IAAI7B,GAAG,CAAC;EACN8B,EAAE,EAAE,MAAM;EACVC,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAAC/B,SAAS,CAAC;EACzBI,MAAM,EAACA,MAAM;EACbC,KAAK,EAACA;AACR,CAAC,CAAC,CAAC2B,MAAM,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}