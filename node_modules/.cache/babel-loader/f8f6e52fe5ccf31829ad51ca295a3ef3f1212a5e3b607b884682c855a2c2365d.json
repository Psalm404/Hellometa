{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      formData: {\n        account: '',\n        // 绑定到后端的 account 字段\n        name: '',\n        // 绑定到后端的 name 字段\n        phone: '',\n        // 绑定到后端的 phone 字段\n        email: '',\n        // 绑定到后端的 email 字段\n        description: '',\n        // 绑定到后端的 description 字段\n        password: '',\n        // 绑定到后端的 password 字段\n        confirmPassword: '' // 用于确认密码匹配\n      },\n      rules: {\n        account: [{\n          required: true,\n          message: '用户名不能为空',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '用户名至少需要6个字符',\n          trigger: 'blur'\n        }, {\n          pattern: /^[A-Za-z0-9_]{6,}$/,\n          message: '用户名只允许字母、数字和下划线',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '公司名称不能为空',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          message: '公司名称至少需要3个字符',\n          trigger: 'blur'\n        }, {\n          pattern: /^[A-Za-z0-9_\\u4e00-\\u9fa5]{3,}$/,\n          message: '公司名称只允许字母、数字、下划线和中文字符',\n          trigger: 'blur'\n        }],\n        phone: [\n        // { required: true, message: '手机号不能为空', trigger: 'blur' },\n        {\n          pattern: /^1[3-9]\\d{9}$/,\n          message: '请输入有效的手机号',\n          trigger: 'blur'\n        }],\n        email: [\n        // { required: true, message: '邮箱不能为空', trigger: 'blur' },\n        {\n          type: 'email',\n          message: '请输入有效的邮箱地址',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '密码不能为空',\n          trigger: 'blur'\n        }, {\n          min: 8,\n          message: '密码至少需要8个字符',\n          trigger: 'blur'\n        }, {\n          pattern: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n          message: '密码至少包含一个字母和一个数字，只能包含字母和数字，不能包含特殊字符',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '确认密码不能为空',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (value !== this.formData.password) {\n              callback(new Error('两次输入的密码不一致'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        description: [{\n          max: 100,\n          message: '描述不能超过100个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    async register(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          document.getElementById('overlay').style.display = 'block';\n          const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\n          axios.post(`${apiBaseUrl}/register`, {\n            account: this.formData.account,\n            password: this.formData.password,\n            repeat_password: this.formData.confirmPassword,\n            // 传递确认密码以进行匹配验证\n            name: this.formData.name,\n            phone: this.formData.phone,\n            email: this.formData.email,\n            description: this.formData.description\n          }).then(res => {\n            if (res.data.code === 200) {\n              this.$message({\n                showClose: true,\n                message: '注册成功! 将在2秒后跳转至登陆页',\n                type: 'success'\n              });\n              let self = this;\n              setTimeout(() => {\n                this.$emit('trigger-login');\n                self.$router.push('/intro');\n              }, 5000);\n            } else {\n              this.$message({\n                showClose: true,\n                message: res.data.status,\n                type: 'error'\n              });\n              document.getElementById('overlay').style.display = 'none'; // 确保overlay被隐藏\n            }\n          }).catch(error => {\n            console.error('Error creating user:', error);\n            this.$message({\n              showClose: true,\n              message: '注册失败，请稍后重试',\n              type: 'error'\n            });\n          });\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    backLogin() {\n      this.$emit('trigger-login'); // 触发登录事件\n    },\n    backGuest() {\n      this.$router.push('/intro');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","formData","account","name","phone","email","description","password","confirmPassword","rules","required","message","trigger","min","pattern","type","validator","rule","value","callback","Error","max","methods","register","formName","$refs","validate","valid","document","getElementById","style","display","apiBaseUrl","process","env","VUE_APP_BACKEND_BASE_URL","post","repeat_password","then","res","code","$message","showClose","self","setTimeout","$emit","$router","push","status","catch","error","console","log","backLogin","backGuest"],"sources":["src/components/registerPage.vue"],"sourcesContent":["<template>\n    <div class=\"register-container\">\n        <div class=\"register-box\">\n            <div class=\"register-text\">\n                <h2>👋欢迎来到HelloMeta!</h2>\n                <h3>注册账号，为您的作品进行数字确权:</h3>\n                ❕：标有 * 的为必填项\n            </div>\n            <el-form :model=\"formData\" :rules=\"rules\" ref=\"formData\">\n                <div class=\"register-columns\">\n                    <!-- 第一列 -->\n                    <div class=\"column\">\n                        <div class=\"register-input\">\n                            <label>*设置用户id</label>\n                            <el-form-item prop=\"account\">\n                                <el-input type=\"text\" v-model=\"formData.account\"></el-input>\n                            </el-form-item>\n                        </div>\n                        <div class=\"register-input\">\n                            <label>*设置用户名</label>\n                            <el-form-item prop=\"name\">\n                                <el-input type=\"text\" v-model=\"formData.name\"></el-input>\n                            </el-form-item>\n                        </div>\n                        <div class=\"register-input\">\n                            <label>*设置密码</label>\n                            <el-form-item prop=\"password\">\n                                <el-input type=\"password\" v-model=\"formData.password\" show-password></el-input>\n                            </el-form-item>\n                        </div>\n                        <div class=\"register-input\">\n                            <label>*确认密码</label>\n                            <el-form-item prop=\"confirmPassword\">\n                                <el-input type=\"password\" v-model=\"formData.confirmPassword\" show-password></el-input>\n                            </el-form-item>\n                        </div>\n                    </div>\n\n                    <!-- 第二列 -->\n                    <div class=\"column\">\n                        <div class=\"register-input\">\n                            <label>设置手机号</label>\n                            <el-form-item prop=\"phone\">\n                                <el-input type=\"text\" v-model=\"formData.phone\"></el-input>\n                            </el-form-item>\n                        </div>\n                        <div class=\"register-input\">\n                            <label>设置邮箱</label>\n                            <el-form-item prop=\"email\">\n                                <el-input type=\"text\" v-model=\"formData.email\"></el-input>\n                            </el-form-item>\n                        </div>\n                        <div class=\"register-input\">\n                            <label>设置描述</label>\n                            <el-form-item prop=\"description\">\n                                <el-input type=\"textarea\" v-model=\"formData.description\" rows=\"4\" autosize></el-input>\n                            </el-form-item>\n                        </div>\n                    </div>\n                </div>\n                <el-form-item>\n                    <button class=\"register-submit\" @click=\"register('formData')\">注册</button>\n                </el-form-item>\n            </el-form>\n            <!-- <a class=\"el-icon-back back-login\" @click=\"backLogin\"> 已有账号，点此登录</a> -->\n            <a class=\"el-icon-back back-guest\" @click=\"backGuest\"> 返回游客浏览</a>\n        </div>\n        <div class=\"overlay\" id=\"overlay\" style=\"display: none;\"></div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            formData: {\n                account: '',            // 绑定到后端的 account 字段\n                name: '',               // 绑定到后端的 name 字段\n                phone: '',              // 绑定到后端的 phone 字段\n                email: '',              // 绑定到后端的 email 字段\n                description: '',        // 绑定到后端的 description 字段\n                password: '',           // 绑定到后端的 password 字段\n                confirmPassword: '',    // 用于确认密码匹配\n            },\n            rules: {\n                account: [\n                    { required: true, message: '用户名不能为空', trigger: 'blur' },\n                    { min: 6, message: '用户名至少需要6个字符', trigger: 'blur' },\n                    { pattern: /^[A-Za-z0-9_]{6,}$/, message: '用户名只允许字母、数字和下划线', trigger: 'blur' }\n                ],\n                name: [\n                    { required: true, message: '公司名称不能为空', trigger: 'blur' },\n                    { min: 3, message: '公司名称至少需要3个字符', trigger: 'blur' },\n                    { pattern: /^[A-Za-z0-9_\\u4e00-\\u9fa5]{3,}$/, message: '公司名称只允许字母、数字、下划线和中文字符', trigger: 'blur' }\n                ],\n                phone: [\n                    // { required: true, message: '手机号不能为空', trigger: 'blur' },\n                    { pattern: /^1[3-9]\\d{9}$/, message: '请输入有效的手机号', trigger: 'blur' }\n                ],\n                email: [\n                    // { required: true, message: '邮箱不能为空', trigger: 'blur' },\n                    { type: 'email', message: '请输入有效的邮箱地址', trigger: 'blur' }\n                ],\n                password: [\n                    { required: true, message: '密码不能为空', trigger: 'blur' },\n                    { min: 8, message: '密码至少需要8个字符', trigger: 'blur' },\n                    { pattern: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, message: '密码至少包含一个字母和一个数字，只能包含字母和数字，不能包含特殊字符', trigger: 'blur' }\n                ],\n                confirmPassword: [\n                    { required: true, message: '确认密码不能为空', trigger: 'blur' },\n                    {\n                        validator: (rule, value, callback) => {\n                            if (value !== this.formData.password) {\n                                callback(new Error('两次输入的密码不一致'));\n                            } else {\n                                callback();\n                            }\n                        }, \n                        trigger: 'blur'\n                    }\n                ],\n                description: [\n                    { max: 100, message: '描述不能超过100个字符', trigger: 'blur' }\n                ]\n            }\n        };\n    },\n    methods: {\n        async register(formName) {\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                    document.getElementById('overlay').style.display = 'block';\n                    const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\n                    axios.post(`${apiBaseUrl}/register`, {\n                        account: this.formData.account,\n                        password: this.formData.password,\n                        repeat_password: this.formData.confirmPassword, // 传递确认密码以进行匹配验证\n                        name: this.formData.name,\n                        phone: this.formData.phone,\n                        email: this.formData.email,\n                        description: this.formData.description,\n                    })\n                    .then(res => {\n                        if (res.data.code === 200) {\n                            this.$message({\n                                showClose: true,\n                                message: '注册成功! 将在2秒后跳转至登陆页',\n                                type: 'success'\n                            });\n                            \n                            let self = this;\n                            setTimeout(() => {\n                                this.$emit('trigger-login'); \n                                self.$router.push('/intro');\n                            }, 5000);\n                        } else {\n                            this.$message({\n                                showClose: true,\n                                message: res.data.status,\n                                type: 'error'\n                            });\n                            document.getElementById('overlay').style.display = 'none';  // 确保overlay被隐藏\n                        }\n                    })\n                    .catch(error => {\n                        console.error('Error creating user:', error);\n                        this.$message({\n                            showClose: true,\n                            message: '注册失败，请稍后重试',\n                            type: 'error'\n                        });\n                    });\n                } else {\n                    console.log('error submit!!');\n                    return false;\n                }\n            });\n        },\n        backLogin() {\n            this.$emit('trigger-login'); // 触发登录事件\n        },\n        backGuest() {\n            this.$router.push('/intro');\n        }\n    }\n}\n</script>\n\n<style>\n.overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 9999;\n    /* 确保覆盖在页面上方 */\n}\n\n.register-container {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    /* justify-content: center; */\n    align-items: center;\n    min-height: 100vh;\n    min-width: 100vw;\n}\n\n.register-box {\n    margin-top: 100px;\n    width: 1200px;\n    height: 700px;\n    color: white;\n    /* background-color:rgba(255, 255, 255, 0.05); */\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-top: 10px;\n    justify-content: center;\n}\n\n.register-text {\n    align-self:flex-start;\n    font-size: large;\n    text-align: left;\n    padding-top: 10px;\n    padding-left: 50px;\n    line-height: 35px;\n}\n\n.register-input {\n    display: flex;\n    width: 500px;\n    margin: 20px 0; /* 为每个输入框添加垂直间距 */\n}\n\n.register-columns {\n    display: flex; /* 将两列并排显示 */\n    justify-content: space-between; /* 在两列之间添加空间 */\n    width: 100%; /* 宽度为容器的100% */\n}\n\n.column {\n    flex: 1; /* 使每一列占据相等的空间 */\n    margin: 0 10px; /* 给列之间添加一些间距 */\n}\n\n.register-input input[type=\"textarea\"] {\n    width: 100%; /* 宽度为100% */\n    max-width: 100%; /* 最大宽度为100% */\n    resize: none; /* 禁止手动调整大小 */\n    word-break: break-all; /* 长字自动换行 */\n}\n\n.register-input label {\n    margin-top: 10px;\n    width: 160px;\n    font-size: 15px;\n    color: white;\n}\n\n.register-container .el-form-item {\n    width: 100%;\n    height: 40px;\n}\n\n.register-input input {\n    -webkit-text-fill-color: white;\n    width: 100%;\n    height: 40px;\n    background-color: transparent;\n    outline: none;\n    font-size: 1em;\n    color: white;\n}\n\ninput:-webkit-autofill {\n    transition: background-color 5000s ease-in-out 0s;\n}\n\n.register-submit {\n    width: 400px;\n    height: 40px;\n    background: #fff;\n    border: none;\n    outline: none;\n    border-radius: 40px;\n    cursor: pointer;\n    font-size: 1em;\n    color: black;\n    font-weight: 500;\n}\n\n.register-submit:hover {\n    background: #ff5733;\n    /* color: #ff5733; */\n}\n\n/* .back-login {\n    position: absolute;\n    left: 34%;\n    top: 75%;\n    margin-top: 10px;\n    margin-right: 350px;\n    color: white;\n} */\n\n.back-guest {\n    position: absolute;\n    left: 13%;\n    top:14%;\n    margin-top: 10px;\n    margin-right: 350px;\n    color: rgb(255, 244, 94);\n    cursor: pointer;\n}\n\n.back-guest:hover {\n    color: #ff5733;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}