{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { isNullish, isUint8Array, leftPad, rightPad, toHex } from 'web3-utils';\nexport const isAbiFragment = item => !isNullish(item) && typeof item === 'object' && !isNullish(item.type) && ['function', 'event', 'constructor', 'error'].includes(item.type);\nexport const isAbiErrorFragment = item => !isNullish(item) && typeof item === 'object' && !isNullish(item.type) && item.type === 'error';\nexport const isAbiEventFragment = item => !isNullish(item) && typeof item === 'object' && !isNullish(item.type) && item.type === 'event';\nexport const isAbiFunctionFragment = item => !isNullish(item) && typeof item === 'object' && !isNullish(item.type) && item.type === 'function';\nexport const isAbiConstructorFragment = item => !isNullish(item) && typeof item === 'object' && !isNullish(item.type) && item.type === 'constructor';\n/**\n * Check if type is simplified struct format\n */\nexport const isSimplifiedStructFormat = type => typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n */\nexport const mapStructNameAndType = structName => structName.includes('[]') ? {\n  type: 'tuple[]',\n  name: structName.slice(0, -2)\n} : {\n  type: 'tuple',\n  name: structName\n};\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n */\nexport const mapStructToCoderFormat = struct => {\n  const components = [];\n  for (const key of Object.keys(struct)) {\n    const item = struct[key];\n    if (typeof item === 'object') {\n      components.push(Object.assign(Object.assign({}, mapStructNameAndType(key)), {\n        components: mapStructToCoderFormat(item)\n      }));\n    } else {\n      components.push({\n        name: key,\n        type: struct[key]\n      });\n    }\n  }\n  return components;\n};\n/**\n * Map types if simplified format is used\n */\nexport const mapTypes = types => {\n  const mappedTypes = [];\n  for (const type of types) {\n    let modifiedType = type;\n    // Clone object\n    if (typeof type === 'object') {\n      modifiedType = Object.assign({}, type);\n    }\n    // Remap `function` type params to bytes24 since Ethers does not\n    // recognize former type. Solidity docs say `Function` is a bytes24\n    // encoding the contract address followed by the function selector hash.\n    if (typeof type === 'object' && type.type === 'function') {\n      modifiedType = Object.assign(Object.assign({}, type), {\n        type: 'bytes24'\n      });\n    }\n    if (isSimplifiedStructFormat(modifiedType)) {\n      const structName = Object.keys(modifiedType)[0];\n      mappedTypes.push(Object.assign(Object.assign({}, mapStructNameAndType(structName)), {\n        components: mapStructToCoderFormat(modifiedType[structName])\n      }));\n    } else {\n      mappedTypes.push(modifiedType);\n    }\n  }\n  return mappedTypes;\n};\n/**\n * returns true if input is a hexstring and is odd-lengthed\n */\nexport const isOddHexstring = param => typeof param === 'string' && /^(-)?0x[0-9a-f]*$/i.test(param) && param.length % 2 === 1;\n/**\n * format odd-length bytes to even-length\n */\nexport const formatOddHexstrings = param => isOddHexstring(param) ? `0x0${param.substring(2)}` : param;\nconst paramTypeBytes = /^bytes([0-9]*)$/;\nconst paramTypeBytesArray = /^bytes([0-9]*)\\[\\]$/;\nconst paramTypeNumber = /^(u?int)([0-9]*)$/;\nconst paramTypeNumberArray = /^(u?int)([0-9]*)\\[\\]$/;\n/**\n * Handle some formatting of params for backwards compatibility with Ethers V4\n */\nexport const formatParam = (type, _param) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  // clone if _param is an object\n  const param = typeof _param === 'object' && !Array.isArray(_param) ? Object.assign({}, _param) : _param;\n  // Format BN to string\n  if (param instanceof BigInt || typeof param === 'bigint') {\n    return param.toString(10);\n  }\n  if (paramTypeBytesArray.exec(type) || paramTypeNumberArray.exec(type)) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    const paramClone = [...param];\n    return paramClone.map(p => formatParam(type.replace('[]', ''), p));\n  }\n  // Format correct width for u?int[0-9]*\n  let match = paramTypeNumber.exec(type);\n  if (match) {\n    const size = parseInt(match[2] ? match[2] : '256', 10);\n    if (size / 8 < param.length) {\n      // pad to correct bit width\n      return leftPad(param, size);\n    }\n  }\n  // Format correct length for bytes[0-9]+\n  match = paramTypeBytes.exec(type);\n  if (match) {\n    const hexParam = isUint8Array(param) ? toHex(param) : param;\n    // format to correct length\n    const size = parseInt(match[1], 10);\n    if (size) {\n      let maxSize = size * 2;\n      if (param.startsWith('0x')) {\n        maxSize += 2;\n      }\n      // pad to correct length\n      const paddedParam = hexParam.length < maxSize ? rightPad(param, size * 2) : hexParam;\n      return formatOddHexstrings(paddedParam);\n    }\n    return formatOddHexstrings(hexParam);\n  }\n  return param;\n};\n/**\n *  used to flatten json abi inputs/outputs into an array of type-representing-strings\n */\nexport const flattenTypes = (includeTuple, puts) => {\n  const types = [];\n  puts.forEach(param => {\n    if (typeof param.components === 'object') {\n      if (!param.type.startsWith('tuple')) {\n        throw new AbiError(`Invalid value given \"${param.type}\". Error: components found but type is not tuple.`);\n      }\n      const arrayBracket = param.type.indexOf('[');\n      const suffix = arrayBracket >= 0 ? param.type.substring(arrayBracket) : '';\n      const result = flattenTypes(includeTuple, param.components);\n      if (Array.isArray(result) && includeTuple) {\n        types.push(`tuple(${result.join(',')})${suffix}`);\n      } else if (!includeTuple) {\n        types.push(`(${result.join(',')})${suffix}`);\n      } else {\n        types.push(`(${result.join()})`);\n      }\n    } else {\n      types.push(param.type);\n    }\n  });\n  return types;\n};\n/**\n * Should be used to create full function/event name from json abi\n * returns a string\n */\nexport const jsonInterfaceMethodToString = json => {\n  var _a, _b, _c, _d;\n  if (isAbiErrorFragment(json) || isAbiEventFragment(json) || isAbiFunctionFragment(json)) {\n    if ((_a = json.name) === null || _a === void 0 ? void 0 : _a.includes('(')) {\n      return json.name;\n    }\n    return `${(_b = json.name) !== null && _b !== void 0 ? _b : ''}(${flattenTypes(false, (_c = json.inputs) !== null && _c !== void 0 ? _c : []).join(',')})`;\n  }\n  // Constructor fragment\n  return `(${flattenTypes(false, (_d = json.inputs) !== null && _d !== void 0 ? _d : []).join(',')})`;\n};","map":{"version":3,"names":["AbiError","isNullish","isUint8Array","leftPad","rightPad","toHex","isAbiFragment","item","type","includes","isAbiErrorFragment","isAbiEventFragment","isAbiFunctionFragment","isAbiConstructorFragment","isSimplifiedStructFormat","components","name","mapStructNameAndType","structName","slice","mapStructToCoderFormat","struct","key","Object","keys","push","assign","mapTypes","types","mappedTypes","modifiedType","isOddHexstring","param","test","length","formatOddHexstrings","substring","paramTypeBytes","paramTypeBytesArray","paramTypeNumber","paramTypeNumberArray","formatParam","_param","Array","isArray","BigInt","toString","exec","paramClone","map","p","replace","match","size","parseInt","hexParam","maxSize","startsWith","paddedParam","flattenTypes","includeTuple","puts","forEach","arrayBracket","indexOf","suffix","result","join","jsonInterfaceMethodToString","json","_a","_b","_c","inputs","_d"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}