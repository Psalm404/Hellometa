{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport assert from \"@noble/hashes/_assert\";\nimport { hexToBytes as _hexToBytes } from \"@noble/hashes/utils\";\nconst assertBool = assert.bool;\nconst assertBytes = assert.bytes;\nexport { assertBool, assertBytes };\nexport { bytesToHex, bytesToHex as toHex, concatBytes, createView, utf8ToBytes } from \"@noble/hashes/utils\";\n// buf.toString('utf8') -> bytesToUtf8(buf)\nexport function bytesToUtf8(data) {\n  if (!(data instanceof Uint8Array)) {\n    throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n  }\n  return new TextDecoder().decode(data);\n}\nexport function hexToBytes(data) {\n  const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n  return _hexToBytes(sliced);\n}\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nexport function equalsBytes(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n// Internal utils\nexport function wrapHash(hash) {\n  return msg => {\n    assert.bytes(msg);\n    return hash(msg);\n  };\n}\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nexport const crypto = (() => {\n  const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n  const nodeRequire = typeof module !== \"undefined\" && typeof module.require === \"function\" && module.require.bind(module);\n  return {\n    node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n    web: webCrypto\n  };\n})();","map":{"version":3,"names":["assert","hexToBytes","_hexToBytes","assertBool","bool","assertBytes","bytes","bytesToHex","toHex","concatBytes","createView","utf8ToBytes","bytesToUtf8","data","Uint8Array","TypeError","TextDecoder","decode","sliced","startsWith","substring","equalsBytes","a","b","length","i","wrapHash","hash","msg","crypto","webCrypto","globalThis","undefined","nodeRequire","module","require","bind","node","web"],"sources":["D:/my-repo/hellometa/node_modules/ethereum-cryptography/esm/utils.js"],"sourcesContent":["import assert from \"@noble/hashes/_assert\";\nimport { hexToBytes as _hexToBytes } from \"@noble/hashes/utils\";\nconst assertBool = assert.bool;\nconst assertBytes = assert.bytes;\nexport { assertBool, assertBytes };\nexport { bytesToHex, bytesToHex as toHex, concatBytes, createView, utf8ToBytes } from \"@noble/hashes/utils\";\n// buf.toString('utf8') -> bytesToUtf8(buf)\nexport function bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nexport function hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return _hexToBytes(sliced);\n}\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nexport function equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// Internal utils\nexport function wrapHash(hash) {\n    return (msg) => {\n        assert.bytes(msg);\n        return hash(msg);\n    };\n}\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nexport const crypto = (() => {\n    const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n    const nodeRequire = typeof module !== \"undefined\" &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n"],"mappings":";;;;;;AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,SAASC,UAAU,IAAIC,WAAW,QAAQ,qBAAqB;AAC/D,MAAMC,UAAU,GAAGH,MAAM,CAACI,IAAI;AAC9B,MAAMC,WAAW,GAAGL,MAAM,CAACM,KAAK;AAChC,SAASH,UAAU,EAAEE,WAAW;AAChC,SAASE,UAAU,EAAEA,UAAU,IAAIC,KAAK,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,QAAQ,qBAAqB;AAC3G;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAE;EAC9B,IAAI,EAAEA,IAAI,YAAYC,UAAU,CAAC,EAAE;IAC/B,MAAM,IAAIC,SAAS,CAAC,wCAAwC,OAAOF,IAAI,EAAE,CAAC;EAC9E;EACA,OAAO,IAAIG,WAAW,CAAC,CAAC,CAACC,MAAM,CAACJ,IAAI,CAAC;AACzC;AACA,OAAO,SAASZ,UAAUA,CAACY,IAAI,EAAE;EAC7B,MAAMK,MAAM,GAAGL,IAAI,CAACM,UAAU,CAAC,IAAI,CAAC,GAAGN,IAAI,CAACO,SAAS,CAAC,CAAC,CAAC,GAAGP,IAAI;EAC/D,OAAOX,WAAW,CAACgB,MAAM,CAAC;AAC9B;AACA;AACA,OAAO,SAASG,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC9B,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE;IACvB,OAAO,KAAK;EAChB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC/B,IAAIH,CAAC,CAACG,CAAC,CAAC,KAAKF,CAAC,CAACE,CAAC,CAAC,EAAE;MACf,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,IAAI,EAAE;EAC3B,OAAQC,GAAG,IAAK;IACZ5B,MAAM,CAACM,KAAK,CAACsB,GAAG,CAAC;IACjB,OAAOD,IAAI,CAACC,GAAG,CAAC;EACpB,CAAC;AACL;AACA;AACA,OAAO,MAAMC,MAAM,GAAG,CAAC,MAAM;EACzB,MAAMC,SAAS,GAAG,OAAOC,UAAU,KAAK,QAAQ,IAAI,QAAQ,IAAIA,UAAU,GAAGA,UAAU,CAACF,MAAM,GAAGG,SAAS;EAC1G,MAAMC,WAAW,GAAG,OAAOC,MAAM,KAAK,WAAW,IAC7C,OAAOA,MAAM,CAACC,OAAO,KAAK,UAAU,IACpCD,MAAM,CAACC,OAAO,CAACC,IAAI,CAACF,MAAM,CAAC;EAC/B,OAAO;IACHG,IAAI,EAAEJ,WAAW,IAAI,CAACH,SAAS,GAAGG,WAAW,CAAC,QAAQ,CAAC,GAAGD,SAAS;IACnEM,GAAG,EAAER;EACT,CAAC;AACL,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}