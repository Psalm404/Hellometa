{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Web3 from \"web3\";\nimport getTransaction from \"@/commons/getTransaction\";\nasync function getBlocks() {\n  const web3 = new Web3(window.ethereum);\n  try {\n    // 请求用户连接他们的钱包\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n\n    // 获取最新的区块号\n    const latestBlockNumber = await web3.eth.getBlockNumber();\n    // console.log(\"Latest block number:\", latestBlockNumber);\n\n    // 定义存储区块的数组\n    let blocks = [];\n\n    // 定义批量处理的步长\n    const batchSize = 10;\n\n    // 获取前100个区块信息\n    const end = Math.max(Number(latestBlockNumber) - 10, 0);\n    for (let i = Number(latestBlockNumber); i >= end; i -= batchSize) {\n      const start = Math.max(i - batchSize + 1, end);\n      const batchBlocks = await Promise.all(Array.from({\n        length: i - start + 1\n      }, (_, index) => web3.eth.getBlock(start + index)));\n\n      // 处理每个区块的详细信息\n      for (let j = Number(batchBlocks.lenngth) - 1; j >= 0; j--) {\n        const block = batchBlocks[j];\n        // console.log(block.number);\n        // 获取每个交易的详细信息\n        let transactions_detail = [];\n        if (block.transactions != null) {\n          for (let k = 0; k < block.transactions.length; k++) {\n            let tx = await getTransaction(block.transactions[k]);\n            transactions_detail.push(tx);\n          }\n        }\n\n        // 将区块信息添加到数组中\n        blocks.push({\n          block: block,\n          transactions_detail: transactions_detail\n        });\n      }\n    }\n\n    // 返回查询到的前100个区块信息\n    console.log(\"First 100 blocks retrieved:\");\n    return blocks;\n  } catch (error) {\n    console.error(\"Error retrieving blocks:\", error);\n    throw error;\n  }\n}\nexport default getBlocks;","map":{"version":3,"names":["Web3","getTransaction","getBlocks","web3","window","ethereum","request","method","latestBlockNumber","eth","getBlockNumber","blocks","batchSize","end","Math","max","Number","i","start","batchBlocks","Promise","all","Array","from","length","_","index","getBlock","j","lenngth","block","transactions_detail","transactions","k","tx","push","console","log","error"],"sources":["D:/my-repo/hellometa/src/commons/getRecentBlocks.js"],"sourcesContent":["import Web3 from \"web3\";\r\nimport getTransaction from \"@/commons/getTransaction\";\r\n\r\nasync function getBlocks() {\r\n    const web3 = new Web3(window.ethereum);\r\n\r\n    try {\r\n        // 请求用户连接他们的钱包\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        \r\n        // 获取最新的区块号\r\n        const latestBlockNumber = await web3.eth.getBlockNumber();\r\n        // console.log(\"Latest block number:\", latestBlockNumber);\r\n\r\n        // 定义存储区块的数组\r\n        let blocks = [];\r\n\r\n        // 定义批量处理的步长\r\n        const batchSize = 10;\r\n\r\n        // 获取前100个区块信息\r\n        const end = Math.max(Number(latestBlockNumber) - 10, 0);\r\n        for (let i = Number(latestBlockNumber); i >= end; i -= batchSize) {\r\n            const start = Math.max(i - batchSize + 1, end);\r\n            const batchBlocks = await Promise.all(\r\n                Array.from({ length: i - start + 1 }, (_, index) => web3.eth.getBlock(start + index))\r\n            );\r\n\r\n            // 处理每个区块的详细信息\r\n            for (let j = Number(batchBlocks.lenngth) - 1; j >= 0 ; j--) {\r\n                const block = batchBlocks[j];\r\n                // console.log(block.number);\r\n                // 获取每个交易的详细信息\r\n                let transactions_detail = [];\r\n                if (block.transactions != null) {\r\n                    for (let k = 0; k < block.transactions.length; k++) {\r\n                        let tx = await getTransaction(block.transactions[k]);\r\n                        transactions_detail.push(tx);\r\n                    }\r\n                }\r\n\r\n                // 将区块信息添加到数组中\r\n                blocks.push({\r\n                    block: block,\r\n                    transactions_detail: transactions_detail\r\n                });\r\n            }\r\n        }\r\n\r\n        // 返回查询到的前100个区块信息\r\n        console.log(\"First 100 blocks retrieved:\");\r\n        return blocks;\r\n    } catch (error) {\r\n        console.error(\"Error retrieving blocks:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport default getBlocks;\r\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,cAAc,MAAM,0BAA0B;AAErD,eAAeC,SAASA,CAAA,EAAG;EACvB,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACI,MAAM,CAACC,QAAQ,CAAC;EAEtC,IAAI;IACA;IACA,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAsB,CAAC,CAAC;;IAEhE;IACA,MAAMC,iBAAiB,GAAG,MAAML,IAAI,CAACM,GAAG,CAACC,cAAc,CAAC,CAAC;IACzD;;IAEA;IACA,IAAIC,MAAM,GAAG,EAAE;;IAEf;IACA,MAAMC,SAAS,GAAG,EAAE;;IAEpB;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACC,MAAM,CAACR,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACvD,KAAK,IAAIS,CAAC,GAAGD,MAAM,CAACR,iBAAiB,CAAC,EAAES,CAAC,IAAIJ,GAAG,EAAEI,CAAC,IAAIL,SAAS,EAAE;MAC9D,MAAMM,KAAK,GAAGJ,IAAI,CAACC,GAAG,CAACE,CAAC,GAAGL,SAAS,GAAG,CAAC,EAAEC,GAAG,CAAC;MAC9C,MAAMM,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAG,CACjCC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAEP,CAAC,GAAGC,KAAK,GAAG;MAAE,CAAC,EAAE,CAACO,CAAC,EAAEC,KAAK,KAAKvB,IAAI,CAACM,GAAG,CAACkB,QAAQ,CAACT,KAAK,GAAGQ,KAAK,CAAC,CACxF,CAAC;;MAED;MACA,KAAK,IAAIE,CAAC,GAAGZ,MAAM,CAACG,WAAW,CAACU,OAAO,CAAC,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAGA,CAAC,EAAE,EAAE;QACxD,MAAME,KAAK,GAAGX,WAAW,CAACS,CAAC,CAAC;QAC5B;QACA;QACA,IAAIG,mBAAmB,GAAG,EAAE;QAC5B,IAAID,KAAK,CAACE,YAAY,IAAI,IAAI,EAAE;UAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACE,YAAY,CAACR,MAAM,EAAES,CAAC,EAAE,EAAE;YAChD,IAAIC,EAAE,GAAG,MAAMjC,cAAc,CAAC6B,KAAK,CAACE,YAAY,CAACC,CAAC,CAAC,CAAC;YACpDF,mBAAmB,CAACI,IAAI,CAACD,EAAE,CAAC;UAChC;QACJ;;QAEA;QACAvB,MAAM,CAACwB,IAAI,CAAC;UACRL,KAAK,EAAEA,KAAK;UACZC,mBAAmB,EAAEA;QACzB,CAAC,CAAC;MACN;IACJ;;IAEA;IACAK,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,OAAO1B,MAAM;EACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ;AAEA,eAAepC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}