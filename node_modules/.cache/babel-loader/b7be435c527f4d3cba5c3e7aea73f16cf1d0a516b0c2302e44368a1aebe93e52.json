{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport { Iban } from 'web3-eth-iban';\nimport { BlockTags } from 'web3-types';\nimport { fromUtf8, hexToNumber, hexToNumberString, isAddress, isHexStrict, mergeDeep, numberToHex, sha3Raw, toChecksumAddress, toNumber, toUtf8, utf8ToHex } from 'web3-utils';\nimport { isBlockTag, isHex, isNullish } from 'web3-validator';\n/* eslint-disable deprecation/deprecation */\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\nexport const inputStorageKeysFormatter = keys => keys.map(num => numberToHex(num));\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\nexport const outputProofFormatter = proof => ({\n  address: toChecksumAddress(proof.address),\n  nonce: hexToNumberString(proof.nonce),\n  balance: hexToNumberString(proof.balance)\n});\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\nexport const outputBigIntegerFormatter = number => toNumber(number);\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\nexport const inputBlockNumberFormatter = blockNumber => {\n  if (isNullish(blockNumber)) {\n    return undefined;\n  }\n  if (typeof blockNumber === 'string' && isBlockTag(blockNumber)) {\n    return blockNumber;\n  }\n  if (blockNumber === 'genesis') {\n    return '0x0';\n  }\n  if (typeof blockNumber === 'string' && isHexStrict(blockNumber)) {\n    return blockNumber.toLowerCase();\n  }\n  return numberToHex(blockNumber);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\nexport const inputDefaultBlockNumberFormatter = (blockNumber, defaultBlock) => {\n  if (!blockNumber) {\n    return inputBlockNumberFormatter(defaultBlock);\n  }\n  return inputBlockNumberFormatter(blockNumber);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\nexport const inputAddressFormatter = address => {\n  if (Iban.isValid(address) && Iban.isDirect(address)) {\n    const iban = new Iban(address);\n    return iban.toAddress().toLowerCase();\n  }\n  if (isAddress(address)) {\n    return `0x${address.toLowerCase().replace('0x', '')}`;\n  }\n  throw new FormatterError(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const txInputOptionsFormatter = options => {\n  var _a;\n  const modifiedOptions = Object.assign({}, options);\n  if (options.to) {\n    // it might be contract creation\n    modifiedOptions.to = inputAddressFormatter(options.to);\n  }\n  if (options.data && options.input) {\n    throw new FormatterError('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  }\n  if (!options.input && options.data) {\n    modifiedOptions.input = options.data;\n    delete modifiedOptions.data;\n  }\n  if (options.input && !options.input.startsWith('0x')) {\n    modifiedOptions.input = `0x${options.input}`;\n  }\n  if (modifiedOptions.input && !isHexStrict(modifiedOptions.input)) {\n    throw new FormatterError('The input field must be HEX encoded data.');\n  }\n  // allow both\n  if (options.gas || options.gasLimit) {\n    modifiedOptions.gas = toNumber((_a = options.gas) !== null && _a !== void 0 ? _a : options.gasLimit);\n  }\n  if (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n    delete modifiedOptions.gasPrice;\n  }\n  ['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId'].filter(key => !isNullish(modifiedOptions[key])).forEach(key => {\n    modifiedOptions[key] = numberToHex(modifiedOptions[key]);\n  });\n  return modifiedOptions;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputCallFormatter = (options, defaultAccount) => {\n  var _a;\n  const opts = txInputOptionsFormatter(options);\n  const from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n  if (from) {\n    opts.from = inputAddressFormatter(from);\n  }\n  return opts;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputTransactionFormatter = (options, defaultAccount) => {\n  var _a;\n  const opts = txInputOptionsFormatter(options);\n  // check from, only if not number, or object\n  if (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n    opts.from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n    if (!options.from && !(typeof options.from === 'number')) {\n      throw new FormatterError('The send transactions \"from\" field must be defined!');\n    }\n    opts.from = inputAddressFormatter(options.from);\n  }\n  return opts;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\nexport const inputSignFormatter = data => isHexStrict(data) ? data : utf8ToHex(data);\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\nexport const outputTransactionFormatter = tx => {\n  const modifiedTx = Object.assign({}, tx);\n  if (tx.blockNumber) {\n    modifiedTx.blockNumber = hexToNumber(tx.blockNumber);\n  }\n  if (tx.transactionIndex) {\n    modifiedTx.transactionIndex = hexToNumber(tx.transactionIndex);\n  }\n  modifiedTx.nonce = hexToNumber(tx.nonce);\n  modifiedTx.gas = hexToNumber(tx.gas);\n  if (tx.gasPrice) {\n    modifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);\n  }\n  if (tx.maxFeePerGas) {\n    modifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);\n  }\n  if (tx.maxPriorityFeePerGas) {\n    modifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);\n  }\n  if (tx.type) {\n    modifiedTx.type = hexToNumber(tx.type);\n  }\n  modifiedTx.value = outputBigIntegerFormatter(tx.value);\n  if (tx.to && isAddress(tx.to)) {\n    // tx.to could be `0x0` or `null` while contract creation\n    modifiedTx.to = toChecksumAddress(tx.to);\n  } else {\n    modifiedTx.to = undefined; // set to `null` if invalid address\n  }\n  if (tx.from) {\n    modifiedTx.from = toChecksumAddress(tx.from);\n  }\n  return modifiedTx;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const inputTopicFormatter = topic => {\n  // Using \"null\" value intentionally for validation\n  // eslint-disable-next-line no-null/no-null\n  if (isNullish(topic)) return null;\n  const value = String(topic);\n  return isHex(value) ? value : fromUtf8(value);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\nexport const inputLogFormatter = filter => {\n  var _a;\n  const val = isNullish(filter) ? {} : mergeDeep({}, filter);\n  // If options !== undefined, don't blow out existing data\n  if (isNullish(val.fromBlock)) {\n    val.fromBlock = BlockTags.LATEST;\n  }\n  val.fromBlock = inputBlockNumberFormatter(val.fromBlock);\n  if (!isNullish(val.toBlock)) {\n    val.toBlock = inputBlockNumberFormatter(val.toBlock);\n  }\n  // make sure topics, get converted to hex\n  val.topics = (_a = val.topics) !== null && _a !== void 0 ? _a : [];\n  val.topics = val.topics.map(topic => Array.isArray(topic) ? topic.map(inputTopicFormatter) : inputTopicFormatter(topic));\n  if (val.address) {\n    val.address = Array.isArray(val.address) ? val.address.map(addr => inputAddressFormatter(addr)) : inputAddressFormatter(val.address);\n  }\n  return val;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\nexport const outputLogFormatter = log => {\n  const modifiedLog = Object.assign({}, log);\n  const logIndex = typeof log.logIndex === 'string' ? log.logIndex : numberToHex(log.logIndex);\n  // generate a custom log id\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n    const shaId = sha3Raw(`${log.blockHash.replace('0x', '')}${log.transactionHash.replace('0x', '')}${logIndex.replace('0x', '')}`);\n    modifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n  } else if (!log.id) {\n    modifiedLog.id = undefined;\n  }\n  if (log.blockNumber && isHexStrict(log.blockNumber)) {\n    modifiedLog.blockNumber = hexToNumber(log.blockNumber);\n  }\n  if (log.transactionIndex && isHexStrict(log.transactionIndex)) {\n    modifiedLog.transactionIndex = hexToNumber(log.transactionIndex);\n  }\n  if (log.logIndex && isHexStrict(log.logIndex)) {\n    modifiedLog.logIndex = hexToNumber(log.logIndex);\n  }\n  if (log.address) {\n    modifiedLog.address = toChecksumAddress(log.address);\n  }\n  return modifiedLog;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\nexport const outputTransactionReceiptFormatter = receipt => {\n  if (typeof receipt !== 'object') {\n    throw new FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n  }\n  const modifiedReceipt = Object.assign({}, receipt);\n  if (receipt.blockNumber) {\n    modifiedReceipt.blockNumber = hexToNumber(receipt.blockNumber);\n  }\n  if (receipt.transactionIndex) {\n    modifiedReceipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n  }\n  modifiedReceipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n  modifiedReceipt.gasUsed = hexToNumber(receipt.gasUsed);\n  if (receipt.logs && Array.isArray(receipt.logs)) {\n    modifiedReceipt.logs = receipt.logs.map(outputLogFormatter);\n  }\n  if (receipt.effectiveGasPrice) {\n    modifiedReceipt.effectiveGasPrice = hexToNumber(receipt.effectiveGasPrice);\n  }\n  if (receipt.contractAddress) {\n    modifiedReceipt.contractAddress = toChecksumAddress(receipt.contractAddress);\n  }\n  if (receipt.status) {\n    modifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n  }\n  return modifiedReceipt;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\nexport const outputBlockFormatter = block => {\n  const modifiedBlock = Object.assign({}, block);\n  // transform to number\n  modifiedBlock.gasLimit = hexToNumber(block.gasLimit);\n  modifiedBlock.gasUsed = hexToNumber(block.gasUsed);\n  modifiedBlock.size = hexToNumber(block.size);\n  modifiedBlock.timestamp = hexToNumber(block.timestamp);\n  if (block.number) {\n    modifiedBlock.number = hexToNumber(block.number);\n  }\n  if (block.difficulty) {\n    modifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);\n  }\n  if (block.totalDifficulty) {\n    modifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);\n  }\n  if (block.transactions && Array.isArray(block.transactions)) {\n    modifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);\n  }\n  if (block.miner) {\n    modifiedBlock.miner = toChecksumAddress(block.miner);\n  }\n  if (block.baseFeePerGas) {\n    modifiedBlock.baseFeePerGas = outputBigIntegerFormatter(block.baseFeePerGas);\n  }\n  return modifiedBlock;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\nexport const inputPostFormatter = post => {\n  var _a;\n  const modifiedPost = Object.assign({}, post);\n  if (post.ttl) {\n    modifiedPost.ttl = numberToHex(post.ttl);\n  }\n  if (post.workToProve) {\n    modifiedPost.workToProve = numberToHex(post.workToProve);\n  }\n  if (post.priority) {\n    modifiedPost.priority = numberToHex(post.priority);\n  }\n  // fallback\n  if (post.topics && !Array.isArray(post.topics)) {\n    modifiedPost.topics = post.topics ? [post.topics] : [];\n  }\n  // format the following options\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(topic => topic.startsWith('0x') ? topic : fromUtf8(topic));\n  return modifiedPost;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\nexport const outputPostFormatter = post => {\n  var _a;\n  const modifiedPost = Object.assign({}, post);\n  if (post.expiry) {\n    modifiedPost.expiry = hexToNumber(post.expiry);\n  }\n  if (post.sent) {\n    modifiedPost.sent = hexToNumber(post.sent);\n  }\n  if (post.ttl) {\n    modifiedPost.ttl = hexToNumber(post.ttl);\n  }\n  if (post.workProved) {\n    modifiedPost.workProved = hexToNumber(post.workProved);\n  }\n  // post.payloadRaw = post.payload;\n  // post.payload = utils.hexToAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n  if (!post.topics) {\n    modifiedPost.topics = [];\n  }\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(toUtf8);\n  return modifiedPost;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n */\nexport const outputSyncingFormatter = result => {\n  const modifiedResult = Object.assign({}, result);\n  modifiedResult.startingBlock = hexToNumber(result.startingBlock);\n  modifiedResult.currentBlock = hexToNumber(result.currentBlock);\n  modifiedResult.highestBlock = hexToNumber(result.highestBlock);\n  if (result.knownStates) {\n    modifiedResult.knownStates = hexToNumber(result.knownStates);\n  }\n  if (result.pulledStates) {\n    modifiedResult.pulledStates = hexToNumber(result.pulledStates);\n  }\n  return modifiedResult;\n};","map":{"version":3,"names":["FormatterError","Iban","BlockTags","fromUtf8","hexToNumber","hexToNumberString","isAddress","isHexStrict","mergeDeep","numberToHex","sha3Raw","toChecksumAddress","toNumber","toUtf8","utf8ToHex","isBlockTag","isHex","isNullish","inputStorageKeysFormatter","keys","map","num","outputProofFormatter","proof","address","nonce","balance","outputBigIntegerFormatter","number","inputBlockNumberFormatter","blockNumber","undefined","toLowerCase","inputDefaultBlockNumberFormatter","defaultBlock","inputAddressFormatter","isValid","isDirect","iban","toAddress","replace","txInputOptionsFormatter","options","modifiedOptions","Object","assign","to","data","input","startsWith","gas","gasLimit","_a","maxPriorityFeePerGas","maxFeePerGas","gasPrice","filter","key","forEach","inputCallFormatter","defaultAccount","opts","from","inputTransactionFormatter","inputSignFormatter","outputTransactionFormatter","tx","modifiedTx","transactionIndex","type","value","inputTopicFormatter","topic","String","inputLogFormatter","val","fromBlock","LATEST","toBlock","topics","Array","isArray","addr","outputLogFormatter","log","modifiedLog","logIndex","blockHash","transactionHash","shaId","id","slice","outputTransactionReceiptFormatter","receipt","modifiedReceipt","cumulativeGasUsed","gasUsed","logs","effectiveGasPrice","contractAddress","status","Boolean","parseInt","outputBlockFormatter","block","modifiedBlock","size","timestamp","difficulty","totalDifficulty","transactions","miner","baseFeePerGas","inputPostFormatter","post","modifiedPost","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","outputSyncingFormatter","result","modifiedResult","startingBlock","currentBlock","highestBlock","knownStates","pulledStates"],"sources":["../../src/formatters.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}