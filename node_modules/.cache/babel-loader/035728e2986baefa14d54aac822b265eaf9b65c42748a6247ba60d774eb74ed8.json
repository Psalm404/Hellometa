{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      formData: {\n        account: '',\n        // 绑定到后端的 account 字段\n        name: '',\n        // 绑定到后端的 name 字段\n        phone: '',\n        // 绑定到后端的 phone 字段\n        email: '',\n        // 绑定到后端的 email 字段\n        description: '',\n        // 绑定到后端的 description 字段\n        password: '',\n        // 绑定到后端的 password 字段\n        confirmPassword: '' // 用于确认密码匹配\n      },\n      rules: {\n        account: [{\n          required: true,\n          message: '用户名不能为空',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '用户名至少需要6个字符',\n          trigger: 'blur'\n        }, {\n          pattern: /^[A-Za-z0-9_]{6,}$/,\n          message: '用户名只允许字母、数字和下划线',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '公司名称不能为空',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          message: '公司名称至少需要3个字符',\n          trigger: 'blur'\n        }, {\n          pattern: /^[A-Za-z0-9_\\u4e00-\\u9fa5]{3,}$/,\n          message: '公司名称只允许字母、数字、下划线和中文字符',\n          trigger: 'blur'\n        }],\n        phone: [\n        // { required: true, message: '手机号不能为空', trigger: 'blur' },\n        {\n          pattern: /^1[3-9]\\d{9}$/,\n          message: '请输入有效的手机号',\n          trigger: 'blur'\n        }],\n        email: [\n        // { required: true, message: '邮箱不能为空', trigger: 'blur' },\n        {\n          type: 'email',\n          message: '请输入有效的邮箱地址',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '密码不能为空',\n          trigger: 'blur'\n        }, {\n          min: 8,\n          message: '密码至少需要8个字符',\n          trigger: 'blur'\n        }, {\n          pattern: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n          message: '密码至少包含一个字母和一个数字，只能包含字母和数字，不能包含特殊字符',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '确认密码不能为空',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (value !== this.formData.password) {\n              callback(new Error('两次输入的密码不一致'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        description: [{\n          max: 100,\n          message: '描述不能超过100个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    async register(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          document.getElementById('overlay').style.display = 'block';\n          const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\n          axios.post(`${apiBaseUrl}/register`, {\n            account: this.formData.account,\n            password: this.formData.password,\n            repeat_password: this.formData.confirmPassword,\n            // 传递确认密码以进行匹配验证\n            name: this.formData.name,\n            phone: this.formData.phone,\n            email: this.formData.email,\n            description: this.formData.description\n          }).then(res => {\n            if (res.data.code === 200) {\n              this.$message({\n                showClose: true,\n                message: '注册成功! 将在2秒后跳转至登陆页',\n                type: 'success'\n              });\n              let self = this;\n              setTimeout(() => {\n                this.$emit('trigger-login');\n                self.$router.push('/intro');\n              }, 5000);\n            } else {\n              this.$message({\n                showClose: true,\n                message: res.data.status,\n                type: 'error'\n              });\n              document.getElementById('overlay').style.display = 'none'; // 确保overlay被隐藏\n            }\n          }).catch(error => {\n            console.error('Error creating user:', error);\n            this.$message({\n              showClose: true,\n              message: '注册失败，请稍后重试',\n              type: 'error'\n            });\n          });\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    backLogin() {\n      this.$emit('trigger-login'); // 触发登录事件\n    },\n    backGuest() {\n      this.$router.push('/intro');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","formData","account","name","phone","email","description","password","confirmPassword","rules","required","message","trigger","min","pattern","type","validator","rule","value","callback","Error","max","methods","register","formName","$refs","validate","valid","document","getElementById","style","display","apiBaseUrl","process","env","VUE_APP_BACKEND_BASE_URL","post","repeat_password","then","res","code","$message","showClose","self","setTimeout","$emit","$router","push","status","catch","error","console","log","backLogin","backGuest"],"sources":["src/components/registerPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"register-container\">\r\n        <div class=\"register-box\">\r\n            <div class=\"register-text\">\r\n                <h2>👋欢迎来到HelloMeta!</h2>\r\n                <h3>注册账号，为您的作品进行数字确权:</h3>\r\n                ❕：标有 * 的为必填项\r\n            </div>\r\n            <el-form :model=\"formData\" :rules=\"rules\" ref=\"formData\">\r\n                <div class=\"register-columns\">\r\n                    <!-- 第一列 -->\r\n                    <div class=\"column\">\r\n                        <div class=\"register-input\">\r\n                            <label>*设置用户id</label>\r\n                            <el-form-item prop=\"account\">\r\n                                <el-input type=\"text\" v-model=\"formData.account\"></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                        <div class=\"register-input\">\r\n                            <label>*设置用户名</label>\r\n                            <el-form-item prop=\"name\">\r\n                                <el-input type=\"text\" v-model=\"formData.name\"></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                        <div class=\"register-input\">\r\n                            <label>*设置密码</label>\r\n                            <el-form-item prop=\"password\">\r\n                                <el-input type=\"password\" v-model=\"formData.password\" show-password></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                        <div class=\"register-input\">\r\n                            <label>*确认密码</label>\r\n                            <el-form-item prop=\"confirmPassword\">\r\n                                <el-input type=\"password\" v-model=\"formData.confirmPassword\" show-password></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- 第二列 -->\r\n                    <div class=\"column\">\r\n                        <div class=\"register-input\">\r\n                            <label>设置手机号</label>\r\n                            <el-form-item prop=\"phone\">\r\n                                <el-input type=\"text\" v-model=\"formData.phone\"></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                        <div class=\"register-input\">\r\n                            <label>设置邮箱</label>\r\n                            <el-form-item prop=\"email\">\r\n                                <el-input type=\"text\" v-model=\"formData.email\"></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                        <div class=\"register-input\">\r\n                            <label>设置描述</label>\r\n                            <el-form-item prop=\"description\">\r\n                                <el-input type=\"textarea\" v-model=\"formData.description\" rows=\"4\" autosize></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <el-form-item>\r\n                    <button class=\"register-submit\" @click=\"register('formData')\">注册</button>\r\n                </el-form-item>\r\n            </el-form>\r\n            <!-- <a class=\"el-icon-back back-login\" @click=\"backLogin\"> 已有账号，点此登录</a> -->\r\n            <a class=\"el-icon-back back-guest\" @click=\"backGuest\"> 返回游客浏览</a>\r\n        </div>\r\n        <div class=\"overlay\" id=\"overlay\" style=\"display: none;\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            formData: {\r\n                account: '',            // 绑定到后端的 account 字段\r\n                name: '',               // 绑定到后端的 name 字段\r\n                phone: '',              // 绑定到后端的 phone 字段\r\n                email: '',              // 绑定到后端的 email 字段\r\n                description: '',        // 绑定到后端的 description 字段\r\n                password: '',           // 绑定到后端的 password 字段\r\n                confirmPassword: '',    // 用于确认密码匹配\r\n            },\r\n            rules: {\r\n                account: [\r\n                    { required: true, message: '用户名不能为空', trigger: 'blur' },\r\n                    { min: 6, message: '用户名至少需要6个字符', trigger: 'blur' },\r\n                    { pattern: /^[A-Za-z0-9_]{6,}$/, message: '用户名只允许字母、数字和下划线', trigger: 'blur' }\r\n                ],\r\n                name: [\r\n                    { required: true, message: '公司名称不能为空', trigger: 'blur' },\r\n                    { min: 3, message: '公司名称至少需要3个字符', trigger: 'blur' },\r\n                    { pattern: /^[A-Za-z0-9_\\u4e00-\\u9fa5]{3,}$/, message: '公司名称只允许字母、数字、下划线和中文字符', trigger: 'blur' }\r\n                ],\r\n                phone: [\r\n                    // { required: true, message: '手机号不能为空', trigger: 'blur' },\r\n                    { pattern: /^1[3-9]\\d{9}$/, message: '请输入有效的手机号', trigger: 'blur' }\r\n                ],\r\n                email: [\r\n                    // { required: true, message: '邮箱不能为空', trigger: 'blur' },\r\n                    { type: 'email', message: '请输入有效的邮箱地址', trigger: 'blur' }\r\n                ],\r\n                password: [\r\n                    { required: true, message: '密码不能为空', trigger: 'blur' },\r\n                    { min: 8, message: '密码至少需要8个字符', trigger: 'blur' },\r\n                    { pattern: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, message: '密码至少包含一个字母和一个数字，只能包含字母和数字，不能包含特殊字符', trigger: 'blur' }\r\n                ],\r\n                confirmPassword: [\r\n                    { required: true, message: '确认密码不能为空', trigger: 'blur' },\r\n                    {\r\n                        validator: (rule, value, callback) => {\r\n                            if (value !== this.formData.password) {\r\n                                callback(new Error('两次输入的密码不一致'));\r\n                            } else {\r\n                                callback();\r\n                            }\r\n                        }, \r\n                        trigger: 'blur'\r\n                    }\r\n                ],\r\n                description: [\r\n                    { max: 100, message: '描述不能超过100个字符', trigger: 'blur' }\r\n                ]\r\n            }\r\n        };\r\n    },\r\n    methods: {\r\n        async register(formName) {\r\n            this.$refs[formName].validate((valid) => {\r\n                if (valid) {\r\n                    document.getElementById('overlay').style.display = 'block';\r\n                    const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\r\n                    axios.post(`${apiBaseUrl}/register`, {\r\n                        account: this.formData.account,\r\n                        password: this.formData.password,\r\n                        repeat_password: this.formData.confirmPassword, // 传递确认密码以进行匹配验证\r\n                        name: this.formData.name,\r\n                        phone: this.formData.phone,\r\n                        email: this.formData.email,\r\n                        description: this.formData.description,\r\n                    })\r\n                    .then(res => {\r\n                        if (res.data.code === 200) {\r\n                            this.$message({\r\n                                showClose: true,\r\n                                message: '注册成功! 将在2秒后跳转至登陆页',\r\n                                type: 'success'\r\n                            });\r\n                            \r\n                            let self = this;\r\n                            setTimeout(() => {\r\n                                this.$emit('trigger-login'); \r\n                                self.$router.push('/intro');\r\n                            }, 5000);\r\n                        } else {\r\n                            this.$message({\r\n                                showClose: true,\r\n                                message: res.data.status,\r\n                                type: 'error'\r\n                            });\r\n                            document.getElementById('overlay').style.display = 'none';  // 确保overlay被隐藏\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        console.error('Error creating user:', error);\r\n                        this.$message({\r\n                            showClose: true,\r\n                            message: '注册失败，请稍后重试',\r\n                            type: 'error'\r\n                        });\r\n                    });\r\n                } else {\r\n                    console.log('error submit!!');\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        backLogin() {\r\n            this.$emit('trigger-login'); // 触发登录事件\r\n        },\r\n        backGuest() {\r\n            this.$router.push('/intro');\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 9999;\r\n    /* 确保覆盖在页面上方 */\r\n}\r\n\r\n.register-container {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    /* justify-content: center; */\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    min-width: 100vw;\r\n}\r\n\r\n.register-box {\r\n    margin-top: 100px;\r\n    width: 1200px;\r\n    height: 700px;\r\n    color: white;\r\n    /* background-color:rgba(255, 255, 255, 0.05); */\r\n    border: 2px solid rgba(255, 255, 255, 0.3);\r\n    border-radius: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding-top: 10px;\r\n    justify-content: center;\r\n}\r\n\r\n.register-text {\r\n    align-self:flex-start;\r\n    font-size: large;\r\n    text-align: left;\r\n    padding-top: 10px;\r\n    padding-left: 50px;\r\n    line-height: 35px;\r\n}\r\n\r\n.register-input {\r\n    display: flex;\r\n    width: 500px;\r\n    margin: 20px 0; /* 为每个输入框添加垂直间距 */\r\n}\r\n\r\n.register-columns {\r\n    display: flex; /* 将两列并排显示 */\r\n    justify-content: space-between; /* 在两列之间添加空间 */\r\n    width: 100%; /* 宽度为容器的100% */\r\n}\r\n\r\n.column {\r\n    flex: 1; /* 使每一列占据相等的空间 */\r\n    margin: 0 10px; /* 给列之间添加一些间距 */\r\n}\r\n\r\n.register-input input[type=\"textarea\"] {\r\n    width: 100%; /* 宽度为100% */\r\n    max-width: 100%; /* 最大宽度为100% */\r\n    resize: none; /* 禁止手动调整大小 */\r\n    word-break: break-all; /* 长字自动换行 */\r\n}\r\n\r\n.register-input label {\r\n    margin-top: 10px;\r\n    width: 160px;\r\n    font-size: 15px;\r\n    color: white;\r\n}\r\n\r\n.register-container .el-form-item {\r\n    width: 100%;\r\n    height: 40px;\r\n}\r\n\r\n.register-input input {\r\n    -webkit-text-fill-color: white;\r\n    width: 100%;\r\n    height: 40px;\r\n    background-color: transparent;\r\n    outline: none;\r\n    font-size: 1em;\r\n    color: white;\r\n}\r\n\r\ninput:-webkit-autofill {\r\n    transition: background-color 5000s ease-in-out 0s;\r\n}\r\n\r\n.register-submit {\r\n    width: 400px;\r\n    height: 40px;\r\n    background: #fff;\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 40px;\r\n    cursor: pointer;\r\n    font-size: 1em;\r\n    color: black;\r\n    font-weight: 500;\r\n}\r\n\r\n.register-submit:hover {\r\n    background: #ff5733;\r\n    /* color: #ff5733; */\r\n}\r\n\r\n/* .back-login {\r\n    position: absolute;\r\n    left: 34%;\r\n    top: 75%;\r\n    margin-top: 10px;\r\n    margin-right: 350px;\r\n    color: white;\r\n} */\r\n\r\n.back-guest {\r\n    position: absolute;\r\n    left: 13%;\r\n    top:14%;\r\n    margin-top: 10px;\r\n    margin-right: 350px;\r\n    color: rgb(255, 244, 94);\r\n    cursor: pointer;\r\n}\r\n\r\n.back-guest:hover {\r\n    color: #ff5733;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}