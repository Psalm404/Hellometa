{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { toHex } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { encodeTuple } from './base/index.js';\nimport { toAbiParams } from './utils.js';\n/**\n * @param params - The params to infer the ABI from\n * @returns The inferred ABI\n * @example\n * ```\n * inferParamsAbi([1, -1, 'hello', '0x1234', ])\n * ```\n * > [{ type: 'int256' }, { type: 'uint256' }, { type: 'string' }, { type: 'bytes' }]\n * ```\n */\nfunction inferParamsAbi(params) {\n  const abi = [];\n  params.forEach(param => {\n    if (Array.isArray(param)) {\n      const inferredParams = inferParamsAbi(param);\n      abi.push({\n        type: 'tuple',\n        components: inferredParams,\n        name: ''\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      });\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      abi.push({\n        type: toHex(param, true)\n      });\n    }\n  });\n  return abi;\n}\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\n * @param params - The actual parameters to encode.\n * @returns - The ABI encoded parameters\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"uint256\", \"string\"],\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport function encodeParameters(abi, params) {\n  if ((abi === null || abi === void 0 ? void 0 : abi.length) !== params.length) {\n    throw new AbiError('Invalid number of values received for given ABI', {\n      expected: abi === null || abi === void 0 ? void 0 : abi.length,\n      received: params.length\n    });\n  }\n  const abiParams = toAbiParams(abi);\n  return utils.uint8ArrayToHexString(encodeTuple({\n    type: 'tuple',\n    name: '',\n    components: abiParams\n  }, params).encoded);\n}\n/**\n * Infer a smart contract method parameter type and then encode this parameter.\n * @param params - The parameters to encode.\n * @returns - The ABI encoded parameters\n *\n * @remarks\n * This method is useful when you don't know the type of the parameters you want to encode. It will infer the type of the parameters and then encode them.\n * However, it is not recommended to use this method when you know the type of the parameters you want to encode. In this case, use the {@link encodeParameters} method instead.\n * The type inference is not perfect and can lead to unexpected results. Especially when you want to encode an array, uint that is not uint256 or bytes....\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport function inferTypesAndEncodeParameters(params) {\n  try {\n    const abiParams = inferParamsAbi(params);\n    return utils.uint8ArrayToHexString(encodeTuple({\n      type: 'tuple',\n      name: '',\n      components: abiParams\n    }, params).encoded);\n  } catch (e) {\n    // throws If the inferred params type caused an error\n    throw new AbiError('Could not infer types from given params', {\n      params\n    });\n  }\n}","map":{"version":3,"names":["AbiError","toHex","utils","encodeTuple","toAbiParams","inferParamsAbi","params","abi","forEach","param","Array","isArray","inferredParams","push","type","components","name","encodeParameters","length","expected","received","abiParams","uint8ArrayToHexString","encoded","inferTypesAndEncodeParameters","e"],"sources":["../../../src/coders/encode.ts"],"sourcesContent":[null],"mappings":";AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,WAAW,QAAQ,YAAY;AAExC;;;;;;;;;;AAUA,SAASC,cAAcA,CAACC,MAAiB;EACxC,MAAMC,GAAG,GAAmB,EAAE;EAC9BD,MAAM,CAACE,OAAO,CAACC,KAAK,IAAG;IACtB,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACzB,MAAMG,cAAc,GAAGP,cAAc,CAACI,KAAK,CAAC;MAC5CF,GAAG,CAACM,IAAI,CAAC;QACRC,IAAI,EAAE,OAAO;QACbC,UAAU,EAAEH,cAAc;QAC1BI,IAAI,EAAE;QACN;OACgB,CAAC;KAClB,MAAM;MACN;MACAT,GAAG,CAACM,IAAI,CAAC;QAAEC,IAAI,EAAEb,KAAK,CAACQ,KAAY,EAAE,IAAI;MAAC,CAAkB,CAAC;;EAE/D,CAAC,CAAC;EACF,OAAOF,GAAG;AACX;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUU,gBAAgBA,CAACV,GAA4B,EAAED,MAAiB;EAC/E,IAAI,CAAAC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEW,MAAM,MAAKZ,MAAM,CAACY,MAAM,EAAE;IAClC,MAAM,IAAIlB,QAAQ,CAAC,iDAAiD,EAAE;MACrEmB,QAAQ,EAAEZ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEW,MAAM;MACrBE,QAAQ,EAAEd,MAAM,CAACY;KACjB,CAAC;;EAGH,MAAMG,SAAS,GAAGjB,WAAW,CAACG,GAAG,CAAC;EAClC,OAAOL,KAAK,CAACoB,qBAAqB,CACjCnB,WAAW,CAAC;IAAEW,IAAI,EAAE,OAAO;IAAEE,IAAI,EAAE,EAAE;IAAED,UAAU,EAAEM;EAAS,CAAE,EAAEf,MAAM,CAAC,CAACiB,OAAO,CAC/E;AACF;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUC,6BAA6BA,CAAClB,MAAiB;EAC9D,IAAI;IACH,MAAMe,SAAS,GAAGhB,cAAc,CAACC,MAAM,CAAC;IACxC,OAAOJ,KAAK,CAACoB,qBAAqB,CACjCnB,WAAW,CAAC;MAAEW,IAAI,EAAE,OAAO;MAAEE,IAAI,EAAE,EAAE;MAAED,UAAU,EAAEM;IAAS,CAAE,EAAEf,MAAM,CAAC,CAACiB,OAAO,CAC/E;GACD,CAAC,OAAOE,CAAC,EAAE;IACX;IACA,MAAM,IAAIzB,QAAQ,CAAC,yCAAyC,EAAE;MAC7DM;KACA,CAAC;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}