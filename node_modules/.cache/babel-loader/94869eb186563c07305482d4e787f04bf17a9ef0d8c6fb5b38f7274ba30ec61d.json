{"ast":null,"code":"/*\r\ngetURLbyTokenId.js提供根据TokenId查询对应的URL方法\r\n函数一个传参：uint256 所需要查询的TokenId\r\n函数返回一个字符串：URL string TokenId所对应的URL\r\n*/\n\nimport contract from './contract';\nasync function getURLbyTokenId(tokenId) {\n  try {\n    if (!contract) {\n      console.error('合约实例尚未初始化');\n      return null;\n    }\n\n    // 调用合约的getURLbyTokenId函数\n    const URL = await contract.methods.getURLbyTokenId(tokenId).call();\n    return URL;\n  } catch (error) {\n    console.error('根据代币ID查询URL失败', error);\n    return null;\n  }\n}\nexport default getURLbyTokenId;","map":{"version":3,"names":["contract","getURLbyTokenId","tokenId","console","error","URL","methods","call"],"sources":["D:/my-repo/hellometa/src/commons/getURLbyTokenId.js"],"sourcesContent":["/*\r\ngetURLbyTokenId.js提供根据TokenId查询对应的URL方法\r\n函数一个传参：uint256 所需要查询的TokenId\r\n函数返回一个字符串：URL string TokenId所对应的URL\r\n*/\r\n\r\nimport contract from './contract';\r\n\r\nasync function getURLbyTokenId(tokenId) {\r\n    try {\r\n        if (!contract) {\r\n            console.error('合约实例尚未初始化');\r\n            return null;\r\n        }\r\n\r\n        // 调用合约的getURLbyTokenId函数\r\n        const URL = await contract.methods.getURLbyTokenId(tokenId).call();\r\n        return URL;\r\n    } catch (error) {\r\n        console.error('根据代币ID查询URL失败', error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default getURLbyTokenId;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,QAAQ,MAAM,YAAY;AAEjC,eAAeC,eAAeA,CAACC,OAAO,EAAE;EACpC,IAAI;IACA,IAAI,CAACF,QAAQ,EAAE;MACXG,OAAO,CAACC,KAAK,CAAC,WAAW,CAAC;MAC1B,OAAO,IAAI;IACf;;IAEA;IACA,MAAMC,GAAG,GAAG,MAAML,QAAQ,CAACM,OAAO,CAACL,eAAe,CAACC,OAAO,CAAC,CAACK,IAAI,CAAC,CAAC;IAClE,OAAOF,GAAG;EACd,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,OAAO,IAAI;EACf;AACJ;AAEA,eAAeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}