{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { decodeParameter, decodeParametersWith } from './parameters_api.js';\nconst STATIC_TYPES = ['bool', 'string', 'int', 'uint', 'address', 'fixed', 'ufixed'];\nconst _decodeParameter = (inputType, clonedTopic) => inputType === 'string' ? clonedTopic : decodeParameter(inputType, clonedTopic);\n/**\n * Decodes ABI-encoded log data and indexed topic data.\n * @param inputs - A {@link AbiParameter} input array. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param data - The ABI byte code in the `data` field of a log.\n * @param topics - An array with the index parameter topics of the log, without the topic[0] if its a non-anonymous event, otherwise with topic[0]\n * @returns - The result object containing the decoded parameters.\n *\n * @example\n * ```ts\n * let res = web3.eth.abi.decodeLog(\n *    [\n *      {\n *        type: \"string\",\n *        name: \"myString\",\n *      },\n *      {\n *        type: \"uint256\",\n *        name: \"myNumber\",\n *        indexed: true,\n *      },\n *      {\n *        type: \"uint8\",\n *        name: \"mySmallNumber\",\n *        indexed: true,\n *      },\n *    ],\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000\",\n *    [\n *      \"0x000000000000000000000000000000000000000000000000000000000000f310\",\n *      \"0x0000000000000000000000000000000000000000000000000000000000000010\",\n *    ]\n *  );\n * > {\n *  '0': 'Hello%!',\n *  '1': 62224n,\n *  '2': 16n,\n *  __length__: 3,\n *  myString: 'Hello%!',\n *  myNumber: 62224n,\n *  mySmallNumber: 16n\n * }\n * ```\n */\nexport const decodeLog = (inputs, data, topics) => {\n  const clonedTopics = Array.isArray(topics) ? topics : [topics];\n  const indexedInputs = {};\n  const nonIndexedInputs = {};\n  for (const [i, input] of inputs.entries()) {\n    if (input.indexed) {\n      indexedInputs[i] = input;\n    } else {\n      nonIndexedInputs[i] = input;\n    }\n  }\n  const decodedNonIndexedInputs = data ? decodeParametersWith(Object.values(nonIndexedInputs), data, true) : {\n    __length__: 0\n  };\n  // If topics are more than indexed inputs, that means first topic is the event signature\n  const offset = clonedTopics.length - Object.keys(indexedInputs).length;\n  const decodedIndexedInputs = Object.values(indexedInputs).map((input, index) => STATIC_TYPES.some(s => input.type.startsWith(s)) ? _decodeParameter(input.type, clonedTopics[index + offset]) : clonedTopics[index + offset]);\n  const returnValues = {\n    __length__: 0\n  };\n  let indexedCounter = 0;\n  let nonIndexedCounter = 0;\n  for (const [i, res] of inputs.entries()) {\n    returnValues[i] = res.type === 'string' ? '' : undefined;\n    if (indexedInputs[i]) {\n      returnValues[i] = decodedIndexedInputs[indexedCounter];\n      indexedCounter += 1;\n    }\n    if (nonIndexedInputs[i]) {\n      returnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];\n      nonIndexedCounter += 1;\n    }\n    if (res.name) {\n      returnValues[res.name] = returnValues[i];\n    }\n    returnValues.__length__ += 1;\n  }\n  return returnValues;\n};","map":{"version":3,"names":["decodeParameter","decodeParametersWith","STATIC_TYPES","_decodeParameter","inputType","clonedTopic","decodeLog","inputs","data","topics","clonedTopics","Array","isArray","indexedInputs","nonIndexedInputs","i","input","entries","indexed","decodedNonIndexedInputs","Object","values","__length__","offset","length","keys","decodedIndexedInputs","map","index","some","s","type","startsWith","returnValues","indexedCounter","nonIndexedCounter","res","undefined","String","name"],"sources":["../../../src/api/logs_api.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;AAuBA,SAASA,eAAe,EAAEC,oBAAoB,QAAQ,qBAAqB;AAE3E,MAAMC,YAAY,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;AAEpF,MAAMC,gBAAgB,GAAGA,CAACC,SAAiB,EAAEC,WAAmB,KAC/DD,SAAS,KAAK,QAAQ,GAAGC,WAAW,GAAGL,eAAe,CAACI,SAAS,EAAEC,WAAW,CAAC;AAE/E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,OAAO,MAAMC,SAAS,GAAGA,CACxBC,MAA2B,EAC3BC,IAAe,EACfC,MAAyB,KACtB;EACH,MAAMC,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC;EAE9D,MAAMI,aAAa,GAAiC,EAAE;EACtD,MAAMC,gBAAgB,GAAiC,EAAE;EAEzD,KAAK,MAAM,CAACC,CAAC,EAAEC,KAAK,CAAC,IAAIT,MAAM,CAACU,OAAO,EAAE,EAAE;IAC1C,IAAID,KAAK,CAACE,OAAO,EAAE;MAClBL,aAAa,CAACE,CAAC,CAAC,GAAGC,KAAK;KACxB,MAAM;MACNF,gBAAgB,CAACC,CAAC,CAAC,GAAGC,KAAK;;;EAI7B,MAAMG,uBAAuB,GAAkBX,IAAI,GAChDP,oBAAoB,CAACmB,MAAM,CAACC,MAAM,CAACP,gBAAgB,CAAC,EAAEN,IAAI,EAAE,IAAI,CAAC,GACjE;IAAEc,UAAU,EAAE;EAAC,CAAE;EAEpB;EACA,MAAMC,MAAM,GAAGb,YAAY,CAACc,MAAM,GAAGJ,MAAM,CAACK,IAAI,CAACZ,aAAa,CAAC,CAACW,MAAM;EAEtE,MAAME,oBAAoB,GAAGN,MAAM,CAACC,MAAM,CAACR,aAAa,CAAC,CAACc,GAAG,CAAC,CAACX,KAAK,EAAEY,KAAK,KAC1E1B,YAAY,CAAC2B,IAAI,CAACC,CAAC,IAAId,KAAK,CAACe,IAAI,CAACC,UAAU,CAACF,CAAC,CAAC,CAAC,GAC7C3B,gBAAgB,CAACa,KAAK,CAACe,IAAI,EAAErB,YAAY,CAACkB,KAAK,GAAGL,MAAM,CAAC,CAAC,GAC1Db,YAAY,CAACkB,KAAK,GAAGL,MAAM,CAAC,CAC/B;EAED,MAAMU,YAAY,GAAkB;IAAEX,UAAU,EAAE;EAAC,CAAE;EAErD,IAAIY,cAAc,GAAG,CAAC;EACtB,IAAIC,iBAAiB,GAAG,CAAC;EAEzB,KAAK,MAAM,CAACpB,CAAC,EAAEqB,GAAG,CAAC,IAAI7B,MAAM,CAACU,OAAO,EAAE,EAAE;IACxCgB,YAAY,CAAClB,CAAC,CAAC,GAAGqB,GAAG,CAACL,IAAI,KAAK,QAAQ,GAAG,EAAE,GAAGM,SAAS;IAExD,IAAIxB,aAAa,CAACE,CAAC,CAAC,EAAE;MACrBkB,YAAY,CAAClB,CAAC,CAAC,GAAGW,oBAAoB,CAACQ,cAAc,CAAC;MACtDA,cAAc,IAAI,CAAC;;IAGpB,IAAIpB,gBAAgB,CAACC,CAAC,CAAC,EAAE;MACxBkB,YAAY,CAAClB,CAAC,CAAC,GAAGI,uBAAuB,CAACmB,MAAM,CAACH,iBAAiB,CAAC,CAAC;MACpEA,iBAAiB,IAAI,CAAC;;IAGvB,IAAIC,GAAG,CAACG,IAAI,EAAE;MACbN,YAAY,CAACG,GAAG,CAACG,IAAI,CAAC,GAAGN,YAAY,CAAClB,CAAC,CAAC;;IAGzCkB,YAAY,CAACX,UAAU,IAAI,CAAC;;EAG7B,OAAOW,YAA0B;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}