{"ast":null,"code":"import { pbkdf2 as _pbkdf2, pbkdf2Async as _pbkdf2Async } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { assertBytes } from \"./utils.js\";\nexport async function pbkdf2(password, salt, iterations, keylen, digest) {\n  if (![\"sha256\", \"sha512\"].includes(digest)) {\n    throw new Error(\"Only sha256 and sha512 are supported\");\n  }\n  assertBytes(password);\n  assertBytes(salt);\n  return _pbkdf2Async(digest === \"sha256\" ? sha256 : sha512, password, salt, {\n    c: iterations,\n    dkLen: keylen\n  });\n}\nexport function pbkdf2Sync(password, salt, iterations, keylen, digest) {\n  if (![\"sha256\", \"sha512\"].includes(digest)) {\n    throw new Error(\"Only sha256 and sha512 are supported\");\n  }\n  assertBytes(password);\n  assertBytes(salt);\n  return _pbkdf2(digest === \"sha256\" ? sha256 : sha512, password, salt, {\n    c: iterations,\n    dkLen: keylen\n  });\n}","map":{"version":3,"names":["pbkdf2","_pbkdf2","pbkdf2Async","_pbkdf2Async","sha256","sha512","assertBytes","password","salt","iterations","keylen","digest","includes","Error","c","dkLen","pbkdf2Sync"],"sources":["D:/my-repo/hellometa-new/node_modules/ethereum-cryptography/esm/pbkdf2.js"],"sourcesContent":["import { pbkdf2 as _pbkdf2, pbkdf2Async as _pbkdf2Async } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { assertBytes } from \"./utils.js\";\nexport async function pbkdf2(password, salt, iterations, keylen, digest) {\n    if (![\"sha256\", \"sha512\"].includes(digest)) {\n        throw new Error(\"Only sha256 and sha512 are supported\");\n    }\n    assertBytes(password);\n    assertBytes(salt);\n    return _pbkdf2Async(digest === \"sha256\" ? sha256 : sha512, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\nexport function pbkdf2Sync(password, salt, iterations, keylen, digest) {\n    if (![\"sha256\", \"sha512\"].includes(digest)) {\n        throw new Error(\"Only sha256 and sha512 are supported\");\n    }\n    assertBytes(password);\n    assertBytes(salt);\n    return _pbkdf2(digest === \"sha256\" ? sha256 : sha512, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\n"],"mappings":"AAAA,SAASA,MAAM,IAAIC,OAAO,EAAEC,WAAW,IAAIC,YAAY,QAAQ,sBAAsB;AACrF,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAO,eAAeN,MAAMA,CAACO,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAE;EACrE,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,MAAM,CAAC,EAAE;IACxC,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;EAC3D;EACAP,WAAW,CAACC,QAAQ,CAAC;EACrBD,WAAW,CAACE,IAAI,CAAC;EACjB,OAAOL,YAAY,CAACQ,MAAM,KAAK,QAAQ,GAAGP,MAAM,GAAGC,MAAM,EAAEE,QAAQ,EAAEC,IAAI,EAAE;IACvEM,CAAC,EAAEL,UAAU;IACbM,KAAK,EAAEL;EACX,CAAC,CAAC;AACN;AACA,OAAO,SAASM,UAAUA,CAACT,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAE;EACnE,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,MAAM,CAAC,EAAE;IACxC,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;EAC3D;EACAP,WAAW,CAACC,QAAQ,CAAC;EACrBD,WAAW,CAACE,IAAI,CAAC;EACjB,OAAOP,OAAO,CAACU,MAAM,KAAK,QAAQ,GAAGP,MAAM,GAAGC,MAAM,EAAEE,QAAQ,EAAEC,IAAI,EAAE;IAClEM,CAAC,EAAEL,UAAU;IACbM,KAAK,EAAEL;EACX,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}