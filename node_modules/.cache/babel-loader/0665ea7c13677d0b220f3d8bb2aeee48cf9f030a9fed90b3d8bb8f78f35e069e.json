{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { padLeft, toBigInt } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { WORD_SIZE } from '../utils.js';\nimport { numberLimits } from './numbersLimits.js';\n// eslint-disable-next-line no-bitwise\nconst mask = BigInt(1) << BigInt(256);\nfunction bigIntToUint8Array(value, byteLength = WORD_SIZE) {\n  let hexValue;\n  if (value < 0) {\n    hexValue = (mask + value).toString(16);\n  } else {\n    hexValue = value.toString(16);\n  }\n  hexValue = padLeft(hexValue, byteLength * 2);\n  return utils.hexToUint8Array(hexValue);\n}\nfunction uint8ArrayToBigInt(value, max) {\n  const hexValue = utils.uint8ArrayToHexString(value);\n  const result = BigInt(hexValue);\n  if (result <= max) return result;\n  return result - mask;\n}\nexport function encodeNumber(param, input) {\n  let value;\n  try {\n    value = toBigInt(input);\n  } catch (e) {\n    throw new AbiError('provided input is not number value', {\n      type: param.type,\n      value: input,\n      name: param.name\n    });\n  }\n  const limit = numberLimits.get(param.type);\n  if (!limit) {\n    throw new AbiError('provided abi contains invalid number datatype', {\n      type: param.type\n    });\n  }\n  if (value < limit.min) {\n    throw new AbiError('provided input is less then minimum for given type', {\n      type: param.type,\n      value: input,\n      name: param.name,\n      minimum: limit.min.toString()\n    });\n  }\n  if (value > limit.max) {\n    throw new AbiError('provided input is greater then maximum for given type', {\n      type: param.type,\n      value: input,\n      name: param.name,\n      maximum: limit.max.toString()\n    });\n  }\n  return {\n    dynamic: false,\n    encoded: bigIntToUint8Array(value)\n  };\n}\nexport function decodeNumber(param, bytes) {\n  if (bytes.length < WORD_SIZE) {\n    throw new AbiError('Not enough bytes left to decode', {\n      param,\n      bytesLeft: bytes.length\n    });\n  }\n  const boolBytes = bytes.subarray(0, WORD_SIZE);\n  const limit = numberLimits.get(param.type);\n  if (!limit) {\n    throw new AbiError('provided abi contains invalid number datatype', {\n      type: param.type\n    });\n  }\n  const numberResult = uint8ArrayToBigInt(boolBytes, limit.max);\n  if (numberResult < limit.min) {\n    throw new AbiError('decoded value is less then minimum for given type', {\n      type: param.type,\n      value: numberResult,\n      name: param.name,\n      minimum: limit.min.toString()\n    });\n  }\n  if (numberResult > limit.max) {\n    throw new AbiError('decoded value is greater then maximum for given type', {\n      type: param.type,\n      value: numberResult,\n      name: param.name,\n      maximum: limit.max.toString()\n    });\n  }\n  return {\n    result: numberResult,\n    encoded: bytes.subarray(WORD_SIZE),\n    consumed: WORD_SIZE\n  };\n}","map":{"version":3,"names":["AbiError","padLeft","toBigInt","utils","WORD_SIZE","numberLimits","mask","BigInt","bigIntToUint8Array","value","byteLength","hexValue","toString","hexToUint8Array","uint8ArrayToBigInt","max","uint8ArrayToHexString","result","encodeNumber","param","input","e","type","name","limit","get","min","minimum","maximum","dynamic","encoded","decodeNumber","bytes","length","bytesLeft","boolBytes","subarray","numberResult","consumed"],"sources":["../../../../src/coders/base/number.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}