{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { rejectIfTimeout } from 'web3-utils';\nimport { TransactionSendTimeoutError } from 'web3-errors';\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n/**\n * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.\n * @param web3Context - the context to read the configurations from\n * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)\n * @param transactionHash - to be used inside the exception message if there will be any exceptions.\n * @returns the Promise<string> returned by the `sendTransactionFunc`.\n */\nexport function trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionSendTimeout, new TransactionSendTimeoutError({\n      numberOfSeconds: web3Context.transactionSendTimeout / 1000,\n      transactionHash\n    }));\n    const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);\n    try {\n      // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n      return yield Promise.race([sendTransactionFunc(), rejectOnTimeout, rejectOnBlockTimeout // this will throw an error on Transaction Block Timeout\n      ]);\n    } finally {\n      clearTimeout(timeoutId);\n      blockTimeoutResourceCleaner.clean();\n    }\n  });\n}","map":{"version":3,"names":["rejectIfTimeout","TransactionSendTimeoutError","rejectIfBlockTimeout","trySendTransaction","web3Context","sendTransactionFunc","transactionHash","timeoutId","rejectOnTimeout","transactionSendTimeout","numberOfSeconds","rejectOnBlockTimeout","blockTimeoutResourceCleaner","Promise","race","clearTimeout","clean"],"sources":["../../../src/utils/try_send_transaction.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAwBA,eAAe,QAAQ,YAAY;AAC3D,SAASC,2BAA2B,QAAQ,aAAa;AAEzD;AACA,SAASC,oBAAoB,QAAQ,8BAA8B;AAEnE;;;;;;;AAOA,OAAM,SAAgBC,kBAAkBA,CACvCC,WAAyC,EACzCC,mBAA0C,EAC1CC,eAAuB;;IAEvB,MAAM,CAACC,SAAS,EAAEC,eAAe,CAAC,GAAGR,eAAe,CACnDI,WAAW,CAACK,sBAAsB,EAClC,IAAIR,2BAA2B,CAAC;MAC/BS,eAAe,EAAEN,WAAW,CAACK,sBAAsB,GAAG,IAAI;MAC1DH;KACA,CAAC,CACF;IAED,MAAM,CAACK,oBAAoB,EAAEC,2BAA2B,CAAC,GAAG,MAAMV,oBAAoB,CACrFE,WAAW,EACXE,eAAe,CACf;IAED,IAAI;MACH;MACA,OAAO,MAAMO,OAAO,CAACC,IAAI,CAAC,CACzBT,mBAAmB,EAAE,EACrBG,eAAe,EACfG,oBAAoB,CAAE;MAAA,CACtB,CAAC;KACF,SAAS;MACTI,YAAY,CAACR,SAAS,CAAC;MACvBK,2BAA2B,CAACI,KAAK,EAAE;;EAErC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}