{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 这里先从 exhibitWorks 中拿到当前 nft 的 url\n// 然后导入 pinata 的解析url函数，拿到一个 json \n// 这个 json 文件包含了 picUrl、workCreateTime、workName、workType、workDesc\n// workCreator 可以通过调用 ownerOfURL 获取这个账户的地址\n\n// 引入 axios 用于 HTTP 请求\nimport axios from 'axios';\n// import getTransactionHash from '@/commons/getTransactionHash';\nimport getTokenIdbyURL from '@/commons/getTokenIdbyURL';\nimport getTokenPrice from '@/commons/getTokenPrice';\nimport buyToken from '@/commons/buyToken';\nimport updateTokenPrice from '@/commons/updateTokenPrice';\nexport default {\n  mounted() {\n    // 在组件创建时获取路由参数\n    this.fileURL = this.$route.query.jsonURL;\n    setTimeout(() => {\n      this.show = true;\n      this.fetchNFTData();\n    }, 100);\n  },\n  data() {\n    return {\n      show: false,\n      fileURL: \"\",\n      picUrl: \"\",\n      // 默认图片，加载完成后会被替换\n      workHashValue: '',\n      // 哈希值是从 exhibitWorks 中获取的\n      workCreateTime: '',\n      workCreator: '',\n      workName: '',\n      workType: '',\n      workDesc: '',\n      workTokenID: '',\n      workIsOnMarket: 0,\n      workPrice: null,\n      workUrl: \"\"\n    };\n  },\n  methods: {\n    async buyNFT() {\n      try {\n        let txHash = await buyToken(this.workTokenID, this.workPrice);\n        let transaction = await updateTokenPrice(this.workTokenID, 0);\n        console.log(\"transaction\", transaction);\n        if (txHash) {\n          this.$message({\n            type: 'success',\n            message: '购买成功!'\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async fetchJson(jsonURL) {\n      try {\n        let response = await axios.get(jsonURL);\n        let jsonData = response.data;\n        this.workCreateTime = new Date(jsonData.timestamp);\n        console.log(\"workCreateTime\", this.workCreateTime);\n        this.workName = jsonData.name;\n        this.workType = jsonData.type;\n        this.workDesc = jsonData.desc;\n        this.workTokenId = await getTokenIdbyURL(jsonURL);\n        this.workPrice = await getTokenPrice(this.workTokenID);\n        console.log(this.workTokenId);\n        this.picUrl = jsonData.image;\n        if (jsonData.type == 'txt') {\n          this.workType = '文本';\n          this.workUrl = require('@/assets/text.png');\n        } else {\n          this.workType = '图片';\n          this.workUrl = this.picUrl;\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    backToRecord() {\n      this.$router.push('/exhibitWorks');\n    },\n    async fetchNFTData() {\n      try {\n        this.workTokenID = await getTokenIdbyURL(this.fileURL);\n        const nftData = await this.fetchFromPinata(this.fileURL);\n        this.picUrl = nftData.image;\n        this.workCreateTime = new Date().toLocaleString();\n        this.workName = nftData.name;\n        this.workType = nftData.type === 'txt' ? '文本' : '图片';\n        this.workDesc = nftData.desc;\n        this.workCreator = nftData.creator;\n        this.workPrice = await getTokenPrice(this.workTokenID);\n        console.log('this.fileURL:' + this.fileURL);\n        const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\n        const response = await axios.get(`${apiBaseUrl}/getTxHashByTokenURI`, {\n          params: {\n            tokenURI: this.fileURL\n          }\n        });\n        if (response.data.code === 200) {\n          this.workHashValue = response.data.txHash;\n        } else {\n          console.error('Error fetching txHash:', response.data);\n          this.workHashValue = '获取交易哈希失败';\n        }\n      } catch (error) {\n        console.error('Error fetching NFT data:', error);\n      }\n    },\n    async fetchFromPinata(url) {\n      // 使用 axios 获取 JSON 数据\n      const response = await axios.get(url);\n      return response.data;\n    }\n  }\n};","map":{"version":3,"names":["axios","getTokenIdbyURL","getTokenPrice","buyToken","updateTokenPrice","mounted","fileURL","$route","query","jsonURL","setTimeout","show","fetchNFTData","data","picUrl","workHashValue","workCreateTime","workCreator","workName","workType","workDesc","workTokenID","workIsOnMarket","workPrice","workUrl","methods","buyNFT","txHash","transaction","console","log","$message","type","message","error","fetchJson","response","get","jsonData","Date","timestamp","name","desc","workTokenId","image","require","e","backToRecord","$router","push","nftData","fetchFromPinata","toLocaleString","creator","apiBaseUrl","process","env","VUE_APP_BACKEND_BASE_URL","params","tokenURI","code","url"],"sources":["src/components/workInfo.vue"],"sourcesContent":["<template>\r\n<div class=\"container\">\r\n    <transition name=\"el-fade-in-linear\">\r\n        <div class=\"content\" v-show=\"show\">\r\n            <div class=\"detail-box\">\r\n                <div class=\"detail-box-top\">\r\n                    <div class=\"detail-box-top-left\">\r\n                        <div class=\"record-picture\">\r\n                            <el-avatar shape=\"square\" :size=\"220\" :src=\"picUrl\"></el-avatar>\r\n                        </div>\r\n                        <div class=\"price-box\">\r\n                            售价：{{workPrice}} eth\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"detail-box-top-right\">\r\n                        <div class=\"work-name\">\r\n                            <span style=\"font-weight: bolder;\">作品名称:</span>\r\n                            <span style=\" display: block; align-self: self-start\">{{workName}}</span>\r\n                        </div>\r\n                        <div class=\"work-type\">\r\n                            <span style=\"font-weight: bolder;\">作品类别:</span>\r\n                            <span>{{workType}}</span>\r\n                        </div>\r\n                        <div class=\"work-describe\">\r\n                            <span style=\"font-weight: bolder;\">\r\n                                作品介绍:\r\n                            </span>\r\n                            <span style=\"display: block\">{{ workDesc }}</span>\r\n                        </div>\r\n                        <div class=\"work-creator\">\r\n                            <span style=\"font-weight: bolder;\">\r\n                                作者名称:\r\n                            </span>\r\n                            <span style=\"display: block\">{{ workCreator }}</span>\r\n                        </div>\r\n                        <div class=\"work-createtime\">\r\n                            <span style=\"font-weight: bolder;\">\r\n                                创建时间:\r\n                            </span>\r\n                            <span style=\"display: block\">{{ workCreateTime }}</span>\r\n                        </div>\r\n                        <div class=\"work-tokenID\">\r\n                            <span style=\"font-weight: bolder;\">\r\n                                tokenId:\r\n                            </span>\r\n                            <span style=\"display: block\">{{ workTokenID }}</span>\r\n                        </div>\r\n                        <div class=\"work-hashvalue\">\r\n                            <span style=\"font-weight: bolder;\">\r\n                                Transaction Hash:\r\n                            </span>\r\n                            <span style=\"display: block\">{{ workHashValue }}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"detail-box-bottom\">\r\n                    <div>\r\n                        <button @click=\"buyNFT\"> 购买 </button>\r\n                    </div>\r\n                    <div class=\"back-button\">\r\n                        <button @click=\"backToRecord\"> 返回 </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"cool-text\">DETAILS</div>\r\n        </div>\r\n    </transition>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n// 这里先从 exhibitWorks 中拿到当前 nft 的 url\r\n// 然后导入 pinata 的解析url函数，拿到一个 json \r\n// 这个 json 文件包含了 picUrl、workCreateTime、workName、workType、workDesc\r\n// workCreator 可以通过调用 ownerOfURL 获取这个账户的地址\r\n\r\n// 引入 axios 用于 HTTP 请求\r\nimport axios from 'axios';\r\n// import getTransactionHash from '@/commons/getTransactionHash';\r\nimport getTokenIdbyURL from '@/commons/getTokenIdbyURL';\r\nimport getTokenPrice from '@/commons/getTokenPrice';\r\nimport buyToken from '@/commons/buyToken';\r\nimport updateTokenPrice from '@/commons/updateTokenPrice';\r\nexport default {\r\n    mounted() {\r\n        // 在组件创建时获取路由参数\r\n        this.fileURL = this.$route.query.jsonURL;\r\n        setTimeout(() => {\r\n            this.show = true;\r\n            this.fetchNFTData();\r\n        }, 100)\r\n    },\r\n    data() {\r\n        return {\r\n            show: false,\r\n            fileURL: \"\",\r\n            picUrl: \"\", // 默认图片，加载完成后会被替换\r\n            workHashValue: '', // 哈希值是从 exhibitWorks 中获取的\r\n            workCreateTime: '',\r\n            workCreator: '',\r\n            workName: '',\r\n            workType: '',\r\n            workDesc: '',\r\n            workTokenID: '',\r\n            workIsOnMarket: 0,\r\n            workPrice: null,\r\n            workUrl:\"\",\r\n        }\r\n    },\r\n    methods: {\r\n        async buyNFT() {\r\n            try {\r\n                let txHash = await buyToken(this.workTokenID, this.workPrice);\r\n                let transaction = await updateTokenPrice(this.workTokenID, 0);\r\n\r\n                console.log(\"transaction\", transaction);\r\n                if (txHash) {\r\n                    this.$message({\r\n                        type: 'success',\r\n                        message: '购买成功!'\r\n                    });\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n\r\n        },\r\n        async fetchJson(jsonURL) {\r\n            try {\r\n                let response = await axios.get(jsonURL)\r\n                let jsonData = response.data\r\n                this.workCreateTime = new Date(jsonData.timestamp)\r\n                console.log(\"workCreateTime\", this.workCreateTime)\r\n                this.workName = jsonData.name\r\n                this.workType = jsonData.type\r\n                this.workDesc = jsonData.desc\r\n                this.workTokenId = await getTokenIdbyURL(jsonURL)\r\n                this.workPrice = await getTokenPrice(this.workTokenID)\r\n                console.log(this.workTokenId)\r\n                this.picUrl = jsonData.image\r\n                if (jsonData.type == 'txt') {\r\n                    this.workType = '文本'\r\n                    this.workUrl = require('@/assets/text.png')\r\n                }else{\r\n                     this.workType = '图片'\r\n                     this.workUrl = this.picUrl\r\n                }\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n           \r\n\r\n        },\r\n        backToRecord() {\r\n            this.$router.push('/exhibitWorks');\r\n        },\r\n        async fetchNFTData() {\r\n            try {\r\n                this.workTokenID = await getTokenIdbyURL(this.fileURL);\r\n\r\n                const nftData = await this.fetchFromPinata(this.fileURL);\r\n\r\n                this.picUrl = nftData.image;\r\n                this.workCreateTime = new Date().toLocaleString();\r\n                this.workName = nftData.name;\r\n                this.workType = nftData.type === 'txt' ? '文本' : '图片';\r\n                this.workDesc = nftData.desc;\r\n                this.workCreator = nftData.creator;\r\n                this.workPrice = await getTokenPrice(this.workTokenID);\r\n\r\n                console.log('this.fileURL:'+this.fileURL);\r\n                const apiBaseUrl = process.env.VUE_APP_BACKEND_BASE_URL;\r\n                const response = await axios.get(`${apiBaseUrl}/getTxHashByTokenURI`, {\r\n                    params: { tokenURI: this.fileURL }\r\n                });\r\n\r\n                if (response.data.code === 200) {\r\n                    this.workHashValue = response.data.txHash;\r\n                } else {\r\n                    console.error('Error fetching txHash:', response.data);\r\n                    this.workHashValue = '获取交易哈希失败';\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching NFT data:', error);\r\n            }\r\n        },\r\n        async fetchFromPinata(url) {\r\n            // 使用 axios 获取 JSON 数据\r\n            const response = await axios.get(url);\r\n            return response.data;\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.container {\r\n    max-height: 100vh;\r\n    overflow: hidden;\r\n    width: 100vw;\r\n}\r\n\r\n.content {\r\n    max-width: 90%;\r\n    height: 100%;\r\n    margin-left: 10%;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.detail-box {\r\n    margin: 60px 60px;\r\n    background-color: #303030;\r\n    box-shadow: 0px 4px 15px #000000;\r\n    height: 80vh;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: relative;\r\n    z-index: 1;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.work-name,\r\n.work-type,\r\n.work-describe,\r\n.work-createtime,\r\n.work-tokenID,\r\n.work-hashvalue,\r\n.work-creator {\r\n    text-align: left;\r\n}\r\n\r\n.detail-box-top {\r\n    flex: 9;\r\n    width: 100%;\r\n    display: flex;\r\n    margin-top: 50px;\r\n    /* border:1px solid red; */\r\n}\r\n\r\n.detail-box-top-left {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.price-box {\r\n    text-align: center;\r\n    /* border:1px solid red; */\r\n    margin-top: 40px;\r\n    flex: 1;\r\n    color: #9c9c9c;\r\n}\r\n\r\n.work-download {\r\n    margin-top: 30px;\r\n}\r\n\r\n.work-download button {\r\n    margin: auto;\r\n    flex: 1;\r\n    border: 1px solid #9c9c9c;\r\n    cursor: pointer;\r\n    width: 180px;\r\n    color: #9c9c9c;\r\n    background-color: transparent;\r\n    border-radius: 5px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n}\r\n\r\n.work-download button:hover {\r\n    border: 1px solid rgba(255, 87, 51, 1);\r\n    color: rgba(255, 87, 51, 1);\r\n}\r\n\r\n.detail-box-top-right {\r\n    flex: 2;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    align-items: self-start;\r\n    margin-right: 30px;\r\n    font-size: 17px;\r\n}\r\n\r\n.detail-box-top-right .data-describe {\r\n    flex: 6;\r\n    margin-right: 30px;\r\n}\r\n\r\n.detail-box-top-right .data-select {\r\n    flex: 2;\r\n\r\n}\r\n\r\n.detail-box-bottom {\r\n    flex: 2;\r\n    /* border:1px solid green; */\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    /* border: 1px solid red; */\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 200px;\r\n}\r\n\r\n.detail-box-bottom button {\r\n    margin: auto;\r\n    flex: 1;\r\n    border: 1px solid rgba(255, 87, 51, 1);\r\n    cursor: pointer;\r\n    width: 180px;\r\n    color: rgba(255, 87, 51, 0.8);\r\n    background-color: transparent;\r\n    border-radius: 5px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}