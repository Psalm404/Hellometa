{"ast":null,"code":"import \"core-js/modules/web.immediate.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport { accountSchema, blockSchema, feeHistorySchema, logSchema, transactionReceiptSchema, accessListResultSchema, SignatureObjectSchema } from './schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getSyncing(web3Context.requestManager);\n});\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getMining(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getHashRate(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getMaxPriorityFeePerGas(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBalance(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getStorageAt(web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = format({\n      format: 'uint'\n    }, storageSlot, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getCode(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlock(web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    return format(blockSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockTransactionCount(web3Context, block = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockUncleCount(web3Context, block = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getUncle(web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = format({\n      format: 'uint'\n    }, uncleIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return format(blockSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransaction(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => formatTransaction(transaction, returnFormat, {\n      fillInputAndData: true\n    }));\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionFromBlock(web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = format({\n      format: 'uint'\n    }, transactionIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : format(transactionReceiptSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionCount(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction(web3Context, transaction, returnFormat, options = {\n  checkRevertBeforeSending: true\n}) {\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {\n          from: getTransactionFromOrToAttr('from', web3Context, transaction),\n          to: getTransactionFromOrToAttr('to', web3Context, transaction)\n        }), ETH_DATA_FORMAT);\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n          if (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = {\n  checkRevertBeforeSending: true\n}) {\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = format({\n          format: 'bytes'\n        }, signedTransaction, ETH_DATA_FORMAT);\n        const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          const {\n              v,\n              r,\n              s\n            } = unSerializedTransactionWithFrom,\n            txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sign(web3Context, message, addressOrIndex, returnFormat) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = format({\n      format: 'bytes'\n    }, message, DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return format(SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTransaction(web3Context, transaction, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTransaction(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return isString(response) ? decodeSignedTransaction(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: format({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: formatTransaction(response.tx, returnFormat, {\n        fillInputAndData: true\n      })\n    };\n  });\n}\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function call(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.call(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function estimateGas(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!isNullish(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = numberToHex(toBlock);\n      }\n    }\n    if (!isNullish(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = numberToHex(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return format(logSchema, res, returnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getChainId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getProof(web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => format({\n      format: 'bytes'\n    }, storageKey, ETH_DATA_FORMAT));\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return format(accountSchema, response, returnFormat);\n  });\n}\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getFeeHistory(web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = format({\n      format: 'uint'\n    }, blockCount, ETH_DATA_FORMAT);\n    const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({\n      format: 'uint'\n    }, newestBlock, ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = format({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, NUMBER_DATA_FORMAT);\n    const response = yield ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return format(feeHistorySchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function createAccessList(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.createAccessList(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n    return format(accessListResultSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}","map":{"version":3,"names":["ETH_DATA_FORMAT","DEFAULT_RETURN_FORMAT","Web3PromiEvent","format","hexToBytes","bytesToUint8Array","numberToHex","TransactionFactory","isBlockTag","isBytes","isNullish","isString","SignatureError","ethRpcMethods","decodeSignedTransaction","accountSchema","blockSchema","feeHistorySchema","logSchema","transactionReceiptSchema","accessListResultSchema","SignatureObjectSchema","getTransactionFromOrToAttr","formatTransaction","trySendTransaction","waitForTransactionReceipt","NUMBER_DATA_FORMAT","SendTxHelper","getProtocolVersion","web3Context","__awaiter","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","getGasPrice","getMaxPriorityFeePerGas","getBlockNumber","getBalance","address","blockNumber","defaultBlock","blockNumberFormatted","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","blockHashFormatted","getBlockByHash","getBlockByNumber","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","getTransactionByHash","fillInputAndData","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getTransactionCount","sendTransaction","options","checkRevertBeforeSending","promiEvent","resolve","reject","setImmediate","sendTxHelper","transactionFormatted","Object","assign","from","to","populateGasPrice","emitSending","wallet","get","signAndSend","tx","emitSent","emitTransactionHash","transactionReceipt","transactionReceiptFormatted","getReceiptWithEvents","emitReceipt","handleResolve","receipt","emitConfirmation","error","handleError","sendSignedTransaction","signedTransaction","signedTransactionFormattedHex","unSerializedTransaction","fromSerializedData","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","v","r","s","txWithoutSigParams","__rest","sendRawTransaction","sign","message","addressOrIndex","messageFormatted","_a","signed","signTransaction","raw","call","estimateGas","getLogs","filter","toBlock","fromBlock","formattedFilter","result","res","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","createAccessList","signTypedData","typedData","useLegacy"],"sources":["../../src/rpc_method_wrappers.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}