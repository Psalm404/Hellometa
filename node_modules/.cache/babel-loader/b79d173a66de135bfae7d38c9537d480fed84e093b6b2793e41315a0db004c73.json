{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { toChecksumAddress } from 'web3-utils';\nimport { isAddress, utils } from 'web3-validator';\nimport { alloc, WORD_SIZE } from '../utils.js';\nconst ADDRESS_BYTES_COUNT = 20;\nconst ADDRESS_OFFSET = WORD_SIZE - ADDRESS_BYTES_COUNT;\nexport function encodeAddress(param, input) {\n  if (typeof input !== 'string') {\n    throw new AbiError('address type expects string as input type', {\n      value: input,\n      name: param.name,\n      type: param.type\n    });\n  }\n  let address = input.toLowerCase();\n  if (!address.startsWith('0x')) {\n    address = `0x${address}`;\n  }\n  if (!isAddress(address)) {\n    throw new AbiError('provided input is not valid address', {\n      value: input,\n      name: param.name,\n      type: param.type\n    });\n  }\n  // for better performance, we could convert hex to destination bytes directly (encoded var)\n  const addressBytes = utils.hexToUint8Array(address);\n  // expand address to WORD_SIZE\n  const encoded = alloc(WORD_SIZE);\n  encoded.set(addressBytes, ADDRESS_OFFSET);\n  return {\n    dynamic: false,\n    encoded\n  };\n}\nexport function decodeAddress(_param, bytes) {\n  const addressBytes = bytes.subarray(ADDRESS_OFFSET, WORD_SIZE);\n  if (addressBytes.length !== ADDRESS_BYTES_COUNT) {\n    throw new AbiError('Invalid decoding input, not enough bytes to decode address', {\n      bytes\n    });\n  }\n  const result = utils.uint8ArrayToHexString(addressBytes);\n  // should we check is decoded value is valid address?\n  // if(!isAddress(result)) {\n  //     throw new AbiError(\"encoded data is not valid address\", {\n  //         address: result,\n  //     });\n  // }\n  return {\n    result: toChecksumAddress(result),\n    encoded: bytes.subarray(WORD_SIZE),\n    consumed: WORD_SIZE\n  };\n}","map":{"version":3,"names":["AbiError","toChecksumAddress","isAddress","utils","alloc","WORD_SIZE","ADDRESS_BYTES_COUNT","ADDRESS_OFFSET","encodeAddress","param","input","value","name","type","address","toLowerCase","startsWith","addressBytes","hexToUint8Array","encoded","set","dynamic","decodeAddress","_param","bytes","subarray","length","result","uint8ArrayToHexString","consumed"],"sources":["../../../../src/coders/base/address.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,SAASC,iBAAiB,QAAQ,YAAY;AAC9C,SAASC,SAAS,EAAEC,KAAK,QAAQ,gBAAgB;AAEjD,SAASC,KAAK,EAAEC,SAAS,QAAQ,aAAa;AAE9C,MAAMC,mBAAmB,GAAG,EAAE;AAC9B,MAAMC,cAAc,GAAGF,SAAS,GAAGC,mBAAmB;AAEtD,OAAM,SAAUE,aAAaA,CAACC,KAAmB,EAAEC,KAAc;EAChE,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC9B,MAAM,IAAIV,QAAQ,CAAC,2CAA2C,EAAE;MAC/DW,KAAK,EAAED,KAAK;MACZE,IAAI,EAAEH,KAAK,CAACG,IAAI;MAChBC,IAAI,EAAEJ,KAAK,CAACI;KACZ,CAAC;;EAEH,IAAIC,OAAO,GAAGJ,KAAK,CAACK,WAAW,EAAE;EACjC,IAAI,CAACD,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC,EAAE;IAC9BF,OAAO,GAAG,KAAKA,OAAO,EAAE;;EAEzB,IAAI,CAACZ,SAAS,CAACY,OAAO,CAAC,EAAE;IACxB,MAAM,IAAId,QAAQ,CAAC,qCAAqC,EAAE;MACzDW,KAAK,EAAED,KAAK;MACZE,IAAI,EAAEH,KAAK,CAACG,IAAI;MAChBC,IAAI,EAAEJ,KAAK,CAACI;KACZ,CAAC;;EAEH;EACA,MAAMI,YAAY,GAAGd,KAAK,CAACe,eAAe,CAACJ,OAAO,CAAC;EACnD;EACA,MAAMK,OAAO,GAAGf,KAAK,CAACC,SAAS,CAAC;EAChCc,OAAO,CAACC,GAAG,CAACH,YAAY,EAAEV,cAAc,CAAC;EACzC,OAAO;IACNc,OAAO,EAAE,KAAK;IACdF;GACA;AACF;AAEA,OAAM,SAAUG,aAAaA,CAACC,MAAoB,EAAEC,KAAiB;EACpE,MAAMP,YAAY,GAAGO,KAAK,CAACC,QAAQ,CAAClB,cAAc,EAAEF,SAAS,CAAC;EAC9D,IAAIY,YAAY,CAACS,MAAM,KAAKpB,mBAAmB,EAAE;IAChD,MAAM,IAAIN,QAAQ,CAAC,4DAA4D,EAAE;MAAEwB;IAAK,CAAE,CAAC;;EAE5F,MAAMG,MAAM,GAAGxB,KAAK,CAACyB,qBAAqB,CAACX,YAAY,CAAC;EAExD;EACA;EACA;EACA;EACA;EACA;EACA,OAAO;IACNU,MAAM,EAAE1B,iBAAiB,CAAC0B,MAAM,CAAC;IACjCR,OAAO,EAAEK,KAAK,CAACC,QAAQ,CAACpB,SAAS,CAAC;IAClCwB,QAAQ,EAAExB;GACV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}