{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { uint8ArrayConcat } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { decodeParamFromAbiParameter, encodeNumber, encodeParamFromAbiParameter } from './index.js';\nimport { extractArrayType, isDynamic, WORD_SIZE } from '../utils.js';\nimport { decodeNumber } from './number.js';\nimport { encodeDynamicParams } from './utils.js';\nexport function encodeArray(param, values) {\n  if (!Array.isArray(values)) {\n    throw new AbiError('Expected value to be array', {\n      abi: param,\n      values\n    });\n  }\n  const {\n    size,\n    param: arrayItemParam\n  } = extractArrayType(param);\n  const encodedParams = values.map(v => encodeParamFromAbiParameter(arrayItemParam, v));\n  const dynamic = size === -1;\n  const dynamicItems = encodedParams.length > 0 && encodedParams[0].dynamic;\n  if (!dynamic && values.length !== size) {\n    throw new AbiError(\"Given arguments count doesn't match array length\", {\n      arrayLength: size,\n      argumentsLength: values.length\n    });\n  }\n  if (dynamic || dynamicItems) {\n    const encodingResult = encodeDynamicParams(encodedParams);\n    if (dynamic) {\n      const encodedLength = encodeNumber({\n        type: 'uint256',\n        name: ''\n      }, encodedParams.length).encoded;\n      return {\n        dynamic: true,\n        encoded: encodedParams.length > 0 ? uint8ArrayConcat(encodedLength, encodingResult) : encodedLength\n      };\n    }\n    return {\n      dynamic: true,\n      encoded: encodingResult\n    };\n  }\n  return {\n    dynamic: false,\n    encoded: uint8ArrayConcat(...encodedParams.map(p => p.encoded))\n  };\n}\nexport function decodeArray(param, bytes) {\n  // eslint-disable-next-line prefer-const\n  let {\n    size,\n    param: arrayItemParam\n  } = extractArrayType(param);\n  const dynamic = size === -1;\n  let consumed = 0;\n  const result = [];\n  let remaining = bytes;\n  // dynamic array, we need to decode length\n  if (dynamic) {\n    const lengthResult = decodeNumber({\n      type: 'uint32',\n      name: ''\n    }, bytes);\n    size = Number(lengthResult.result);\n    consumed = lengthResult.consumed;\n    remaining = lengthResult.encoded;\n  }\n  const hasDynamicChild = isDynamic(arrayItemParam);\n  if (hasDynamicChild) {\n    // known length but dynamic child, each child is actually head element with encoded offset\n    for (let i = 0; i < size; i += 1) {\n      const offsetResult = decodeNumber({\n        type: 'uint32',\n        name: ''\n      }, remaining.subarray(i * WORD_SIZE));\n      consumed += offsetResult.consumed;\n      const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, remaining.subarray(Number(offsetResult.result)));\n      consumed += decodedChildResult.consumed;\n      result.push(decodedChildResult.result);\n    }\n    return {\n      result,\n      encoded: remaining.subarray(consumed),\n      consumed\n    };\n  }\n  for (let i = 0; i < size; i += 1) {\n    // decode static params\n    const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, bytes.subarray(consumed));\n    consumed += decodedChildResult.consumed;\n    result.push(decodedChildResult.result);\n  }\n  return {\n    result,\n    encoded: bytes.subarray(consumed),\n    consumed\n  };\n}","map":{"version":3,"names":["AbiError","uint8ArrayConcat","decodeParamFromAbiParameter","encodeNumber","encodeParamFromAbiParameter","extractArrayType","isDynamic","WORD_SIZE","decodeNumber","encodeDynamicParams","encodeArray","param","values","Array","isArray","abi","size","arrayItemParam","encodedParams","map","v","dynamic","dynamicItems","length","arrayLength","argumentsLength","encodingResult","encodedLength","type","name","encoded","p","decodeArray","bytes","consumed","result","remaining","lengthResult","Number","hasDynamicChild","i","offsetResult","subarray","decodedChildResult","push"],"sources":["../../../../src/coders/base/array.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}