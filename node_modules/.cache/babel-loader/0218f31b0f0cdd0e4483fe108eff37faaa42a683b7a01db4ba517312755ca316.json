{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3Context } from 'web3-core';\nimport * as rpcWrappers from './rpc_method_wrappers.js';\nexport class Personal extends Web3Context {\n  /**\n   *Returns a list of accounts the node controls by using the provider and calling the RPC method personal_listAccounts. Using `web3.eth.accounts.create()` will not add accounts into this list. For that use `web3.eth.personal.newAccount()`.\n   * @returns - An array of addresses controlled by the node.\n   * @example\n   * ```ts\n   *  const accounts = await personal.getAccounts();\n   * console.log(accounts);\n   * >\n   * [\n   * \t'0x79D7BbaC53C9aF700d0B250e9AE789E503Fcd6AE',\n   * \t'0xe2597eB05CF9a87eB1309e86750C903EC38E527e',\n   * \t'0x7eD0e85B8E1E925600B4373e6d108F34AB38a401',\n   * \t'0xE4bEEf667408b99053dC147Ed19592aDa0d77F59',\n   * \t'0x7AB80aeB6bb488B7f6c41c58e83Ef248eB39c882',\n   * \t'0x12B1D9d74d73b1C3A245B19C1C5501c653aF1af9',\n   * \t'0x1a6075A263Ee140e00Dbf8E374Fc5A443d097894',\n   * \t'0x4FEC0A51024B13030D26E70904B066C6d41157A5',\n   * \t'0x03095dc4857BB26f3a4550c5651Df8b7f6b6B1Ef',\n   * \t'0xac0B9b6e8A17991cb172B2ABAF45Fb5eb769E540'\n   * ]\n   * ```\n   */\n  getAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.getAccounts(this.requestManager);\n    });\n  }\n  /**\n   * Creates a new account and returns its address.\n   * **_NOTE:_**  This function sends a sensitive information like password. Never call this function over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!\n   * @param password - The password to encrypt the account with.\n   * @returns - The address of the new account.\n   * @example\n   * ```ts\n   * const addr = await web3.eth.personal.newAccount('password');\n   * console.log(addr);\n   * > '0x1234567891011121314151617181920212223456'\n   * ```\n   */\n  newAccount(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.newAccount(this.requestManager, password);\n    });\n  }\n  /**\n   * Unlocks an account for a given duration.\n   * @param address - The address of the account to unlock.\n   * @param password - The password of the account to unlock.\n   * @param unlockDuration - The duration in seconds to unlock the account for.\n   * @example\n   * ```ts\n   * await personal.unlockAccount(\n   * \t\"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n   * \t\"123456\",\n   * \t600\n   * );\n   * ```\n   */\n  unlockAccount(address, password, unlockDuration) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.unlockAccount(this.requestManager, address, password, unlockDuration);\n    });\n  }\n  /**\n   * Locks the given account\n   * @param address - The address of the account to lock.\n   * @returns - `true` if the account was locked, otherwise `false`.\n   * @example\n   * ```ts\n   * await personal.lockAccount(\n   * \t\"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\"\n   * );\n   */\n  lockAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.lockAccount(this.requestManager, address);\n    });\n  }\n  /**\n   * Imports the given private key into the key store, encrypting it with the passphrase.\n   * @param keyData - An unencrypted private key (hex string).\n   * @param passphrase  - The password of the account\n   * @returns - The address of the new account.\n   * @example\n   * ```ts\n   * const accountAddress = await personal.importRawKey(\n   * \t\"abe40cb08850da918ee951b237fa87946499b2d8643e4aa12b0610b050c731f6\",\n   * \t\"123456\"\n   * );\n   *\n   * console.log(unlockTx);\n   * > 0x8727a8b34ec833154b72b62cac05d69f86eb6556\n   * ```\n   */\n  importRawKey(keyData, passphrase) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.importRawKey(this.requestManager, keyData, passphrase);\n    });\n  }\n  /**\n   * This method sends a transaction over the management API.\n   * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n   * @param tx - The transaction options\n   * @param passphrase - The passphrase of the current account\n   * @returns - The transaction hash\n   * @example\n   * ```ts\n   * const txHash = personal\n   * .sendTransaction({\n   *  \tfrom: \"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n   * \tgasPrice: \"20000000000\",\n   * \tgas: \"21000\",\n   * \tto: \"0x3535353535353535353535353535353535353535\",\n   * \tvalue: \"1000000\",\n   * \tdata: \"\",\n   * \tnonce: 0,\n   * },\n   * \"123456\");\n   *\n   * console.log(txHash);\n   * > 0x9445325c3c5638c9fe425b003b8c32f03e9f99d409555a650a6838ba712bb51b\n   * ```\n   */\n  sendTransaction(tx, passphrase) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.sendTransaction(this.requestManager, tx, passphrase);\n    });\n  }\n  /**\n   * Signs a transaction. This account needs to be unlocked.\n   * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n   * @param tx - The transaction data to sign. See {@link sendTransaction}  for more information.\n   * @param passphrase - The password of the `from` account, to sign the transaction with.\n   * @returns - The RLP encoded transaction. The `raw` property can be used to send the transaction using {@link sendSignedTransaction}.\n   * @example\n   * ```ts\n   * const tx = personal\n   * .signTransaction({\n   * \tfrom: \"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n   * \tgasPrice: \"20000000000\",\n   * \tgas: \"21000\",\n   * \tto: \"0x3535353535353535353535353535353535353535\",\n   * \tvalue: \"1000000000000000000\",\n   * \tdata: \"\",\n   * \tnonce: 0,\n   * },\n   * \"123456\");\n   *\n   * console.log(tx);\n   *\n   * > {\n   * \traw: '0xf86e808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080820a95a0c951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526a038b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',\n   * \ttx: {\n   * \ttype: '0x0',\n   * \tnonce: '0x0',\n   * \tgasPrice: '0x4a817c800',\n   * \tmaxPriorityFeePerGas: null,\n   * \tmaxFeePerGas: null,\n   * \tgas: '0x5208',\n   * \tvalue: '0xde0b6b3a7640000',\n   * \tinput: '0x',\n   * \tv: '0xa95',\n   * \tr: '0xc951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526',\n   * \ts: '0x38b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',\n   * \tto: '0x3535353535353535353535353535353535353535',\n   * \thash: '0x65e3df790ab2a32068b13cff970b26445b8995229ae4abbed61bd996f09fce69'\n   * \t}\n   * }\n   * ```\n   */\n  signTransaction(tx, passphrase) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.signTransaction(this.requestManager, tx, passphrase);\n    });\n  }\n  /**\n   * Calculates an Ethereum specific signature with:\n   * sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + dataToSign.length + dataToSign)))\n   * Adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.\n   *\n   * If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover\n   * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n   * @param data - The data to sign.\n   * @param address - The address to sign with.\n   * @param passphrase - The passphrase to decrypt the account with.\n   * @returns - The signature.\n   * @example\n   * ```ts\n   * const sig = await personal .sign(\"Hello world\", \"0x0D4Aa485ECbC499c70860fEb7e5AaeAf5fd8172E\", \"123456\")\n   * console.log(sig)\n   * > 0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b\n   * ```\n   */\n  sign(data, address, passphrase) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.sign(this.requestManager, data, address, passphrase);\n    });\n  }\n  /**\n   * Recovers the account that signed the data.\n   * @param signedData - Data that was signed. If String it will be converted using {@link utf8ToHex}\n   * @param signature - The signature\n   * @returns - The address of the account that signed the data.\n   * @example\n   * ```ts\n   *  const address = await personal.ecRecover(\n   * \t\"Hello world\",\n   * \t\"0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b\"\n   * );\n   * console.log(address);\n   * > 0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\n   * ```\n   */\n  ecRecover(signedData, signature) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcWrappers.ecRecover(this.requestManager, signedData, signature);\n    });\n  }\n}","map":{"version":3,"names":["Web3Context","rpcWrappers","Personal","getAccounts","requestManager","newAccount","password","unlockAccount","address","unlockDuration","lockAccount","importRawKey","keyData","passphrase","sendTransaction","tx","signTransaction","sign","data","ecRecover","signedData","signature"],"sources":["../../src/personal.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,WAAW,QAAQ,WAAW;AAGvC,OAAO,KAAKC,WAAW,MAAM,0BAA0B;AAEvD,OAAM,MAAOC,QAAS,SAAQF,WAA2B;EACxD;;;;;;;;;;;;;;;;;;;;;;EAsBaG,WAAWA,CAAA;;MACvB,OAAOF,WAAW,CAACE,WAAW,CAAC,IAAI,CAACC,cAAc,CAAC;IACpD,CAAC;;EAED;;;;;;;;;;;;EAYaC,UAAUA,CAACC,QAAgB;;MACvC,OAAOL,WAAW,CAACI,UAAU,CAAC,IAAI,CAACD,cAAc,EAAEE,QAAQ,CAAC;IAC7D,CAAC;;EAED;;;;;;;;;;;;;;EAcaC,aAAaA,CAACC,OAAgB,EAAEF,QAAgB,EAAEG,cAAsB;;MACpF,OAAOR,WAAW,CAACM,aAAa,CAAC,IAAI,CAACH,cAAc,EAAEI,OAAO,EAAEF,QAAQ,EAAEG,cAAc,CAAC;IACzF,CAAC;;EACD;;;;;;;;;;EAUaC,WAAWA,CAACF,OAAgB;;MACxC,OAAOP,WAAW,CAACS,WAAW,CAAC,IAAI,CAACN,cAAc,EAAEI,OAAO,CAAC;IAC7D,CAAC;;EACD;;;;;;;;;;;;;;;;EAgBaG,YAAYA,CAACC,OAAkB,EAAEC,UAAkB;;MAC/D,OAAOZ,WAAW,CAACU,YAAY,CAAC,IAAI,CAACP,cAAc,EAAEQ,OAAO,EAAEC,UAAU,CAAC;IAC1E,CAAC;;EAED;;;;;;;;;;;;;;;;;;;;;;;;EAwBaC,eAAeA,CAACC,EAAe,EAAEF,UAAkB;;MAC/D,OAAOZ,WAAW,CAACa,eAAe,CAAC,IAAI,CAACV,cAAc,EAAEW,EAAE,EAAEF,UAAU,CAAC;IACxE,CAAC;;EACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0CaG,eAAeA,CAACD,EAAe,EAAEF,UAAkB;;MAC/D,OAAOZ,WAAW,CAACe,eAAe,CAAC,IAAI,CAACZ,cAAc,EAAEW,EAAE,EAAEF,UAAU,CAAC;IACxE,CAAC;;EACD;;;;;;;;;;;;;;;;;;EAkBaI,IAAIA,CAACC,IAAe,EAAEV,OAAgB,EAAEK,UAAkB;;MACtE,OAAOZ,WAAW,CAACgB,IAAI,CAAC,IAAI,CAACb,cAAc,EAAEc,IAAI,EAAEV,OAAO,EAAEK,UAAU,CAAC;IACxE,CAAC;;EAED;;;;;;;;;;;;;;;EAeaM,SAASA,CAACC,UAAqB,EAAEC,SAAiB;;MAC9D,OAAOpB,WAAW,CAACkB,SAAS,CAAC,IAAI,CAACf,cAAc,EAAEgB,UAAU,EAAEC,SAAS,CAAC;IACzE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}