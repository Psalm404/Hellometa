{"ast":null,"code":"import \"core-js/modules/web.immediate.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport { accountSchema, blockSchema, feeHistorySchema, logSchema, transactionReceiptSchema, accessListResultSchema, SignatureObjectSchema } from './schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getSyncing(web3Context.requestManager);\n});\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getMining(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getHashRate(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getMaxPriorityFeePerGas(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBalance(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getStorageAt(web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = format({\n      format: 'uint'\n    }, storageSlot, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getCode(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlock(web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    const res = format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    if (!isNullish(res)) {\n      const result = Object.assign(Object.assign({}, res), {\n        transactions: (_a = res.transactions) !== null && _a !== void 0 ? _a : []\n      });\n      return result;\n    }\n    return res;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockTransactionCount(web3Context, block = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockUncleCount(web3Context, block = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getUncle(web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = format({\n      format: 'uint'\n    }, uncleIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransaction(web3Context, transactionHash, returnFormat = web3Context.defaultReturnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => formatTransaction(transaction, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    }));\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionFromBlock(web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = format({\n      format: 'uint'\n    }, transactionIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return isNullish(response) ? response : formatTransaction(response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    let response;\n    try {\n      response = yield ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    } catch (error) {\n      // geth indexing error, we poll until transactions stopped indexing\n      if (typeof error === 'object' && !isNullish(error) && 'message' in error && error.message === 'transaction indexing is in progress') {\n        console.warn('Transaction indexing is in progress.');\n      } else {\n        throw error;\n      }\n    }\n    return isNullish(response) ? response : format(transactionReceiptSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionCount(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction(web3Context, transactionObj, returnFormat, options = {\n  checkRevertBeforeSending: true\n}, transactionMiddleware) {\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transaction = Object.assign({}, transactionObj);\n        if (!isNullish(transactionMiddleware)) {\n          transaction = yield transactionMiddleware.processTransaction(transaction);\n        }\n        let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {\n          from: getTransactionFromOrToAttr('from', web3Context, transaction),\n          to: getTransactionFromOrToAttr('to', web3Context, transaction)\n        }), ETH_DATA_FORMAT, {\n          transactionSchema: web3Context.config.customTransactionSchema\n        });\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n          if (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = {\n  checkRevertBeforeSending: true\n}) {\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = format({\n          format: 'bytes'\n        }, signedTransaction, ETH_DATA_FORMAT);\n        const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          const {\n              v,\n              r,\n              s\n            } = unSerializedTransactionWithFrom,\n            txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sign(web3Context, message, addressOrIndex, returnFormat = web3Context.defaultReturnFormat) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = format({\n      format: 'bytes'\n    }, message, DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return format(SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTransaction(web3Context, transaction, returnFormat = web3Context.defaultReturnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTransaction(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return isString(response) ? decodeSignedTransaction(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: format({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: formatTransaction(response.tx, returnFormat, {\n        transactionSchema: web3Context.config.customTransactionSchema,\n        fillInputAndData: true\n      })\n    };\n  });\n}\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function call(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat = web3Context.defaultReturnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.call(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }), blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function estimateGas(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    });\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!isNullish(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = numberToHex(toBlock);\n      }\n    }\n    if (!isNullish(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = numberToHex(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getChainId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getProof(web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => format({\n      format: 'bytes'\n    }, storageKey, ETH_DATA_FORMAT));\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return format(accountSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getFeeHistory(web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = format({\n      format: 'uint'\n    }, blockCount, ETH_DATA_FORMAT);\n    const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({\n      format: 'uint'\n    }, newestBlock, ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = format({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, NUMBER_DATA_FORMAT);\n    const response = yield ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return format(feeHistorySchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function createAccessList(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.createAccessList(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }), blockNumberFormatted);\n    return format(accessListResultSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}","map":{"version":3,"names":["ETH_DATA_FORMAT","DEFAULT_RETURN_FORMAT","Web3PromiEvent","format","hexToBytes","bytesToUint8Array","numberToHex","TransactionFactory","isBlockTag","isBytes","isNullish","isString","SignatureError","ethRpcMethods","decodeSignedTransaction","accountSchema","blockSchema","feeHistorySchema","logSchema","transactionReceiptSchema","accessListResultSchema","SignatureObjectSchema","getTransactionFromOrToAttr","formatTransaction","trySendTransaction","waitForTransactionReceipt","NUMBER_DATA_FORMAT","SendTxHelper","getProtocolVersion","web3Context","__awaiter","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","defaultReturnFormat","getGasPrice","getMaxPriorityFeePerGas","getBlockNumber","getBalance","address","blockNumber","defaultBlock","blockNumberFormatted","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","blockHashFormatted","getBlockByHash","getBlockByNumber","res","result","Object","assign","transactions","_a","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","getTransactionByHash","transactionSchema","config","customTransactionSchema","fillInputAndData","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","error","message","console","warn","getTransactionCount","sendTransaction","transactionObj","options","checkRevertBeforeSending","transactionMiddleware","promiEvent","resolve","reject","setImmediate","sendTxHelper","processTransaction","transactionFormatted","from","to","populateGasPrice","emitSending","wallet","get","signAndSend","tx","emitSent","emitTransactionHash","transactionReceipt","transactionReceiptFormatted","getReceiptWithEvents","emitReceipt","handleResolve","receipt","emitConfirmation","handleError","sendSignedTransaction","signedTransaction","signedTransactionFormattedHex","unSerializedTransaction","fromSerializedData","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","v","r","s","txWithoutSigParams","__rest","sendRawTransaction","sign","addressOrIndex","messageFormatted","signed","signTransaction","raw","call","estimateGas","getLogs","filter","toBlock","fromBlock","formattedFilter","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","createAccessList","signTypedData","typedData","useLegacy"],"sources":["../../src/rpc_method_wrappers.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}